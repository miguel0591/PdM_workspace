
Proyecto Final - PCSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e00  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004fb0  08004fb0  00014fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050ec  080050ec  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080050ec  080050ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f4  080050f4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050f8  080050f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080050fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          0000026c  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d0  200002d0  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000dcae  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000280a  00000000  00000000  0002dd85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c70  00000000  00000000  00030590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000098a  00000000  00000000  00031200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026601  00000000  00000000  00031b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012846  00000000  00000000  0005818b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1ad1  00000000  00000000  0006a9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000035ec  00000000  00000000  0014c4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0014fa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f98 	.word	0x08004f98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08004f98 	.word	0x08004f98

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f001 fa7e 	bl	8001aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f814 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 fe98 	bl	80012dc <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ac:	f000 fdc6 	bl	800113c <MX_ADC1_Init>
  MX_I2C3_Init();
 80005b0:	f001 f8fa 	bl	80017a8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80005b4:	f001 f9d0 	bl	8001958 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_2x16_init();
 80005b8:	f000 f9ec 	bl	8000994 <LCD_2x16_init>
  MEF_init();
 80005bc:	f000 fc3c 	bl	8000e38 <MEF_init>
  SENSOR_TEMP_init();
 80005c0:	f000 fd7c 	bl	80010bc <SENSOR_TEMP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		MEF_update();
 80005c4:	f000 fc56 	bl	8000e74 <MEF_update>
		MEF_uartUpdate();
 80005c8:	f000 fd4a 	bl	8001060 <MEF_uartUpdate>
		MEF_update();
 80005cc:	e7fa      	b.n	80005c4 <main+0x28>
	...

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 f856 	bl	8004690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <SystemClock_Config+0xd0>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <SystemClock_Config+0xd0>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <SystemClock_Config+0xd0>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <SystemClock_Config+0xd4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xd4>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000648:	2332      	movs	r3, #50	; 0x32
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800064c:	2304      	movs	r3, #4
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f002 ff9f 	bl	800359c <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000664:	f000 f820 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000674:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fa00 	bl	8003a8c <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000692:	f000 f809 	bl	80006a8 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_MspInit+0x4c>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <HAL_MspInit+0x4c>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x4c>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006f2:	2007      	movs	r0, #7
 80006f4:	f002 f892 	bl	800281c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f001 f9f8 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000760:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <_sbrk+0x5c>)
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <_sbrk+0x60>)
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d102      	bne.n	800077a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <_sbrk+0x64>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <_sbrk+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	429a      	cmp	r2, r3
 8000786:	d207      	bcs.n	8000798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000788:	f003 ff8a 	bl	80046a0 <__errno>
 800078c:	4603      	mov	r3, r0
 800078e:	220c      	movs	r2, #12
 8000790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000796:	e009      	b.n	80007ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <_sbrk+0x64>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <_sbrk+0x64>)
 80007a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007aa:	68fb      	ldr	r3, [r7, #12]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20030000 	.word	0x20030000
 80007b8:	00000400 	.word	0x00000400
 80007bc:	20000080 	.word	0x20000080
 80007c0:	200002d0 	.word	0x200002d0

080007c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <SystemInit+0x20>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <SystemInit+0x20>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80007e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000820 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007ee:	490e      	ldr	r1, [pc, #56]	; (8000828 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000804:	4c0b      	ldr	r4, [pc, #44]	; (8000834 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000812:	f7ff ffd7 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f003 ff49 	bl	80046ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800081a:	f7ff febf 	bl	800059c <main>
  bx  lr    
 800081e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000820:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800082c:	080050fc 	.word	0x080050fc
  ldr r2, =_sbss
 8000830:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000834:	200002d0 	.word	0x200002d0

08000838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC_IRQHandler>

0800083a <delayInit>:
 */
#include "API_delay.h"


//Funcion de Inicializacion
void delayInit( delay_t* delay, tick_t duration ){
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	683a      	ldr	r2, [r7, #0]
 8000848:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2200      	movs	r2, #0
 800084e:	721a      	strb	r2, [r3, #8]
	delay->startTime = HAL_GetTick();
 8000850:	f001 f98c 	bl	8001b6c <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	601a      	str	r2, [r3, #0]
};
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <delayRead>:

//Funcion de control
bool_t delayRead( delay_t* delay ){
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
	uint8_t flag;
	if ((HAL_GetTick() - delay->startTime) <= delay->duration) {
 800086a:	f001 f97f 	bl	8001b6c <HAL_GetTick>
 800086e:	4602      	mov	r2, r0
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	1ad2      	subs	r2, r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	429a      	cmp	r2, r3
 800087c:	d805      	bhi.n	800088a <delayRead+0x28>
		delay->running = false;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	721a      	strb	r2, [r3, #8]
		flag = false;
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e004      	b.n	8000894 <delayRead+0x32>
	}else{
		delay->running = true;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2201      	movs	r2, #1
 800088e:	721a      	strb	r2, [r3, #8]
		flag = true;
 8000890:	2301      	movs	r3, #1
 8000892:	73fb      	strb	r3, [r7, #15]
	}
	return flag;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	2b00      	cmp	r3, #0
 8000898:	bf14      	ite	ne
 800089a:	2301      	movne	r3, #1
 800089c:	2300      	moveq	r3, #0
 800089e:	b2db      	uxtb	r3, r3
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <delayWrite>:

//Funcion de cambio de duracion
void delayWrite( delay_t * delay, tick_t duration ){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	721a      	strb	r2, [r3, #8]
	delay->startTime = HAL_GetTick();
 80008be:	f001 f955 	bl	8001b6c <HAL_GetTick>
 80008c2:	4602      	mov	r2, r0
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	601a      	str	r2, [r3, #0]
};
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <LCD_2x16_command>:
#ifdef MOD_4BIT_I2C

/*******************************************************************************************
 *                             Funciones Privadas Necesarias                               *
 *******************************************************************************************/
static LCD_Status_t LCD_2x16_command(uint8_t cmd){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd_h, cmd_l;
	uint8_t data[4];
	cmd_h = (cmd) & 0xF0;
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f023 030f 	bic.w	r3, r3, #15
 80008e0:	73fb      	strb	r3, [r7, #15]
	cmd_l = ((cmd) & 0x0F) << 4;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	73bb      	strb	r3, [r7, #14]
	data[0] = (cmd_h | EN_ON) | BL_ON;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	f043 030c 	orr.w	r3, r3, #12
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	723b      	strb	r3, [r7, #8]
	data[1] = (data[0]) & ~EN_ON;
 80008f2:	7a3b      	ldrb	r3, [r7, #8]
 80008f4:	f023 0304 	bic.w	r3, r3, #4
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	727b      	strb	r3, [r7, #9]
	data[2] = cmd_l | EN_ON | BL_ON;
 80008fc:	7bbb      	ldrb	r3, [r7, #14]
 80008fe:	f043 030c 	orr.w	r3, r3, #12
 8000902:	b2db      	uxtb	r3, r3
 8000904:	72bb      	strb	r3, [r7, #10]
	data[3] = (data[2]) & ~EN_ON;
 8000906:	7abb      	ldrb	r3, [r7, #10]
 8000908:	f023 0304 	bic.w	r3, r3, #4
 800090c:	b2db      	uxtb	r3, r3
 800090e:	72fb      	strb	r3, [r7, #11]
	LCD_2x16_Send_I2C(data);
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	4618      	mov	r0, r3
 8000916:	f001 f80d 	bl	8001934 <LCD_2x16_Send_I2C>
	return OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <LCD_2x16_char>:
static LCD_Status_t LCD_2x16_char(char letra){
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	char letra_h, letra_l;
	uint8_t data[4];
	letra_h = (letra) & 0xF0;
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f023 030f 	bic.w	r3, r3, #15
 8000934:	73fb      	strb	r3, [r7, #15]
	letra_l = ((letra) & 0x0F) << 4;
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	73bb      	strb	r3, [r7, #14]
	data[0] = ((letra_h | EN_ON) | BL_ON) | RS_ON;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	f043 030d 	orr.w	r3, r3, #13
 8000942:	b2db      	uxtb	r3, r3
 8000944:	723b      	strb	r3, [r7, #8]
	data[1] = (data[0]) & ~EN_ON;
 8000946:	7a3b      	ldrb	r3, [r7, #8]
 8000948:	f023 0304 	bic.w	r3, r3, #4
 800094c:	b2db      	uxtb	r3, r3
 800094e:	727b      	strb	r3, [r7, #9]
	data[2] = letra_l | EN_ON | BL_ON |RS_ON;
 8000950:	7bbb      	ldrb	r3, [r7, #14]
 8000952:	f043 030d 	orr.w	r3, r3, #13
 8000956:	b2db      	uxtb	r3, r3
 8000958:	72bb      	strb	r3, [r7, #10]
	data[3] = (data[2]) & ~EN_ON;
 800095a:	7abb      	ldrb	r3, [r7, #10]
 800095c:	f023 0304 	bic.w	r3, r3, #4
 8000960:	b2db      	uxtb	r3, r3
 8000962:	72fb      	strb	r3, [r7, #11]
	LCD_2x16_Send_I2C(data);
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	4618      	mov	r0, r3
 800096a:	f000 ffe3 	bl	8001934 <LCD_2x16_Send_I2C>
	return OK;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <LCD_2x16_delay>:
static LCD_Status_t LCD_2x16_delay(uint8_t delay){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(delay);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4618      	mov	r0, r3
 8000986:	f001 f8fd 	bl	8001b84 <HAL_Delay>
	return OK;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <LCD_2x16_init>:


/*******************************************************************************************
 *                                    Funciones Publicas                                   *
 *******************************************************************************************/
LCD_Status_t LCD_2x16_init(void){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	LCD_2x16_delay(50);                //Tiempo de espera necesario desde el encendio >40ms
 8000998:	2032      	movs	r0, #50	; 0x32
 800099a:	f7ff ffed 	bl	8000978 <LCD_2x16_delay>
	LCD_Send_RawData(0x3C);
 800099e:	203c      	movs	r0, #60	; 0x3c
 80009a0:	f000 ffac 	bl	80018fc <LCD_Send_RawData>
	LCD_2x16_delay(5);
 80009a4:	2005      	movs	r0, #5
 80009a6:	f7ff ffe7 	bl	8000978 <LCD_2x16_delay>
	LCD_Send_RawData(0x3C);
 80009aa:	203c      	movs	r0, #60	; 0x3c
 80009ac:	f000 ffa6 	bl	80018fc <LCD_Send_RawData>
	LCD_2x16_delay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f7ff ffe1 	bl	8000978 <LCD_2x16_delay>
	LCD_Send_RawData(0x3C);
 80009b6:	203c      	movs	r0, #60	; 0x3c
 80009b8:	f000 ffa0 	bl	80018fc <LCD_Send_RawData>
	LCD_2x16_delay(1);
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff ffdb 	bl	8000978 <LCD_2x16_delay>
	LCD_Send_RawData(0x2C);    // desde aqui funciona en 4 bits.
 80009c2:	202c      	movs	r0, #44	; 0x2c
 80009c4:	f000 ff9a 	bl	80018fc <LCD_Send_RawData>
	LCD_2x16_delay(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff ffd5 	bl	8000978 <LCD_2x16_delay>

	LCD_2x16_command(FUNCTION_SET);
 80009ce:	2028      	movs	r0, #40	; 0x28
 80009d0:	f7ff ff7e 	bl	80008d0 <LCD_2x16_command>
	LCD_2x16_delay(1);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ffcf 	bl	8000978 <LCD_2x16_delay>
	LCD_2x16_command(DISPLAY_OFF);
 80009da:	2008      	movs	r0, #8
 80009dc:	f7ff ff78 	bl	80008d0 <LCD_2x16_command>
	LCD_2x16_delay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f7ff ffc9 	bl	8000978 <LCD_2x16_delay>
	LCD_2x16_command(DISPLAY_CLEAR);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff ff72 	bl	80008d0 <LCD_2x16_command>
	LCD_2x16_delay(2);
 80009ec:	2002      	movs	r0, #2
 80009ee:	f7ff ffc3 	bl	8000978 <LCD_2x16_delay>
	LCD_2x16_command(ENTRY_MODE_SET);
 80009f2:	2006      	movs	r0, #6
 80009f4:	f7ff ff6c 	bl	80008d0 <LCD_2x16_command>
	LCD_2x16_delay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f7ff ffbd 	bl	8000978 <LCD_2x16_delay>
	LCD_2x16_command(DISPLAY_0N);
 80009fe:	200c      	movs	r0, #12
 8000a00:	f7ff ff66 	bl	80008d0 <LCD_2x16_command>
	LCD_2x16_delay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff ffb7 	bl	8000978 <LCD_2x16_delay>
	return OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <LCD_2x16_cursor>:

LCD_Status_t LCD_2x16_cursor(uint8_t linea, uint8_t pos){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	460a      	mov	r2, r1
 8000a1a:	71fb      	strb	r3, [r7, #7]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	71bb      	strb	r3, [r7, #6]
	if(linea <= 0 && linea > 2){
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d104      	bne.n	8000a30 <LCD_2x16_cursor+0x20>
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d901      	bls.n	8000a30 <LCD_2x16_cursor+0x20>
		return NO_OK;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e054      	b.n	8000ada <LCD_2x16_cursor+0xca>
	}
	if(pos <= 0 && pos > 16){
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d104      	bne.n	8000a40 <LCD_2x16_cursor+0x30>
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	2b10      	cmp	r3, #16
 8000a3a:	d901      	bls.n	8000a40 <LCD_2x16_cursor+0x30>
		return NO_OK;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e04c      	b.n	8000ada <LCD_2x16_cursor+0xca>
	}

	char dir_h, dir_l;
	uint8_t dir, data[4];
	if(linea == 1){
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d122      	bne.n	8000a8c <LCD_2x16_cursor+0x7c>
		dir = L1_COL1 + (pos - 1);
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	337f      	adds	r3, #127	; 0x7f
 8000a4a:	73fb      	strb	r3, [r7, #15]
		dir_h = (dir)& 0xF0;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	f023 030f 	bic.w	r3, r3, #15
 8000a52:	73bb      	strb	r3, [r7, #14]
		dir_l = ((dir)& 0x0F) << 4;
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	737b      	strb	r3, [r7, #13]
		data[0] = ((dir_h | EN_ON) | BL_ON);
 8000a5a:	7bbb      	ldrb	r3, [r7, #14]
 8000a5c:	f043 030c 	orr.w	r3, r3, #12
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	723b      	strb	r3, [r7, #8]
		data[1] = (data[0]) & ~EN_ON;
 8000a64:	7a3b      	ldrb	r3, [r7, #8]
 8000a66:	f023 0304 	bic.w	r3, r3, #4
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	727b      	strb	r3, [r7, #9]
		data[2] = dir_l | EN_ON | BL_ON;
 8000a6e:	7b7b      	ldrb	r3, [r7, #13]
 8000a70:	f043 030c 	orr.w	r3, r3, #12
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	72bb      	strb	r3, [r7, #10]
		data[3] = (data[2]) & ~EN_ON;
 8000a78:	7abb      	ldrb	r3, [r7, #10]
 8000a7a:	f023 0304 	bic.w	r3, r3, #4
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	72fb      	strb	r3, [r7, #11]
		LCD_2x16_Send_I2C(data);
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 ff54 	bl	8001934 <LCD_2x16_Send_I2C>
	}
	if (linea == 2){
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d122      	bne.n	8000ad8 <LCD_2x16_cursor+0xc8>
		dir = L2_COL1 + (pos - 1);
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	3b41      	subs	r3, #65	; 0x41
 8000a96:	73fb      	strb	r3, [r7, #15]
		dir_h = (dir)& 0xF0;
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	f023 030f 	bic.w	r3, r3, #15
 8000a9e:	73bb      	strb	r3, [r7, #14]
		dir_l = ((dir)& 0x0F) << 4;
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	737b      	strb	r3, [r7, #13]
		data[0] = ((dir_h | EN_ON) | BL_ON);
 8000aa6:	7bbb      	ldrb	r3, [r7, #14]
 8000aa8:	f043 030c 	orr.w	r3, r3, #12
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	723b      	strb	r3, [r7, #8]
		data[1] = (data[0]) & ~EN_ON;
 8000ab0:	7a3b      	ldrb	r3, [r7, #8]
 8000ab2:	f023 0304 	bic.w	r3, r3, #4
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	727b      	strb	r3, [r7, #9]
		data[2] = dir_l | EN_ON | BL_ON;
 8000aba:	7b7b      	ldrb	r3, [r7, #13]
 8000abc:	f043 030c 	orr.w	r3, r3, #12
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	72bb      	strb	r3, [r7, #10]
		data[3] = (data[2]) & ~EN_ON;
 8000ac4:	7abb      	ldrb	r3, [r7, #10]
 8000ac6:	f023 0304 	bic.w	r3, r3, #4
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	72fb      	strb	r3, [r7, #11]
		LCD_2x16_Send_I2C(data);
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 ff2e 	bl	8001934 <LCD_2x16_Send_I2C>
	}
	return OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <LCD_2x16_string>:
LCD_Status_t LCD_2x16_string(char * str){
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	while (*str){
 8000aea:	e006      	b.n	8000afa <LCD_2x16_string+0x18>
		LCD_2x16_char(*str++);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff15 	bl	8000924 <LCD_2x16_char>
	while (*str){
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1f4      	bne.n	8000aec <LCD_2x16_string+0xa>
	}
	return OK;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <LDC_2x16_clear>:
LCD_Status_t LDC_2x16_clear(void){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	LCD_2x16_cursor(1, 1);
 8000b10:	2101      	movs	r1, #1
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff ff7c 	bl	8000a10 <LCD_2x16_cursor>
	LCD_2x16_string("                ");
 8000b18:	4806      	ldr	r0, [pc, #24]	; (8000b34 <LDC_2x16_clear+0x28>)
 8000b1a:	f7ff ffe2 	bl	8000ae2 <LCD_2x16_string>
	LCD_2x16_cursor(2, 1);
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2002      	movs	r0, #2
 8000b22:	f7ff ff75 	bl	8000a10 <LCD_2x16_cursor>
	LCD_2x16_string("                ");
 8000b26:	4803      	ldr	r0, [pc, #12]	; (8000b34 <LDC_2x16_clear+0x28>)
 8000b28:	f7ff ffdb 	bl	8000ae2 <LCD_2x16_string>
	return OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	08004fb0 	.word	0x08004fb0

08000b38 <LCD_2x16_uint16>:
LCD_Status_t LCD_2x16_cursorBlink(){
	LCD_2x16_command(DISPLAY_CURSOR_BLINK);
	return OK;
}
LCD_Status_t LCD_2x16_uint16(uint16_t valor){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
	if(valor<0 || valor>65536){
		return NO_OK;
	}
	char valor2[3];
	sprintf(valor2, "%d",valor);
 8000b42:	88fa      	ldrh	r2, [r7, #6]
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4906      	ldr	r1, [pc, #24]	; (8000b64 <LCD_2x16_uint16+0x2c>)
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 fd80 	bl	8004650 <siprintf>
	LCD_2x16_string(valor2);
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ffc4 	bl	8000ae2 <LCD_2x16_string>
	return OK;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	08004fc4 	.word	0x08004fc4

08000b68 <LCD_printEstable>:

/*******************************************************************************************
 *                             Funciones Privadas Necesarias                               *
 *******************************************************************************************/
/*funciones para imprimir en el LCD*/
static void LCD_printEstable(){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	LDC_2x16_clear();
 8000b6c:	f7ff ffce 	bl	8000b0c <LDC_2x16_clear>
	LCD_2x16_cursor(1, 1);
 8000b70:	2101      	movs	r1, #1
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff ff4c 	bl	8000a10 <LCD_2x16_cursor>
	LCD_2x16_string("Estado:  Estable");
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <LCD_printEstable+0x28>)
 8000b7a:	f7ff ffb2 	bl	8000ae2 <LCD_2x16_string>
	LCD_2x16_cursor(2, 1);
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2002      	movs	r0, #2
 8000b82:	f7ff ff45 	bl	8000a10 <LCD_2x16_cursor>
	LCD_2x16_string("Temperatura:");
 8000b86:	4803      	ldr	r0, [pc, #12]	; (8000b94 <LCD_printEstable+0x2c>)
 8000b88:	f7ff ffab 	bl	8000ae2 <LCD_2x16_string>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	08004fc8 	.word	0x08004fc8
 8000b94:	08004fdc 	.word	0x08004fdc

08000b98 <LCD_printPrecaucion>:

static void LCD_printPrecaucion(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	LDC_2x16_clear();
 8000b9c:	f7ff ffb6 	bl	8000b0c <LDC_2x16_clear>
	LCD_2x16_cursor(1, 1);
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f7ff ff34 	bl	8000a10 <LCD_2x16_cursor>
	LCD_2x16_string("Estado: Precauc.");
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <LCD_printPrecaucion+0x28>)
 8000baa:	f7ff ff9a 	bl	8000ae2 <LCD_2x16_string>
	LCD_2x16_cursor(2, 1);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f7ff ff2d 	bl	8000a10 <LCD_2x16_cursor>
	LCD_2x16_string("Temperatura:");
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <LCD_printPrecaucion+0x2c>)
 8000bb8:	f7ff ff93 	bl	8000ae2 <LCD_2x16_string>

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	08004fec 	.word	0x08004fec
 8000bc4:	08004fdc 	.word	0x08004fdc

08000bc8 <LCD_printPeligro>:

static void LCD_printPeligro(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	LDC_2x16_clear();
 8000bcc:	f7ff ff9e 	bl	8000b0c <LDC_2x16_clear>
	LCD_2x16_cursor(1, 1);
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff ff1c 	bl	8000a10 <LCD_2x16_cursor>
	LCD_2x16_string("Estado: Peligro");
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <LCD_printPeligro+0x28>)
 8000bda:	f7ff ff82 	bl	8000ae2 <LCD_2x16_string>
	LCD_2x16_cursor(2, 1);
 8000bde:	2101      	movs	r1, #1
 8000be0:	2002      	movs	r0, #2
 8000be2:	f7ff ff15 	bl	8000a10 <LCD_2x16_cursor>
	LCD_2x16_string("Temperatura:");
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <LCD_printPeligro+0x2c>)
 8000be8:	f7ff ff7b 	bl	8000ae2 <LCD_2x16_string>

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	08005000 	.word	0x08005000
 8000bf4:	08004fdc 	.word	0x08004fdc

08000bf8 <LDC_printTemp>:

static void LDC_printTemp(uint16_t temp){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80fb      	strh	r3, [r7, #6]
	if(delayRead(&delayLCDtemp)){
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <LDC_printTemp+0x3c>)
 8000c04:	f7ff fe2d 	bl	8000862 <delayRead>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00d      	beq.n	8000c2a <LDC_printTemp+0x32>
		LCD_2x16_cursor(2, 14);
 8000c0e:	210e      	movs	r1, #14
 8000c10:	2002      	movs	r0, #2
 8000c12:	f7ff fefd 	bl	8000a10 <LCD_2x16_cursor>
		LCD_2x16_uint16(temp);
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff8d 	bl	8000b38 <LCD_2x16_uint16>
		delayWrite(&delayLCDtemp, duracion);
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <LDC_printTemp+0x40>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <LDC_printTemp+0x3c>)
 8000c26:	f7ff fe3f 	bl	80008a8 <delayWrite>
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000008c 	.word	0x2000008c
 8000c38:	20000004 	.word	0x20000004

08000c3c <UART_printEstable>:


/*funciones para Reportar Informacion por UART*/
static void UART_printEstable(uint16_t temp){
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b098      	sub	sp, #96	; 0x60
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	80fb      	strh	r3, [r7, #6]
	uint8_t text1[27] = "\n\r**********************\n\r";
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <UART_printEstable+0x94>)
 8000c48:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000c4c:	461d      	mov	r5, r3
 8000c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c56:	c403      	stmia	r4!, {r0, r1}
 8000c58:	8022      	strh	r2, [r4, #0]
 8000c5a:	3402      	adds	r4, #2
 8000c5c:	0c13      	lsrs	r3, r2, #16
 8000c5e:	7023      	strb	r3, [r4, #0]
	uint8_t text2[27] = "Estado: Estable\n\r";
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <UART_printEstable+0x98>)
 8000c62:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000c66:	461d      	mov	r5, r3
 8000c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6c:	682b      	ldr	r3, [r5, #0]
 8000c6e:	8023      	strh	r3, [r4, #0]
 8000c70:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	721a      	strb	r2, [r3, #8]
	uint8_t text3[27] = "Temperatura:   ";
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <UART_printEstable+0x9c>)
 8000c7e:	f107 040c 	add.w	r4, r7, #12
 8000c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	f8c3 2007 	str.w	r2, [r3, #7]
	UART_transmit(text1);
 8000c96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fece 	bl	8001a3c <UART_transmit>
	UART_transmit(text2);
 8000ca0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fec9 	bl	8001a3c <UART_transmit>
	UART_transmit(text3);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fec4 	bl	8001a3c <UART_transmit>
	UART_transmit_uint16(temp);
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fed6 	bl	8001a68 <UART_transmit_uint16>
	delayWrite(&delayUARTtemp, duracion1);
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <UART_printEstable+0xa0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <UART_printEstable+0xa4>)
 8000cc4:	f7ff fdf0 	bl	80008a8 <delayWrite>
}
 8000cc8:	bf00      	nop
 8000cca:	3760      	adds	r7, #96	; 0x60
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd0:	08005010 	.word	0x08005010
 8000cd4:	0800502c 	.word	0x0800502c
 8000cd8:	08005048 	.word	0x08005048
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000098 	.word	0x20000098

08000ce4 <UART_printPrecaucion>:

static void UART_printPrecaucion(uint16_t temp){
 8000ce4:	b5b0      	push	{r4, r5, r7, lr}
 8000ce6:	b098      	sub	sp, #96	; 0x60
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
	uint8_t text1[27] = "\n\r**********************\n\r";
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <UART_printPrecaucion+0x98>)
 8000cf0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000cf4:	461d      	mov	r5, r3
 8000cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cfe:	c403      	stmia	r4!, {r0, r1}
 8000d00:	8022      	strh	r2, [r4, #0]
 8000d02:	3402      	adds	r4, #2
 8000d04:	0c13      	lsrs	r3, r2, #16
 8000d06:	7023      	strb	r3, [r4, #0]
	uint8_t text2[27] = "Estado: Precaucion\n\r";
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <UART_printPrecaucion+0x9c>)
 8000d0a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000d0e:	461d      	mov	r5, r3
 8000d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d18:	6020      	str	r0, [r4, #0]
 8000d1a:	3404      	adds	r4, #4
 8000d1c:	7021      	strb	r1, [r4, #0]
 8000d1e:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	809a      	strh	r2, [r3, #4]
	uint8_t text3[27] = "Temperatura:   ";
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <UART_printPrecaucion+0xa0>)
 8000d2a:	f107 040c 	add.w	r4, r7, #12
 8000d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	f8c3 2007 	str.w	r2, [r3, #7]
	UART_transmit(text1);
 8000d42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fe78 	bl	8001a3c <UART_transmit>
	UART_transmit(text2);
 8000d4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fe73 	bl	8001a3c <UART_transmit>
	UART_transmit(text3);
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fe6e 	bl	8001a3c <UART_transmit>
	UART_transmit_uint16(temp);
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fe80 	bl	8001a68 <UART_transmit_uint16>
	delayWrite(&delayUARTtemp, duracion1);
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <UART_printPrecaucion+0xa4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4807      	ldr	r0, [pc, #28]	; (8000d8c <UART_printPrecaucion+0xa8>)
 8000d70:	f7ff fd9a 	bl	80008a8 <delayWrite>
}
 8000d74:	bf00      	nop
 8000d76:	3760      	adds	r7, #96	; 0x60
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d7c:	08005010 	.word	0x08005010
 8000d80:	08005064 	.word	0x08005064
 8000d84:	08005048 	.word	0x08005048
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000098 	.word	0x20000098

08000d90 <UART_printPeligro>:

static void UART_printPeligro(uint16_t temp){
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b098      	sub	sp, #96	; 0x60
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	uint8_t text1[27] = "\n\r**********************\n\r";
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <UART_printPeligro+0x94>)
 8000d9c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000da0:	461d      	mov	r5, r3
 8000da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000daa:	c403      	stmia	r4!, {r0, r1}
 8000dac:	8022      	strh	r2, [r4, #0]
 8000dae:	3402      	adds	r4, #2
 8000db0:	0c13      	lsrs	r3, r2, #16
 8000db2:	7023      	strb	r3, [r4, #0]
	uint8_t text2[27] = "Estado: Peligro\n\r";
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <UART_printPeligro+0x98>)
 8000db6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000dba:	461d      	mov	r5, r3
 8000dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc0:	682b      	ldr	r3, [r5, #0]
 8000dc2:	8023      	strh	r3, [r4, #0]
 8000dc4:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	721a      	strb	r2, [r3, #8]
	uint8_t text3[27] = "Temperatura:   ";
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <UART_printPeligro+0x9c>)
 8000dd2:	f107 040c 	add.w	r4, r7, #12
 8000dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	f8c3 2007 	str.w	r2, [r3, #7]
	UART_transmit(text1);
 8000dea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fe24 	bl	8001a3c <UART_transmit>
	UART_transmit(text2);
 8000df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fe1f 	bl	8001a3c <UART_transmit>
	UART_transmit(text3);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fe1a 	bl	8001a3c <UART_transmit>
	UART_transmit_uint16(temp);
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fe2c 	bl	8001a68 <UART_transmit_uint16>
	delayWrite(&delayUARTtemp, duracion1);
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <UART_printPeligro+0xa0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	4807      	ldr	r0, [pc, #28]	; (8000e34 <UART_printPeligro+0xa4>)
 8000e18:	f7ff fd46 	bl	80008a8 <delayWrite>
}
 8000e1c:	bf00      	nop
 8000e1e:	3760      	adds	r7, #96	; 0x60
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bdb0      	pop	{r4, r5, r7, pc}
 8000e24:	08005010 	.word	0x08005010
 8000e28:	08005080 	.word	0x08005080
 8000e2c:	08005048 	.word	0x08005048
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000098 	.word	0x20000098

08000e38 <MEF_init>:

/*******************************************************************************************
 *                               Definicion de las funciones                               *
 *******************************************************************************************/
/* Inicializa la MEF*/
void MEF_init(){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	delayInit(&delayLCDtemp, duracion);
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <MEF_init+0x28>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	4808      	ldr	r0, [pc, #32]	; (8000e64 <MEF_init+0x2c>)
 8000e44:	f7ff fcf9 	bl	800083a <delayInit>
	delayInit(&delayUARTtemp, duracion1);
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <MEF_init+0x30>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4807      	ldr	r0, [pc, #28]	; (8000e6c <MEF_init+0x34>)
 8000e50:	f7ff fcf3 	bl	800083a <delayInit>
	MEF = ESTABLE;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MEF_init+0x38>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000004 	.word	0x20000004
 8000e64:	2000008c 	.word	0x2000008c
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000098 	.word	0x20000098
 8000e70:	20000084 	.word	0x20000084

08000e74 <MEF_update>:

/* Actualiza la MEF */
void MEF_update(){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	LDC_printTemp(temp);
 8000e78:	4b74      	ldr	r3, [pc, #464]	; (800104c <MEF_update+0x1d8>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff febb 	bl	8000bf8 <LDC_printTemp>
	switch(MEF){
 8000e82:	4b73      	ldr	r3, [pc, #460]	; (8001050 <MEF_update+0x1dc>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	f000 8093 	beq.w	8000fb2 <MEF_update+0x13e>
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	f300 80da 	bgt.w	8001046 <MEF_update+0x1d2>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <MEF_update+0x28>
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d046      	beq.n	8000f28 <MEF_update+0xb4>
				MEF_fanOn();
				MEF_alarmOff();
			}
		break;
	}
}
 8000e9a:	e0d4      	b.n	8001046 <MEF_update+0x1d2>
			temp = SENSOR_TEMP_check();
 8000e9c:	f000 f918 	bl	80010d0 <SENSOR_TEMP_check>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b69      	ldr	r3, [pc, #420]	; (800104c <MEF_update+0x1d8>)
 8000ea6:	801a      	strh	r2, [r3, #0]
			if (temp <= T1) {
 8000ea8:	4b68      	ldr	r3, [pc, #416]	; (800104c <MEF_update+0x1d8>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	2b1e      	cmp	r3, #30
 8000eae:	d80f      	bhi.n	8000ed0 <MEF_update+0x5c>
				if(flag1 == 0){
 8000eb0:	4b68      	ldr	r3, [pc, #416]	; (8001054 <MEF_update+0x1e0>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d008      	beq.n	8000ed0 <MEF_update+0x5c>
					flag1 = 1;
 8000ebe:	4b65      	ldr	r3, [pc, #404]	; (8001054 <MEF_update+0x1e0>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
					LCD_printEstable();
 8000ec4:	f7ff fe50 	bl	8000b68 <LCD_printEstable>
					MEF_fanOff();
 8000ec8:	f000 fc3e 	bl	8001748 <MEF_fanOff>
					MEF_alarmOff();
 8000ecc:	f000 fc54 	bl	8001778 <MEF_alarmOff>
			if(temp>T1 && temp<=T2){
 8000ed0:	4b5e      	ldr	r3, [pc, #376]	; (800104c <MEF_update+0x1d8>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	2b1e      	cmp	r3, #30
 8000ed6:	d912      	bls.n	8000efe <MEF_update+0x8a>
 8000ed8:	4b5c      	ldr	r3, [pc, #368]	; (800104c <MEF_update+0x1d8>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	2b5a      	cmp	r3, #90	; 0x5a
 8000ede:	d80e      	bhi.n	8000efe <MEF_update+0x8a>
				MEF = PRECAUCION;
 8000ee0:	4b5b      	ldr	r3, [pc, #364]	; (8001050 <MEF_update+0x1dc>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
				flag1 = 0;
 8000ee6:	4b5b      	ldr	r3, [pc, #364]	; (8001054 <MEF_update+0x1e0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
				flag2 = 1;
 8000eec:	4b5a      	ldr	r3, [pc, #360]	; (8001058 <MEF_update+0x1e4>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
				LCD_printPrecaucion();
 8000ef2:	f7ff fe51 	bl	8000b98 <LCD_printPrecaucion>
				MEF_fanOn();
 8000ef6:	f000 fc33 	bl	8001760 <MEF_fanOn>
				MEF_alarmOff();
 8000efa:	f000 fc3d 	bl	8001778 <MEF_alarmOff>
			if(temp>T2){
 8000efe:	4b53      	ldr	r3, [pc, #332]	; (800104c <MEF_update+0x1d8>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	2b5a      	cmp	r3, #90	; 0x5a
 8000f04:	f240 809a 	bls.w	800103c <MEF_update+0x1c8>
				MEF = PELIGRO;
 8000f08:	4b51      	ldr	r3, [pc, #324]	; (8001050 <MEF_update+0x1dc>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	701a      	strb	r2, [r3, #0]
				flag1 = 0;
 8000f0e:	4b51      	ldr	r3, [pc, #324]	; (8001054 <MEF_update+0x1e0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
				flag3 = 1;
 8000f14:	4b51      	ldr	r3, [pc, #324]	; (800105c <MEF_update+0x1e8>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
				LCD_printPeligro();
 8000f1a:	f7ff fe55 	bl	8000bc8 <LCD_printPeligro>
				MEF_fanOn();
 8000f1e:	f000 fc1f 	bl	8001760 <MEF_fanOn>
				MEF_alarmOn();
 8000f22:	f000 fc35 	bl	8001790 <MEF_alarmOn>
		break;
 8000f26:	e089      	b.n	800103c <MEF_update+0x1c8>
			temp = SENSOR_TEMP_check();
 8000f28:	f000 f8d2 	bl	80010d0 <SENSOR_TEMP_check>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b46      	ldr	r3, [pc, #280]	; (800104c <MEF_update+0x1d8>)
 8000f32:	801a      	strh	r2, [r3, #0]
			if (temp > T1 && temp <= T2) {
 8000f34:	4b45      	ldr	r3, [pc, #276]	; (800104c <MEF_update+0x1d8>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	2b1e      	cmp	r3, #30
 8000f3a:	d913      	bls.n	8000f64 <MEF_update+0xf0>
 8000f3c:	4b43      	ldr	r3, [pc, #268]	; (800104c <MEF_update+0x1d8>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	2b5a      	cmp	r3, #90	; 0x5a
 8000f42:	d80f      	bhi.n	8000f64 <MEF_update+0xf0>
				if(flag2 == 0){
 8000f44:	4b44      	ldr	r3, [pc, #272]	; (8001058 <MEF_update+0x1e4>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	f083 0301 	eor.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d008      	beq.n	8000f64 <MEF_update+0xf0>
					flag2 = 1;
 8000f52:	4b41      	ldr	r3, [pc, #260]	; (8001058 <MEF_update+0x1e4>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
					LCD_printPrecaucion();
 8000f58:	f7ff fe1e 	bl	8000b98 <LCD_printPrecaucion>
					MEF_fanOn();
 8000f5c:	f000 fc00 	bl	8001760 <MEF_fanOn>
					MEF_alarmOff();
 8000f60:	f000 fc0a 	bl	8001778 <MEF_alarmOff>
			if(temp <= T1){
 8000f64:	4b39      	ldr	r3, [pc, #228]	; (800104c <MEF_update+0x1d8>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	2b1e      	cmp	r3, #30
 8000f6a:	d80e      	bhi.n	8000f8a <MEF_update+0x116>
				MEF = ESTABLE;
 8000f6c:	4b38      	ldr	r3, [pc, #224]	; (8001050 <MEF_update+0x1dc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
				flag2 = 0;
 8000f72:	4b39      	ldr	r3, [pc, #228]	; (8001058 <MEF_update+0x1e4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
				flag1 = 1;
 8000f78:	4b36      	ldr	r3, [pc, #216]	; (8001054 <MEF_update+0x1e0>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
				LCD_printEstable();
 8000f7e:	f7ff fdf3 	bl	8000b68 <LCD_printEstable>
				MEF_fanOff();
 8000f82:	f000 fbe1 	bl	8001748 <MEF_fanOff>
				MEF_alarmOff();
 8000f86:	f000 fbf7 	bl	8001778 <MEF_alarmOff>
			if(temp > T2){
 8000f8a:	4b30      	ldr	r3, [pc, #192]	; (800104c <MEF_update+0x1d8>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	2b5a      	cmp	r3, #90	; 0x5a
 8000f90:	d956      	bls.n	8001040 <MEF_update+0x1cc>
				MEF = PELIGRO;
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <MEF_update+0x1dc>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	701a      	strb	r2, [r3, #0]
				flag2 = 0;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <MEF_update+0x1e4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
				flag3 = 1;
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <MEF_update+0x1e8>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
				LCD_printPeligro();
 8000fa4:	f7ff fe10 	bl	8000bc8 <LCD_printPeligro>
				MEF_fanOn();
 8000fa8:	f000 fbda 	bl	8001760 <MEF_fanOn>
				MEF_alarmOn();
 8000fac:	f000 fbf0 	bl	8001790 <MEF_alarmOn>
		break;
 8000fb0:	e046      	b.n	8001040 <MEF_update+0x1cc>
			temp = SENSOR_TEMP_check();
 8000fb2:	f000 f88d 	bl	80010d0 <SENSOR_TEMP_check>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <MEF_update+0x1d8>)
 8000fbc:	801a      	strh	r2, [r3, #0]
			if (temp > T2) {
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <MEF_update+0x1d8>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	2b5a      	cmp	r3, #90	; 0x5a
 8000fc4:	d90f      	bls.n	8000fe6 <MEF_update+0x172>
				if(flag3 == 0){
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <MEF_update+0x1e8>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f083 0301 	eor.w	r3, r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d008      	beq.n	8000fe6 <MEF_update+0x172>
					flag3 = 1;
 8000fd4:	4b21      	ldr	r3, [pc, #132]	; (800105c <MEF_update+0x1e8>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
					LCD_printPeligro();
 8000fda:	f7ff fdf5 	bl	8000bc8 <LCD_printPeligro>
					MEF_fanOn();
 8000fde:	f000 fbbf 	bl	8001760 <MEF_fanOn>
					MEF_alarmOn();
 8000fe2:	f000 fbd5 	bl	8001790 <MEF_alarmOn>
			if(temp <= T1){
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <MEF_update+0x1d8>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	2b1e      	cmp	r3, #30
 8000fec:	d80e      	bhi.n	800100c <MEF_update+0x198>
				MEF = ESTABLE;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MEF_update+0x1dc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
				flag3 = 0;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <MEF_update+0x1e8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
				flag1 = 1;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MEF_update+0x1e0>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
				LCD_printEstable();
 8001000:	f7ff fdb2 	bl	8000b68 <LCD_printEstable>
				MEF_fanOff();
 8001004:	f000 fba0 	bl	8001748 <MEF_fanOff>
				MEF_alarmOff();
 8001008:	f000 fbb6 	bl	8001778 <MEF_alarmOff>
			if(temp>T1 && temp<=T2){
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MEF_update+0x1d8>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	2b1e      	cmp	r3, #30
 8001012:	d917      	bls.n	8001044 <MEF_update+0x1d0>
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <MEF_update+0x1d8>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	2b5a      	cmp	r3, #90	; 0x5a
 800101a:	d813      	bhi.n	8001044 <MEF_update+0x1d0>
				MEF = PRECAUCION;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MEF_update+0x1dc>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
				flag3 = 0;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MEF_update+0x1e8>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
				flag2 = 1;
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MEF_update+0x1e4>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
				LCD_printPrecaucion();
 800102e:	f7ff fdb3 	bl	8000b98 <LCD_printPrecaucion>
				MEF_fanOn();
 8001032:	f000 fb95 	bl	8001760 <MEF_fanOn>
				MEF_alarmOff();
 8001036:	f000 fb9f 	bl	8001778 <MEF_alarmOff>
		break;
 800103a:	e003      	b.n	8001044 <MEF_update+0x1d0>
		break;
 800103c:	bf00      	nop
 800103e:	e002      	b.n	8001046 <MEF_update+0x1d2>
		break;
 8001040:	bf00      	nop
 8001042:	e000      	b.n	8001046 <MEF_update+0x1d2>
		break;
 8001044:	bf00      	nop
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000088 	.word	0x20000088
 8001050:	20000084 	.word	0x20000084
 8001054:	20000085 	.word	0x20000085
 8001058:	20000086 	.word	0x20000086
 800105c:	20000087 	.word	0x20000087

08001060 <MEF_uartUpdate>:

void MEF_uartUpdate(){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	if(delayRead(&delayUARTtemp)){
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <MEF_uartUpdate+0x50>)
 8001066:	f7ff fbfc 	bl	8000862 <delayRead>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d01c      	beq.n	80010aa <MEF_uartUpdate+0x4a>
		switch(MEF){
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <MEF_uartUpdate+0x54>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d012      	beq.n	800109e <MEF_uartUpdate+0x3e>
 8001078:	2b02      	cmp	r3, #2
 800107a:	dc16      	bgt.n	80010aa <MEF_uartUpdate+0x4a>
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <MEF_uartUpdate+0x26>
 8001080:	2b01      	cmp	r3, #1
 8001082:	d006      	beq.n	8001092 <MEF_uartUpdate+0x32>
		case PELIGRO:
			UART_printPeligro(temp);
		break;
		}
	}
}
 8001084:	e011      	b.n	80010aa <MEF_uartUpdate+0x4a>
			UART_printEstable(temp);
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MEF_uartUpdate+0x58>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fdd6 	bl	8000c3c <UART_printEstable>
		break;
 8001090:	e00b      	b.n	80010aa <MEF_uartUpdate+0x4a>
			UART_printPrecaucion(temp);
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MEF_uartUpdate+0x58>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fe24 	bl	8000ce4 <UART_printPrecaucion>
		break;
 800109c:	e005      	b.n	80010aa <MEF_uartUpdate+0x4a>
			UART_printPeligro(temp);
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MEF_uartUpdate+0x58>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fe74 	bl	8000d90 <UART_printPeligro>
		break;
 80010a8:	bf00      	nop
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000098 	.word	0x20000098
 80010b4:	20000084 	.word	0x20000084
 80010b8:	20000088 	.word	0x20000088

080010bc <SENSOR_TEMP_init>:


/*******************************************************************************************
 *                               Definicion de las funciones                               *
 *******************************************************************************************/
void SENSOR_TEMP_init(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <SENSOR_TEMP_init+0x10>)
 80010c2:	f000 fdc7 	bl	8001c54 <HAL_ADC_Start>
};
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000a4 	.word	0x200000a4

080010d0 <SENSOR_TEMP_check>:

uint16_t SENSOR_TEMP_check(void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
	uint16_t tempADC = ADC_getValue();
 80010d6:	f000 f8ed 	bl	80012b4 <ADC_getValue>
 80010da:	4603      	mov	r3, r0
 80010dc:	82fb      	strh	r3, [r7, #22]
	float con = ((float)diff)/4095;
 80010de:	eddf 7a15 	vldr	s15, [pc, #84]	; 8001134 <SENSOR_TEMP_check+0x64>
 80010e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001138 <SENSOR_TEMP_check+0x68>
 80010ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ee:	edc7 7a04 	vstr	s15, [r7, #16]
	float te = (con * (float)tempADC);
 80010f2:	8afb      	ldrh	r3, [r7, #22]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001104:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t temp = te + Tmin;
 8001108:	2314      	movs	r3, #20
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001112:	edd7 7a03 	vldr	s15, [r7, #12]
 8001116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001122:	793b      	ldrb	r3, [r7, #4]
 8001124:	72fb      	strb	r3, [r7, #11]
	return temp;
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	b29b      	uxth	r3, r3
};
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	00000082 	.word	0x00000082
 8001138:	457ff000 	.word	0x457ff000

0800113c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2220      	movs	r2, #32
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f003 fa9a 	bl	8004690 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800115c:	4b2f      	ldr	r3, [pc, #188]	; (800121c <MX_ADC1_Init+0xe0>)
 800115e:	4a30      	ldr	r2, [pc, #192]	; (8001220 <MX_ADC1_Init+0xe4>)
 8001160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <MX_ADC1_Init+0xe0>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001168:	4b2c      	ldr	r3, [pc, #176]	; (800121c <MX_ADC1_Init+0xe0>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <MX_ADC1_Init+0xe0>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <MX_ADC1_Init+0xe0>)
 8001176:	2201      	movs	r2, #1
 8001178:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <MX_ADC1_Init+0xe0>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <MX_ADC1_Init+0xe0>)
 8001184:	2200      	movs	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <MX_ADC1_Init+0xe0>)
 800118a:	4a26      	ldr	r2, [pc, #152]	; (8001224 <MX_ADC1_Init+0xe8>)
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <MX_ADC1_Init+0xe0>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <MX_ADC1_Init+0xe0>)
 8001196:	2201      	movs	r2, #1
 8001198:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <MX_ADC1_Init+0xe0>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <MX_ADC1_Init+0xe0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a8:	481c      	ldr	r0, [pc, #112]	; (800121c <MX_ADC1_Init+0xe0>)
 80011aa:	f000 fd0f 	bl	8001bcc <HAL_ADC_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80011b4:	f7ff fa78 	bl	80006a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011b8:	2305      	movs	r3, #5
 80011ba:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c4:	f107 0320 	add.w	r3, r7, #32
 80011c8:	4619      	mov	r1, r3
 80011ca:	4814      	ldr	r0, [pc, #80]	; (800121c <MX_ADC1_Init+0xe0>)
 80011cc:	f000 feac 	bl	8001f28 <HAL_ADC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80011d6:	f7ff fa67 	bl	80006a8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 80011da:	2305      	movs	r3, #5
 80011dc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_ADC1_Init+0xec>)
 80011f0:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <MX_ADC1_Init+0xe0>)
 8001204:	f001 f8be 	bl	8002384 <HAL_ADCEx_InjectedConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800120e:	f7ff fa4b 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3730      	adds	r7, #48	; 0x30
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000a4 	.word	0x200000a4
 8001220:	40012000 	.word	0x40012000
 8001224:	0f000001 	.word	0x0f000001
 8001228:	000f0001 	.word	0x000f0001

0800122c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_ADC_MspInit+0x7c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d127      	bne.n	800129e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <HAL_ADC_MspInit+0x80>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <HAL_ADC_MspInit+0x80>)
 8001258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <HAL_ADC_MspInit+0x80>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_ADC_MspInit+0x80>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <HAL_ADC_MspInit+0x80>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <HAL_ADC_MspInit+0x80>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001286:	2320      	movs	r3, #32
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128a:	2303      	movs	r3, #3
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_ADC_MspInit+0x84>)
 800129a:	f001 faf3 	bl	8002884 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40012000 	.word	0x40012000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <ADC_getValue>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint16_t ADC_getValue(){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1, 100);
 80012ba:	2164      	movs	r1, #100	; 0x64
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <ADC_getValue+0x24>)
 80012be:	f000 fd9b 	bl	8001df8 <HAL_ADC_PollForConversion>
	uint16_t tempADC = HAL_ADC_GetValue(&hadc1);
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <ADC_getValue+0x24>)
 80012c4:	f000 fe23 	bl	8001f0e <HAL_ADC_GetValue>
 80012c8:	4603      	mov	r3, r0
 80012ca:	80fb      	strh	r3, [r7, #6]
	return tempADC;
 80012cc:	88fb      	ldrh	r3, [r7, #6]
};
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000a4 	.word	0x200000a4

080012dc <MX_GPIO_Init>:
     PB9   ------> LTDC_B7
     PE0   ------> FMC_NBL0
     PE1   ------> FMC_NBL1
*/
void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	; 0x38
 80012e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
 80012f6:	4bb2      	ldr	r3, [pc, #712]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4ab1      	ldr	r2, [pc, #708]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4baf      	ldr	r3, [pc, #700]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	623b      	str	r3, [r7, #32]
 800130c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	4bab      	ldr	r3, [pc, #684]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4aaa      	ldr	r2, [pc, #680]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001318:	f043 0320 	orr.w	r3, r3, #32
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4ba8      	ldr	r3, [pc, #672]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	4ba4      	ldr	r3, [pc, #656]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4aa3      	ldr	r2, [pc, #652]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4ba1      	ldr	r3, [pc, #644]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	4b9d      	ldr	r3, [pc, #628]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a9c      	ldr	r2, [pc, #624]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b9a      	ldr	r3, [pc, #616]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b96      	ldr	r3, [pc, #600]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a95      	ldr	r2, [pc, #596]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b93      	ldr	r3, [pc, #588]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b8f      	ldr	r3, [pc, #572]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a8e      	ldr	r2, [pc, #568]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b8c      	ldr	r3, [pc, #560]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a87      	ldr	r2, [pc, #540]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b81      	ldr	r3, [pc, #516]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a80      	ldr	r2, [pc, #512]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b7e      	ldr	r3, [pc, #504]	; (80015c0 <MX_GPIO_Init+0x2e4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2116      	movs	r1, #22
 80013d6:	487b      	ldr	r0, [pc, #492]	; (80015c4 <MX_GPIO_Init+0x2e8>)
 80013d8:	f001 fc00 	bl	8002bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	4879      	ldr	r0, [pc, #484]	; (80015c8 <MX_GPIO_Init+0x2ec>)
 80013e2:	f001 fbfb 	bl	8002bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80013ec:	4877      	ldr	r0, [pc, #476]	; (80015cc <MX_GPIO_Init+0x2f0>)
 80013ee:	f001 fbf5 	bl	8002bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80013f8:	4875      	ldr	r0, [pc, #468]	; (80015d0 <MX_GPIO_Init+0x2f4>)
 80013fa:	f001 fbef 	bl	8002bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80013fe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001410:	230c      	movs	r3, #12
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	486e      	ldr	r0, [pc, #440]	; (80015d4 <MX_GPIO_Init+0x2f8>)
 800141c:	f001 fa32 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001420:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001432:	2305      	movs	r3, #5
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	4619      	mov	r1, r3
 800143c:	4865      	ldr	r0, [pc, #404]	; (80015d4 <MX_GPIO_Init+0x2f8>)
 800143e:	f001 fa21 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001454:	230e      	movs	r3, #14
 8001456:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145c:	4619      	mov	r1, r3
 800145e:	485d      	ldr	r0, [pc, #372]	; (80015d4 <MX_GPIO_Init+0x2f8>)
 8001460:	f001 fa10 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001464:	2301      	movs	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001474:	230c      	movs	r3, #12
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4851      	ldr	r0, [pc, #324]	; (80015c4 <MX_GPIO_Init+0x2e8>)
 8001480:	f001 fa00 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001484:	2316      	movs	r3, #22
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	484a      	ldr	r0, [pc, #296]	; (80015c4 <MX_GPIO_Init+0x2e8>)
 800149c:	f001 f9f2 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80014a0:	f248 0307 	movw	r3, #32775	; 0x8007
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	4619      	mov	r1, r3
 80014b6:	4844      	ldr	r0, [pc, #272]	; (80015c8 <MX_GPIO_Init+0x2ec>)
 80014b8:	f001 f9e4 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80014bc:	f641 0358 	movw	r3, #6232	; 0x1858
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014ce:	230e      	movs	r3, #14
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	483b      	ldr	r0, [pc, #236]	; (80015c8 <MX_GPIO_Init+0x2ec>)
 80014da:	f001 f9d3 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	4619      	mov	r1, r3
 80014f4:	4834      	ldr	r0, [pc, #208]	; (80015c8 <MX_GPIO_Init+0x2ec>)
 80014f6:	f001 f9c5 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80014fa:	2320      	movs	r3, #32
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	482d      	ldr	r0, [pc, #180]	; (80015c4 <MX_GPIO_Init+0x2e8>)
 8001510:	f001 f9b8 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001514:	2303      	movs	r3, #3
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001524:	2309      	movs	r3, #9
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	482a      	ldr	r0, [pc, #168]	; (80015d8 <MX_GPIO_Init+0x2fc>)
 8001530:	f001 f9a8 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001534:	2304      	movs	r3, #4
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	4824      	ldr	r0, [pc, #144]	; (80015d8 <MX_GPIO_Init+0x2fc>)
 8001548:	f001 f99c 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800154c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800155e:	230c      	movs	r3, #12
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	4819      	ldr	r0, [pc, #100]	; (80015d0 <MX_GPIO_Init+0x2f4>)
 800156a:	f001 f98b 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800156e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001580:	230c      	movs	r3, #12
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <MX_GPIO_Init+0x300>)
 800158c:	f001 f97a 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001590:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015a2:	230e      	movs	r3, #14
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	480a      	ldr	r0, [pc, #40]	; (80015d8 <MX_GPIO_Init+0x2fc>)
 80015ae:	f001 f969 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80015b2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80015bc:	e010      	b.n	80015e0 <MX_GPIO_Init+0x304>
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021800 	.word	0x40021800
 80015d4:	40021400 	.word	0x40021400
 80015d8:	40020400 	.word	0x40020400
 80015dc:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80015e8:	230c      	movs	r3, #12
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4851      	ldr	r0, [pc, #324]	; (8001738 <MX_GPIO_Init+0x45c>)
 80015f4:	f001 f946 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80015f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160a:	4619      	mov	r1, r3
 800160c:	484a      	ldr	r0, [pc, #296]	; (8001738 <MX_GPIO_Init+0x45c>)
 800160e:	f001 f939 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001612:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001624:	230c      	movs	r3, #12
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	4619      	mov	r1, r3
 800162e:	4843      	ldr	r0, [pc, #268]	; (800173c <MX_GPIO_Init+0x460>)
 8001630:	f001 f928 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001634:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001646:	4619      	mov	r1, r3
 8001648:	483c      	ldr	r0, [pc, #240]	; (800173c <MX_GPIO_Init+0x460>)
 800164a:	f001 f91b 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800164e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	4835      	ldr	r0, [pc, #212]	; (800173c <MX_GPIO_Init+0x460>)
 8001668:	f001 f90c 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800166c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800167e:	230e      	movs	r3, #14
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	482d      	ldr	r0, [pc, #180]	; (8001740 <MX_GPIO_Init+0x464>)
 800168a:	f001 f8fb 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800168e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016a0:	230e      	movs	r3, #14
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	4826      	ldr	r0, [pc, #152]	; (8001744 <MX_GPIO_Init+0x468>)
 80016ac:	f001 f8ea 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80016b0:	2348      	movs	r3, #72	; 0x48
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016c0:	230e      	movs	r3, #14
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	481c      	ldr	r0, [pc, #112]	; (800173c <MX_GPIO_Init+0x460>)
 80016cc:	f001 f8da 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80016d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80016e2:	2309      	movs	r3, #9
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	4814      	ldr	r0, [pc, #80]	; (8001740 <MX_GPIO_Init+0x464>)
 80016ee:	f001 f8c9 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80016f2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	4619      	mov	r1, r3
 800170a:	480d      	ldr	r0, [pc, #52]	; (8001740 <MX_GPIO_Init+0x464>)
 800170c:	f001 f8ba 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001710:	2360      	movs	r3, #96	; 0x60
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001720:	230c      	movs	r3, #12
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	4619      	mov	r1, r3
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <MX_GPIO_Init+0x45c>)
 800172c:	f001 f8aa 	bl	8002884 <HAL_GPIO_Init>

}
 8001730:	bf00      	nop
 8001732:	3738      	adds	r7, #56	; 0x38
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40020400 	.word	0x40020400
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40021800 	.word	0x40021800
 8001744:	40020800 	.word	0x40020800

08001748 <MEF_fanOff>:

/* USER CODE BEGIN 2 */
  /* Manejo de actuadores*/
  /*Manejo de FAN - el rele del fan encuentra conectado al GPIO_PIN 13*/
void MEF_fanOff(){
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001752:	4802      	ldr	r0, [pc, #8]	; (800175c <MEF_fanOff+0x14>)
 8001754:	f001 fa42 	bl	8002bdc <HAL_GPIO_WritePin>
  };
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021800 	.word	0x40021800

08001760 <MEF_fanOn>:
void MEF_fanOn(){
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 1);
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176a:	4802      	ldr	r0, [pc, #8]	; (8001774 <MEF_fanOn+0x14>)
 800176c:	f001 fa36 	bl	8002bdc <HAL_GPIO_WritePin>
  };
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021800 	.word	0x40021800

08001778 <MEF_alarmOff>:

  /*Manejo de Alarma*/
  /*El contacto que dispara la alamar se en cuentra conectado al GPIO_PIN 14*/
void MEF_alarmOff(){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001782:	4802      	ldr	r0, [pc, #8]	; (800178c <MEF_alarmOff+0x14>)
 8001784:	f001 fa2a 	bl	8002bdc <HAL_GPIO_WritePin>
  };
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021800 	.word	0x40021800

08001790 <MEF_alarmOn>:
void MEF_alarmOn(){
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800179a:	4802      	ldr	r0, [pc, #8]	; (80017a4 <MEF_alarmOn+0x14>)
 800179c:	f001 fa1e 	bl	8002bdc <HAL_GPIO_WritePin>
  };
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021800 	.word	0x40021800

080017a8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <MX_I2C3_Init+0x74>)
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <MX_I2C3_Init+0x78>)
 80017b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_I2C3_Init+0x74>)
 80017b4:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <MX_I2C3_Init+0x7c>)
 80017b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_I2C3_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_I2C3_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <MX_I2C3_Init+0x74>)
 80017c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_I2C3_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_I2C3_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_I2C3_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_I2C3_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <MX_I2C3_Init+0x74>)
 80017e6:	f001 fa13 	bl	8002c10 <HAL_I2C_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017f0:	f7fe ff5a 	bl	80006a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017f4:	2100      	movs	r1, #0
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <MX_I2C3_Init+0x74>)
 80017f8:	f001 fe55 	bl	80034a6 <HAL_I2CEx_ConfigAnalogFilter>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001802:	f7fe ff51 	bl	80006a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001806:	2100      	movs	r1, #0
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_I2C3_Init+0x74>)
 800180a:	f001 fe88 	bl	800351e <HAL_I2CEx_ConfigDigitalFilter>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001814:	f7fe ff48 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200000ec 	.word	0x200000ec
 8001820:	40005c00 	.word	0x40005c00
 8001824:	000186a0 	.word	0x000186a0

08001828 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a29      	ldr	r2, [pc, #164]	; (80018ec <HAL_I2C_MspInit+0xc4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d14b      	bne.n	80018e2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_I2C_MspInit+0xc8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <HAL_I2C_MspInit+0xc8>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_I2C_MspInit+0xc8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_I2C_MspInit+0xc8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <HAL_I2C_MspInit+0xc8>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_I2C_MspInit+0xc8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001888:	2312      	movs	r3, #18
 800188a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001894:	2304      	movs	r3, #4
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	4815      	ldr	r0, [pc, #84]	; (80018f4 <HAL_I2C_MspInit+0xcc>)
 80018a0:	f000 fff0 	bl	8002884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80018a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018aa:	2312      	movs	r3, #18
 80018ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018b6:	2304      	movs	r3, #4
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <HAL_I2C_MspInit+0xd0>)
 80018c2:	f000 ffdf 	bl	8002884 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_I2C_MspInit+0xc8>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_I2C_MspInit+0xc8>)
 80018d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_I2C_MspInit+0xc8>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40005c00 	.word	0x40005c00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020000 	.word	0x40020000

080018fc <LCD_Send_RawData>:
  /* USER CODE END I2C3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LCD_Send_RawData(uint8_t datoraw){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af02      	add	r7, sp, #8
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
	uint8_t packet[2];
	packet[0]= datoraw;
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	733b      	strb	r3, [r7, #12]
	packet[1]= ((datoraw) & (~EN_ON));
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f023 0304 	bic.w	r3, r3, #4
 8001910:	b2db      	uxtb	r3, r3
 8001912:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, SLAVE_ADDRESS_LCD, packet, 2, 100);
 8001914:	f107 020c 	add.w	r2, r7, #12
 8001918:	2364      	movs	r3, #100	; 0x64
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2302      	movs	r3, #2
 800191e:	214e      	movs	r1, #78	; 0x4e
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <LCD_Send_RawData+0x34>)
 8001922:	f001 fab9 	bl	8002e98 <HAL_I2C_Master_Transmit>
};
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200000ec 	.word	0x200000ec

08001934 <LCD_2x16_Send_I2C>:

void LCD_2x16_Send_I2C(uint8_t* data){
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af02      	add	r7, sp, #8
 800193a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c3, SLAVE_ADDRESS_LCD, data, 4, 100);
 800193c:	2364      	movs	r3, #100	; 0x64
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2304      	movs	r3, #4
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	214e      	movs	r1, #78	; 0x4e
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <LCD_2x16_Send_I2C+0x20>)
 8001948:	f001 faa6 	bl	8002e98 <HAL_I2C_Master_Transmit>
};
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200000ec 	.word	0x200000ec

08001958 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_USART1_UART_Init+0x50>)
 8001960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001990:	f002 fa9c 	bl	8003ecc <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800199a:	f7fe fe85 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000140 	.word	0x20000140
 80019a8:	40011000 	.word	0x40011000

080019ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <HAL_UART_MspInit+0x84>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12c      	bne.n	8001a28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019d8:	f043 0310 	orr.w	r3, r3, #16
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <HAL_UART_MspInit+0x8c>)
 8001a24:	f000 ff2e 	bl	8002884 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020000 	.word	0x40020000

08001a3c <UART_transmit>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void UART_transmit(uint8_t* cha){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, cha, (uint16_t) strlen((char*)cha), HAL_MAX_DELAY);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7fe fbd3 	bl	80001f0 <strlen>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <UART_transmit+0x28>)
 8001a56:	f002 fa86 	bl	8003f66 <HAL_UART_Transmit>
};
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000140 	.word	0x20000140

08001a68 <UART_transmit_uint16>:

void UART_transmit_uint16(uint16_t temp){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	char buff[3];
	sprintf(buff, "%d",temp);
 8001a72:	88fa      	ldrh	r2, [r7, #6]
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	4907      	ldr	r1, [pc, #28]	; (8001a98 <UART_transmit_uint16+0x30>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 fde8 	bl	8004650 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buff, 3, HAL_MAX_DELAY);
 8001a80:	f107 010c 	add.w	r1, r7, #12
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4804      	ldr	r0, [pc, #16]	; (8001a9c <UART_transmit_uint16+0x34>)
 8001a8c:	f002 fa6b 	bl	8003f66 <HAL_UART_Transmit>

};
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	0800509c 	.word	0x0800509c
 8001a9c:	20000140 	.word	0x20000140

08001aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <HAL_Init+0x40>)
 8001aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_Init+0x40>)
 8001ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_Init+0x40>)
 8001ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 fea7 	bl	800281c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f808 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7fe fdee 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023c00 	.word	0x40023c00

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x54>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x58>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 feb1 	bl	800286a <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b20:	f000 fe87 	bl	8002832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x5c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000010 	.word	0x20000010
 8001b40:	2000000c 	.word	0x2000000c

08001b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000010 	.word	0x20000010
 8001b68:	20000184 	.word	0x20000184

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000184 	.word	0x20000184

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff ffee 	bl	8001b6c <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffde 	bl	8001b6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000010 	.word	0x20000010

08001bcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e033      	b.n	8001c4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fb1e 	bl	800122c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d118      	bne.n	8001c3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c12:	f023 0302 	bic.w	r3, r3, #2
 8001c16:	f043 0202 	orr.w	r2, r3, #2
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 fab4 	bl	800218c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
 8001c3a:	e001      	b.n	8001c40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_Start+0x1a>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e0b2      	b.n	8001dd4 <HAL_ADC_Start+0x180>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d018      	beq.n	8001cb6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c94:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <HAL_ADC_Start+0x18c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a52      	ldr	r2, [pc, #328]	; (8001de4 <HAL_ADC_Start+0x190>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	0c9a      	lsrs	r2, r3, #18
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ca8:	e002      	b.n	8001cb0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f9      	bne.n	8001caa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d17a      	bne.n	8001dba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d02:	d106      	bne.n	8001d12 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	f023 0206 	bic.w	r2, r3, #6
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001d10:	e002      	b.n	8001d18 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <HAL_ADC_Start+0x194>)
 8001d22:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d2c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d12a      	bne.n	8001d90 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2b      	ldr	r2, [pc, #172]	; (8001dec <HAL_ADC_Start+0x198>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d015      	beq.n	8001d70 <HAL_ADC_Start+0x11c>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a29      	ldr	r2, [pc, #164]	; (8001df0 <HAL_ADC_Start+0x19c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d105      	bne.n	8001d5a <HAL_ADC_Start+0x106>
 8001d4e:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <HAL_ADC_Start+0x194>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <HAL_ADC_Start+0x1a0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d136      	bne.n	8001dd2 <HAL_ADC_Start+0x17e>
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_ADC_Start+0x194>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d130      	bne.n	8001dd2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d129      	bne.n	8001dd2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	e020      	b.n	8001dd2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_ADC_Start+0x198>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d11b      	bne.n	8001dd2 <HAL_ADC_Start+0x17e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d114      	bne.n	8001dd2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	e00b      	b.n	8001dd2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	20000000 	.word	0x20000000
 8001de4:	431bde83 	.word	0x431bde83
 8001de8:	40012300 	.word	0x40012300
 8001dec:	40012000 	.word	0x40012000
 8001df0:	40012100 	.word	0x40012100
 8001df4:	40012200 	.word	0x40012200

08001df8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e14:	d113      	bne.n	8001e3e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e24:	d10b      	bne.n	8001e3e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f043 0220 	orr.w	r2, r3, #32
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e063      	b.n	8001f06 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e3e:	f7ff fe95 	bl	8001b6c <HAL_GetTick>
 8001e42:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e44:	e021      	b.n	8001e8a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e4c:	d01d      	beq.n	8001e8a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <HAL_ADC_PollForConversion+0x6c>
 8001e54:	f7ff fe8a 	bl	8001b6c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d212      	bcs.n	8001e8a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d00b      	beq.n	8001e8a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f043 0204 	orr.w	r2, r3, #4
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e03d      	b.n	8001f06 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d1d6      	bne.n	8001e46 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0212 	mvn.w	r2, #18
 8001ea0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d123      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d11f      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d111      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x1c>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e113      	b.n	800216c <HAL_ADC_ConfigChannel+0x244>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b09      	cmp	r3, #9
 8001f52:	d925      	bls.n	8001fa0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68d9      	ldr	r1, [r3, #12]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	3b1e      	subs	r3, #30
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43da      	mvns	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	400a      	ands	r2, r1
 8001f78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68d9      	ldr	r1, [r3, #12]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4403      	add	r3, r0
 8001f92:	3b1e      	subs	r3, #30
 8001f94:	409a      	lsls	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	e022      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6919      	ldr	r1, [r3, #16]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6919      	ldr	r1, [r3, #16]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4403      	add	r3, r0
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d824      	bhi.n	8002038 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3b05      	subs	r3, #5
 8002000:	221f      	movs	r2, #31
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	400a      	ands	r2, r1
 800200e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	4618      	mov	r0, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	3b05      	subs	r3, #5
 800202a:	fa00 f203 	lsl.w	r2, r0, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	635a      	str	r2, [r3, #52]	; 0x34
 8002036:	e04c      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b0c      	cmp	r3, #12
 800203e:	d824      	bhi.n	800208a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	3b23      	subs	r3, #35	; 0x23
 8002052:	221f      	movs	r2, #31
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43da      	mvns	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	400a      	ands	r2, r1
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	4618      	mov	r0, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	3b23      	subs	r3, #35	; 0x23
 800207c:	fa00 f203 	lsl.w	r2, r0, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
 8002088:	e023      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	3b41      	subs	r3, #65	; 0x41
 800209c:	221f      	movs	r2, #31
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	400a      	ands	r2, r1
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4618      	mov	r0, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	3b41      	subs	r3, #65	; 0x41
 80020c6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_ADC_ConfigChannel+0x250>)
 80020d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a28      	ldr	r2, [pc, #160]	; (800217c <HAL_ADC_ConfigChannel+0x254>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d10f      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1d8>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b12      	cmp	r3, #18
 80020e6:	d10b      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_ADC_ConfigChannel+0x254>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d12b      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x23a>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_ADC_ConfigChannel+0x258>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <HAL_ADC_ConfigChannel+0x1f4>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b11      	cmp	r3, #17
 800211a:	d122      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a11      	ldr	r2, [pc, #68]	; (8002180 <HAL_ADC_ConfigChannel+0x258>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d111      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_ADC_ConfigChannel+0x25c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a11      	ldr	r2, [pc, #68]	; (8002188 <HAL_ADC_ConfigChannel+0x260>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0c9a      	lsrs	r2, r3, #18
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002154:	e002      	b.n	800215c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3b01      	subs	r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f9      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40012300 	.word	0x40012300
 800217c:	40012000 	.word	0x40012000
 8002180:	10000012 	.word	0x10000012
 8002184:	20000000 	.word	0x20000000
 8002188:	431bde83 	.word	0x431bde83

0800218c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002194:	4b79      	ldr	r3, [pc, #484]	; (800237c <ADC_Init+0x1f0>)
 8002196:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	021a      	lsls	r2, r3, #8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6899      	ldr	r1, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	4a58      	ldr	r2, [pc, #352]	; (8002380 <ADC_Init+0x1f4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d022      	beq.n	800226a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002232:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	e00f      	b.n	800228a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002288:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0202 	bic.w	r2, r2, #2
 8002298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e1b      	ldrb	r3, [r3, #24]
 80022a4:	005a      	lsls	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01b      	beq.n	80022f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	3b01      	subs	r3, #1
 80022e4:	035a      	lsls	r2, r3, #13
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	e007      	b.n	8002300 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	3b01      	subs	r3, #1
 800231c:	051a      	lsls	r2, r3, #20
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002342:	025a      	lsls	r2, r3, #9
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	029a      	lsls	r2, r3, #10
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	609a      	str	r2, [r3, #8]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40012300 	.word	0x40012300
 8002380:	0f000001 	.word	0x0f000001

08002384 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002398:	2302      	movs	r3, #2
 800239a:	e17e      	b.n	800269a <HAL_ADCEx_InjectedConfigChannel+0x316>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b09      	cmp	r3, #9
 80023aa:	d925      	bls.n	80023f8 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68d9      	ldr	r1, [r3, #12]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	3b1e      	subs	r3, #30
 80023c2:	2207      	movs	r2, #7
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43da      	mvns	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	400a      	ands	r2, r1
 80023d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68d9      	ldr	r1, [r3, #12]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	4603      	mov	r3, r0
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4403      	add	r3, r0
 80023ea:	3b1e      	subs	r3, #30
 80023ec:	409a      	lsls	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	e022      	b.n	800243e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6919      	ldr	r1, [r3, #16]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	2207      	movs	r2, #7
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	400a      	ands	r2, r1
 800241a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6919      	ldr	r1, [r3, #16]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	4618      	mov	r0, r3
 800242e:	4603      	mov	r3, r0
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4403      	add	r3, r0
 8002434:	409a      	lsls	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	3b01      	subs	r3, #1
 800245a:	051a      	lsls	r2, r3, #20
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3303      	adds	r3, #3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	221f      	movs	r2, #31
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43da      	mvns	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	400a      	ands	r2, r1
 8002494:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3303      	adds	r3, #3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	fa00 f203 	lsl.w	r2, r0, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a75      	ldr	r2, [pc, #468]	; (80026a8 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d022      	beq.n	800251c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80024e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6899      	ldr	r1, [r3, #8]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	e00f      	b.n	800253c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800252a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800253a:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	7d5b      	ldrb	r3, [r3, #21]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	e007      	b.n	8002566 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002564:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	7d1b      	ldrb	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	e007      	b.n	8002590 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800258e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d02e      	beq.n	80025f6 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002598:	2b03      	cmp	r3, #3
 800259a:	d840      	bhi.n	800261e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800259c:	2b01      	cmp	r3, #1
 800259e:	d002      	beq.n	80025a6 <HAL_ADCEx_InjectedConfigChannel+0x222>
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d014      	beq.n	80025ce <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80025a4:	e03b      	b.n	800261e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80025b4:	f023 030f 	bic.w	r3, r3, #15
 80025b8:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6959      	ldr	r1, [r3, #20]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	615a      	str	r2, [r3, #20]
      break;
 80025cc:	e03b      	b.n	8002646 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80025dc:	f023 030f 	bic.w	r3, r3, #15
 80025e0:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6999      	ldr	r1, [r3, #24]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	619a      	str	r2, [r3, #24]
      break;
 80025f4:	e027      	b.n	8002646 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002604:	f023 030f 	bic.w	r3, r3, #15
 8002608:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69d9      	ldr	r1, [r3, #28]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	61da      	str	r2, [r3, #28]
      break;
 800261c:	e013      	b.n	8002646 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800262c:	f023 030f 	bic.w	r3, r3, #15
 8002630:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a19      	ldr	r1, [r3, #32]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	621a      	str	r2, [r3, #32]
      break;
 8002644:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002648:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d109      	bne.n	8002668 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b12      	cmp	r3, #18
 800265a:	d105      	bne.n	8002668 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a10      	ldr	r2, [pc, #64]	; (80026b0 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10e      	bne.n	8002690 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d003      	beq.n	8002684 <HAL_ADCEx_InjectedConfigChannel+0x300>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b11      	cmp	r3, #17
 8002682:	d105      	bne.n	8002690 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	000f0001 	.word	0x000f0001
 80026ac:	40012300 	.word	0x40012300
 80026b0:	40012000 	.word	0x40012000
 80026b4:	10000012 	.word	0x10000012

080026b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ea:	4a04      	ldr	r2, [pc, #16]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	60d3      	str	r3, [r2, #12]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <__NVIC_GetPriorityGrouping+0x18>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	f003 0307 	and.w	r3, r3, #7
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	2b00      	cmp	r3, #0
 800272e:	db0a      	blt.n	8002746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	490c      	ldr	r1, [pc, #48]	; (8002768 <__NVIC_SetPriority+0x4c>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	440b      	add	r3, r1
 8002740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002744:	e00a      	b.n	800275c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4908      	ldr	r1, [pc, #32]	; (800276c <__NVIC_SetPriority+0x50>)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3b04      	subs	r3, #4
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	440b      	add	r3, r1
 800275a:	761a      	strb	r2, [r3, #24]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000e100 	.word	0xe000e100
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f1c3 0307 	rsb	r3, r3, #7
 800278a:	2b04      	cmp	r3, #4
 800278c:	bf28      	it	cs
 800278e:	2304      	movcs	r3, #4
 8002790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3304      	adds	r3, #4
 8002796:	2b06      	cmp	r3, #6
 8002798:	d902      	bls.n	80027a0 <NVIC_EncodePriority+0x30>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3b03      	subs	r3, #3
 800279e:	e000      	b.n	80027a2 <NVIC_EncodePriority+0x32>
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	401a      	ands	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	4313      	orrs	r3, r2
         );
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e8:	d301      	bcc.n	80027ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00f      	b.n	800280e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <SysTick_Config+0x40>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f6:	210f      	movs	r1, #15
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027fc:	f7ff ff8e 	bl	800271c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <SysTick_Config+0x40>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <SysTick_Config+0x40>)
 8002808:	2207      	movs	r2, #7
 800280a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	e000e010 	.word	0xe000e010

0800281c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff47 	bl	80026b8 <__NVIC_SetPriorityGrouping>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002844:	f7ff ff5c 	bl	8002700 <__NVIC_GetPriorityGrouping>
 8002848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f7ff ff8e 	bl	8002770 <NVIC_EncodePriority>
 8002854:	4602      	mov	r2, r0
 8002856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff5d 	bl	800271c <__NVIC_SetPriority>
}
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffb0 	bl	80027d8 <SysTick_Config>
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e177      	b.n	8002b90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f040 8166 	bne.w	8002b8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d005      	beq.n	80028d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d130      	bne.n	8002938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2203      	movs	r2, #3
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800290c:	2201      	movs	r2, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 0201 	and.w	r2, r3, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b03      	cmp	r3, #3
 8002942:	d017      	beq.n	8002974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d123      	bne.n	80029c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	08da      	lsrs	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3208      	adds	r2, #8
 8002988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	220f      	movs	r2, #15
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	69b9      	ldr	r1, [r7, #24]
 80029c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0203 	and.w	r2, r3, #3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80c0 	beq.w	8002b8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	4b66      	ldr	r3, [pc, #408]	; (8002ba8 <HAL_GPIO_Init+0x324>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a65      	ldr	r2, [pc, #404]	; (8002ba8 <HAL_GPIO_Init+0x324>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b63      	ldr	r3, [pc, #396]	; (8002ba8 <HAL_GPIO_Init+0x324>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a26:	4a61      	ldr	r2, [pc, #388]	; (8002bac <HAL_GPIO_Init+0x328>)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a58      	ldr	r2, [pc, #352]	; (8002bb0 <HAL_GPIO_Init+0x32c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d037      	beq.n	8002ac2 <HAL_GPIO_Init+0x23e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a57      	ldr	r2, [pc, #348]	; (8002bb4 <HAL_GPIO_Init+0x330>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d031      	beq.n	8002abe <HAL_GPIO_Init+0x23a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a56      	ldr	r2, [pc, #344]	; (8002bb8 <HAL_GPIO_Init+0x334>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d02b      	beq.n	8002aba <HAL_GPIO_Init+0x236>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a55      	ldr	r2, [pc, #340]	; (8002bbc <HAL_GPIO_Init+0x338>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d025      	beq.n	8002ab6 <HAL_GPIO_Init+0x232>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a54      	ldr	r2, [pc, #336]	; (8002bc0 <HAL_GPIO_Init+0x33c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01f      	beq.n	8002ab2 <HAL_GPIO_Init+0x22e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a53      	ldr	r2, [pc, #332]	; (8002bc4 <HAL_GPIO_Init+0x340>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d019      	beq.n	8002aae <HAL_GPIO_Init+0x22a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a52      	ldr	r2, [pc, #328]	; (8002bc8 <HAL_GPIO_Init+0x344>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_GPIO_Init+0x226>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a51      	ldr	r2, [pc, #324]	; (8002bcc <HAL_GPIO_Init+0x348>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00d      	beq.n	8002aa6 <HAL_GPIO_Init+0x222>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a50      	ldr	r2, [pc, #320]	; (8002bd0 <HAL_GPIO_Init+0x34c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d007      	beq.n	8002aa2 <HAL_GPIO_Init+0x21e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4f      	ldr	r2, [pc, #316]	; (8002bd4 <HAL_GPIO_Init+0x350>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_GPIO_Init+0x21a>
 8002a9a:	2309      	movs	r3, #9
 8002a9c:	e012      	b.n	8002ac4 <HAL_GPIO_Init+0x240>
 8002a9e:	230a      	movs	r3, #10
 8002aa0:	e010      	b.n	8002ac4 <HAL_GPIO_Init+0x240>
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	e00e      	b.n	8002ac4 <HAL_GPIO_Init+0x240>
 8002aa6:	2307      	movs	r3, #7
 8002aa8:	e00c      	b.n	8002ac4 <HAL_GPIO_Init+0x240>
 8002aaa:	2306      	movs	r3, #6
 8002aac:	e00a      	b.n	8002ac4 <HAL_GPIO_Init+0x240>
 8002aae:	2305      	movs	r3, #5
 8002ab0:	e008      	b.n	8002ac4 <HAL_GPIO_Init+0x240>
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	e006      	b.n	8002ac4 <HAL_GPIO_Init+0x240>
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e004      	b.n	8002ac4 <HAL_GPIO_Init+0x240>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e002      	b.n	8002ac4 <HAL_GPIO_Init+0x240>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_GPIO_Init+0x240>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	f002 0203 	and.w	r2, r2, #3
 8002aca:	0092      	lsls	r2, r2, #2
 8002acc:	4093      	lsls	r3, r2
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad4:	4935      	ldr	r1, [pc, #212]	; (8002bac <HAL_GPIO_Init+0x328>)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	3302      	adds	r3, #2
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <HAL_GPIO_Init+0x354>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b06:	4a34      	ldr	r2, [pc, #208]	; (8002bd8 <HAL_GPIO_Init+0x354>)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b0c:	4b32      	ldr	r3, [pc, #200]	; (8002bd8 <HAL_GPIO_Init+0x354>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b30:	4a29      	ldr	r2, [pc, #164]	; (8002bd8 <HAL_GPIO_Init+0x354>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b36:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <HAL_GPIO_Init+0x354>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b5a:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <HAL_GPIO_Init+0x354>)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_GPIO_Init+0x354>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <HAL_GPIO_Init+0x354>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	61fb      	str	r3, [r7, #28]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b0f      	cmp	r3, #15
 8002b94:	f67f ae84 	bls.w	80028a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	3724      	adds	r7, #36	; 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40013800 	.word	0x40013800
 8002bb0:	40020000 	.word	0x40020000
 8002bb4:	40020400 	.word	0x40020400
 8002bb8:	40020800 	.word	0x40020800
 8002bbc:	40020c00 	.word	0x40020c00
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40021400 	.word	0x40021400
 8002bc8:	40021800 	.word	0x40021800
 8002bcc:	40021c00 	.word	0x40021c00
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40022400 	.word	0x40022400
 8002bd8:	40013c00 	.word	0x40013c00

08002bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
 8002be8:	4613      	mov	r3, r2
 8002bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bec:	787b      	ldrb	r3, [r7, #1]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bf8:	e003      	b.n	8002c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bfa:	887b      	ldrh	r3, [r7, #2]
 8002bfc:	041a      	lsls	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	619a      	str	r2, [r3, #24]
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e12b      	b.n	8002e7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe fdf6 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2224      	movs	r2, #36	; 0x24
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c74:	f001 f902 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8002c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a81      	ldr	r2, [pc, #516]	; (8002e84 <HAL_I2C_Init+0x274>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d807      	bhi.n	8002c94 <HAL_I2C_Init+0x84>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a80      	ldr	r2, [pc, #512]	; (8002e88 <HAL_I2C_Init+0x278>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	bf94      	ite	ls
 8002c8c:	2301      	movls	r3, #1
 8002c8e:	2300      	movhi	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e006      	b.n	8002ca2 <HAL_I2C_Init+0x92>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a7d      	ldr	r2, [pc, #500]	; (8002e8c <HAL_I2C_Init+0x27c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	bf94      	ite	ls
 8002c9c:	2301      	movls	r3, #1
 8002c9e:	2300      	movhi	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0e7      	b.n	8002e7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a78      	ldr	r2, [pc, #480]	; (8002e90 <HAL_I2C_Init+0x280>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	0c9b      	lsrs	r3, r3, #18
 8002cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a6a      	ldr	r2, [pc, #424]	; (8002e84 <HAL_I2C_Init+0x274>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d802      	bhi.n	8002ce4 <HAL_I2C_Init+0xd4>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	e009      	b.n	8002cf8 <HAL_I2C_Init+0xe8>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	4a69      	ldr	r2, [pc, #420]	; (8002e94 <HAL_I2C_Init+0x284>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	495c      	ldr	r1, [pc, #368]	; (8002e84 <HAL_I2C_Init+0x274>)
 8002d14:	428b      	cmp	r3, r1
 8002d16:	d819      	bhi.n	8002d4c <HAL_I2C_Init+0x13c>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1e59      	subs	r1, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d26:	1c59      	adds	r1, r3, #1
 8002d28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d2c:	400b      	ands	r3, r1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_I2C_Init+0x138>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1e59      	subs	r1, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d46:	e051      	b.n	8002dec <HAL_I2C_Init+0x1dc>
 8002d48:	2304      	movs	r3, #4
 8002d4a:	e04f      	b.n	8002dec <HAL_I2C_Init+0x1dc>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d111      	bne.n	8002d78 <HAL_I2C_Init+0x168>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1e58      	subs	r0, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	440b      	add	r3, r1
 8002d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e012      	b.n	8002d9e <HAL_I2C_Init+0x18e>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1e58      	subs	r0, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	0099      	lsls	r1, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Init+0x196>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e022      	b.n	8002dec <HAL_I2C_Init+0x1dc>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10e      	bne.n	8002dcc <HAL_I2C_Init+0x1bc>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1e58      	subs	r0, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6859      	ldr	r1, [r3, #4]
 8002db6:	460b      	mov	r3, r1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	440b      	add	r3, r1
 8002dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dca:	e00f      	b.n	8002dec <HAL_I2C_Init+0x1dc>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1e58      	subs	r0, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	0099      	lsls	r1, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de2:	3301      	adds	r3, #1
 8002de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	6809      	ldr	r1, [r1, #0]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6911      	ldr	r1, [r2, #16]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68d2      	ldr	r2, [r2, #12]
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	000186a0 	.word	0x000186a0
 8002e88:	001e847f 	.word	0x001e847f
 8002e8c:	003d08ff 	.word	0x003d08ff
 8002e90:	431bde83 	.word	0x431bde83
 8002e94:	10624dd3 	.word	0x10624dd3

08002e98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	817b      	strh	r3, [r7, #10]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7fe fe5e 	bl	8001b6c <HAL_GetTick>
 8002eb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	f040 80e0 	bne.w	8003080 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2319      	movs	r3, #25
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4970      	ldr	r1, [pc, #448]	; (800308c <HAL_I2C_Master_Transmit+0x1f4>)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f964 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e0d3      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_I2C_Master_Transmit+0x50>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e0cc      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d007      	beq.n	8002f0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2210      	movs	r2, #16
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	893a      	ldrh	r2, [r7, #8]
 8002f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4a50      	ldr	r2, [pc, #320]	; (8003090 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f50:	8979      	ldrh	r1, [r7, #10]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f89c 	bl	8003094 <I2C_MasterRequestWrite>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e08d      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f7c:	e066      	b.n	800304c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	6a39      	ldr	r1, [r7, #32]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f9de 	bl	8003344 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d107      	bne.n	8002fa6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e06b      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d11b      	bne.n	8003020 <HAL_I2C_Master_Transmit+0x188>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d017      	beq.n	8003020 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	6a39      	ldr	r1, [r7, #32]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f9ce 	bl	80033c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00d      	beq.n	800304c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2b04      	cmp	r3, #4
 8003036:	d107      	bne.n	8003048 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e01a      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	d194      	bne.n	8002f7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	00100002 	.word	0x00100002
 8003090:	ffff0000 	.word	0xffff0000

08003094 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	460b      	mov	r3, r1
 80030a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d006      	beq.n	80030be <I2C_MasterRequestWrite+0x2a>
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d003      	beq.n	80030be <I2C_MasterRequestWrite+0x2a>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030bc:	d108      	bne.n	80030d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e00b      	b.n	80030e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	2b12      	cmp	r3, #18
 80030d6:	d107      	bne.n	80030e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f84f 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310e:	d103      	bne.n	8003118 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e035      	b.n	8003188 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003124:	d108      	bne.n	8003138 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003126:	897b      	ldrh	r3, [r7, #10]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003134:	611a      	str	r2, [r3, #16]
 8003136:	e01b      	b.n	8003170 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003138:	897b      	ldrh	r3, [r7, #10]
 800313a:	11db      	asrs	r3, r3, #7
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f003 0306 	and.w	r3, r3, #6
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f063 030f 	orn	r3, r3, #15
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	490e      	ldr	r1, [pc, #56]	; (8003190 <I2C_MasterRequestWrite+0xfc>)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f875 	bl	8003246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e010      	b.n	8003188 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4907      	ldr	r1, [pc, #28]	; (8003194 <I2C_MasterRequestWrite+0x100>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f865 	bl	8003246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	00010008 	.word	0x00010008
 8003194:	00010002 	.word	0x00010002

08003198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a8:	e025      	b.n	80031f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b0:	d021      	beq.n	80031f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7fe fcdb 	bl	8001b6c <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d116      	bne.n	80031f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f043 0220 	orr.w	r2, r3, #32
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e023      	b.n	800323e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	0c1b      	lsrs	r3, r3, #16
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10d      	bne.n	800321c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	43da      	mvns	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4013      	ands	r3, r2
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf0c      	ite	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	2300      	movne	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	e00c      	b.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	43da      	mvns	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4013      	ands	r3, r2
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	429a      	cmp	r2, r3
 800323a:	d0b6      	beq.n	80031aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003254:	e051      	b.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003264:	d123      	bne.n	80032ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003274:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800327e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f043 0204 	orr.w	r2, r3, #4
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e046      	b.n	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b4:	d021      	beq.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b6:	f7fe fc59 	bl	8001b6c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d302      	bcc.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d116      	bne.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e020      	b.n	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10c      	bne.n	800331e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	43da      	mvns	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4013      	ands	r3, r2
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e00b      	b.n	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	43da      	mvns	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d18d      	bne.n	8003256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003350:	e02d      	b.n	80033ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f878 	bl	8003448 <I2C_IsAcknowledgeFailed>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e02d      	b.n	80033be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003368:	d021      	beq.n	80033ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336a:	f7fe fbff 	bl	8001b6c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	d302      	bcc.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d116      	bne.n	80033ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f043 0220 	orr.w	r2, r3, #32
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e007      	b.n	80033be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b8:	2b80      	cmp	r3, #128	; 0x80
 80033ba:	d1ca      	bne.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033d2:	e02d      	b.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f837 	bl	8003448 <I2C_IsAcknowledgeFailed>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e02d      	b.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ea:	d021      	beq.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ec:	f7fe fbbe 	bl	8001b6c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d116      	bne.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e007      	b.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b04      	cmp	r3, #4
 800343c:	d1ca      	bne.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345e:	d11b      	bne.n	8003498 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003468:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d129      	bne.n	8003510 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2224      	movs	r2, #36	; 0x24
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0210 	bic.w	r2, r2, #16
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	e000      	b.n	8003512 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003510:	2302      	movs	r3, #2
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b20      	cmp	r3, #32
 8003536:	d12a      	bne.n	800358e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2224      	movs	r2, #36	; 0x24
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003558:	89fb      	ldrh	r3, [r7, #14]
 800355a:	f023 030f 	bic.w	r3, r3, #15
 800355e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	b29a      	uxth	r2, r3
 8003564:	89fb      	ldrh	r3, [r7, #14]
 8003566:	4313      	orrs	r3, r2
 8003568:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	89fa      	ldrh	r2, [r7, #14]
 8003570:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e000      	b.n	8003590 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
  }
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e267      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d075      	beq.n	80036a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ba:	4b88      	ldr	r3, [pc, #544]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d00c      	beq.n	80035e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c6:	4b85      	ldr	r3, [pc, #532]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d112      	bne.n	80035f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d2:	4b82      	ldr	r3, [pc, #520]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035de:	d10b      	bne.n	80035f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	4b7e      	ldr	r3, [pc, #504]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d05b      	beq.n	80036a4 <HAL_RCC_OscConfig+0x108>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d157      	bne.n	80036a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e242      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003600:	d106      	bne.n	8003610 <HAL_RCC_OscConfig+0x74>
 8003602:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a75      	ldr	r2, [pc, #468]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e01d      	b.n	800364c <HAL_RCC_OscConfig+0xb0>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003618:	d10c      	bne.n	8003634 <HAL_RCC_OscConfig+0x98>
 800361a:	4b70      	ldr	r3, [pc, #448]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a6f      	ldr	r2, [pc, #444]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 8003620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4b6d      	ldr	r3, [pc, #436]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a6c      	ldr	r2, [pc, #432]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 800362c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e00b      	b.n	800364c <HAL_RCC_OscConfig+0xb0>
 8003634:	4b69      	ldr	r3, [pc, #420]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a68      	ldr	r2, [pc, #416]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 800363a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b66      	ldr	r3, [pc, #408]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a65      	ldr	r2, [pc, #404]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 8003646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe fa8a 	bl	8001b6c <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800365c:	f7fe fa86 	bl	8001b6c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e207      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b5b      	ldr	r3, [pc, #364]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0xc0>
 800367a:	e014      	b.n	80036a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fe fa76 	bl	8001b6c <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003684:	f7fe fa72 	bl	8001b6c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e1f3      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003696:	4b51      	ldr	r3, [pc, #324]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0xe8>
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d063      	beq.n	800377a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036b2:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036be:	4b47      	ldr	r3, [pc, #284]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d11c      	bne.n	8003704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ca:	4b44      	ldr	r3, [pc, #272]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d116      	bne.n	8003704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	4b41      	ldr	r3, [pc, #260]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_RCC_OscConfig+0x152>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e1c7      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ee:	4b3b      	ldr	r3, [pc, #236]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4937      	ldr	r1, [pc, #220]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003702:	e03a      	b.n	800377a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d020      	beq.n	800374e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370c:	4b34      	ldr	r3, [pc, #208]	; (80037e0 <HAL_RCC_OscConfig+0x244>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fe fa2b 	bl	8001b6c <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371a:	f7fe fa27 	bl	8001b6c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e1a8      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372c:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003738:	4b28      	ldr	r3, [pc, #160]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4925      	ldr	r1, [pc, #148]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 8003748:	4313      	orrs	r3, r2
 800374a:	600b      	str	r3, [r1, #0]
 800374c:	e015      	b.n	800377a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_OscConfig+0x244>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fe fa0a 	bl	8001b6c <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375c:	f7fe fa06 	bl	8001b6c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e187      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376e:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d036      	beq.n	80037f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d016      	beq.n	80037bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <HAL_RCC_OscConfig+0x248>)
 8003790:	2201      	movs	r2, #1
 8003792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fe f9ea 	bl	8001b6c <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379c:	f7fe f9e6 	bl	8001b6c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e167      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_OscConfig+0x240>)
 80037b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x200>
 80037ba:	e01b      	b.n	80037f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_RCC_OscConfig+0x248>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c2:	f7fe f9d3 	bl	8001b6c <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	e00e      	b.n	80037e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ca:	f7fe f9cf 	bl	8001b6c <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d907      	bls.n	80037e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e150      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	42470000 	.word	0x42470000
 80037e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e8:	4b88      	ldr	r3, [pc, #544]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 80037ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ea      	bne.n	80037ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8097 	beq.w	8003930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003806:	4b81      	ldr	r3, [pc, #516]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	4b7d      	ldr	r3, [pc, #500]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	4a7c      	ldr	r2, [pc, #496]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 800381c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003820:	6413      	str	r3, [r2, #64]	; 0x40
 8003822:	4b7a      	ldr	r3, [pc, #488]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382e:	2301      	movs	r3, #1
 8003830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003832:	4b77      	ldr	r3, [pc, #476]	; (8003a10 <HAL_RCC_OscConfig+0x474>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d118      	bne.n	8003870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383e:	4b74      	ldr	r3, [pc, #464]	; (8003a10 <HAL_RCC_OscConfig+0x474>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a73      	ldr	r2, [pc, #460]	; (8003a10 <HAL_RCC_OscConfig+0x474>)
 8003844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384a:	f7fe f98f 	bl	8001b6c <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003852:	f7fe f98b 	bl	8001b6c <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e10c      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <HAL_RCC_OscConfig+0x474>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0x2ea>
 8003878:	4b64      	ldr	r3, [pc, #400]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	4a63      	ldr	r2, [pc, #396]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6713      	str	r3, [r2, #112]	; 0x70
 8003884:	e01c      	b.n	80038c0 <HAL_RCC_OscConfig+0x324>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b05      	cmp	r3, #5
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x30c>
 800388e:	4b5f      	ldr	r3, [pc, #380]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	4a5e      	ldr	r2, [pc, #376]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	6713      	str	r3, [r2, #112]	; 0x70
 800389a:	4b5c      	ldr	r3, [pc, #368]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	4a5b      	ldr	r2, [pc, #364]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6713      	str	r3, [r2, #112]	; 0x70
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0x324>
 80038a8:	4b58      	ldr	r3, [pc, #352]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	4a57      	ldr	r2, [pc, #348]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	6713      	str	r3, [r2, #112]	; 0x70
 80038b4:	4b55      	ldr	r3, [pc, #340]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	4a54      	ldr	r2, [pc, #336]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 80038ba:	f023 0304 	bic.w	r3, r3, #4
 80038be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fe f950 	bl	8001b6c <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fe f94c 	bl	8001b6c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	; 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0cb      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e6:	4b49      	ldr	r3, [pc, #292]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0ee      	beq.n	80038d0 <HAL_RCC_OscConfig+0x334>
 80038f2:	e014      	b.n	800391e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f4:	f7fe f93a 	bl	8001b6c <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fa:	e00a      	b.n	8003912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038fc:	f7fe f936 	bl	8001b6c <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f241 3288 	movw	r2, #5000	; 0x1388
 800390a:	4293      	cmp	r3, r2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e0b5      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003912:	4b3e      	ldr	r3, [pc, #248]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1ee      	bne.n	80038fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003924:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	4a38      	ldr	r2, [pc, #224]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80a1 	beq.w	8003a7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393a:	4b34      	ldr	r3, [pc, #208]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b08      	cmp	r3, #8
 8003944:	d05c      	beq.n	8003a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d141      	bne.n	80039d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b31      	ldr	r3, [pc, #196]	; (8003a14 <HAL_RCC_OscConfig+0x478>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe f90a 	bl	8001b6c <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395c:	f7fe f906 	bl	8001b6c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e087      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	019b      	lsls	r3, r3, #6
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	3b01      	subs	r3, #1
 8003994:	041b      	lsls	r3, r3, #16
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	491b      	ldr	r1, [pc, #108]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a4:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <HAL_RCC_OscConfig+0x478>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039aa:	f7fe f8df 	bl	8001b6c <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b2:	f7fe f8db 	bl	8001b6c <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e05c      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x416>
 80039d0:	e054      	b.n	8003a7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d2:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <HAL_RCC_OscConfig+0x478>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fe f8c8 	bl	8001b6c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fe f8c4 	bl	8001b6c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e045      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f2:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <HAL_RCC_OscConfig+0x470>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x444>
 80039fe:	e03d      	b.n	8003a7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d107      	bne.n	8003a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e038      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40007000 	.word	0x40007000
 8003a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a18:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <HAL_RCC_OscConfig+0x4ec>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d028      	beq.n	8003a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d121      	bne.n	8003a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d11a      	bne.n	8003a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a48:	4013      	ands	r3, r2
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d111      	bne.n	8003a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	3b01      	subs	r3, #1
 8003a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d107      	bne.n	8003a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800

08003a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0cc      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b68      	ldr	r3, [pc, #416]	; (8003c44 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d90c      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b65      	ldr	r3, [pc, #404]	; (8003c44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0b8      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d020      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae0:	4b59      	ldr	r3, [pc, #356]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4a58      	ldr	r2, [pc, #352]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af8:	4b53      	ldr	r3, [pc, #332]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	4a52      	ldr	r2, [pc, #328]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b04:	4b50      	ldr	r3, [pc, #320]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	494d      	ldr	r1, [pc, #308]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d044      	beq.n	8003bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d107      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2a:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d119      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e07f      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d003      	beq.n	8003b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4a:	4b3f      	ldr	r3, [pc, #252]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e06f      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	4b3b      	ldr	r3, [pc, #236]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e067      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6a:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f023 0203 	bic.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4934      	ldr	r1, [pc, #208]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b7c:	f7fd fff6 	bl	8001b6c <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b84:	f7fd fff2 	bl	8001b6c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e04f      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	4b2b      	ldr	r3, [pc, #172]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 020c 	and.w	r2, r3, #12
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1eb      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bac:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <HAL_RCC_ClockConfig+0x1b8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d20c      	bcs.n	8003bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b22      	ldr	r3, [pc, #136]	; (8003c44 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e032      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be0:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4916      	ldr	r1, [pc, #88]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bfe:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	490e      	ldr	r1, [pc, #56]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c12:	f000 f821 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	490a      	ldr	r1, [pc, #40]	; (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003c24:	5ccb      	ldrb	r3, [r1, r3]
 8003c26:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2a:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_RCC_ClockConfig+0x1c8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd ff56 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40023c00 	.word	0x40023c00
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	080050a0 	.word	0x080050a0
 8003c50:	20000000 	.word	0x20000000
 8003c54:	2000000c 	.word	0x2000000c

08003c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c5c:	b094      	sub	sp, #80	; 0x50
 8003c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	647b      	str	r3, [r7, #68]	; 0x44
 8003c64:	2300      	movs	r3, #0
 8003c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c68:	2300      	movs	r3, #0
 8003c6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c70:	4b79      	ldr	r3, [pc, #484]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d00d      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x40>
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	f200 80e1 	bhi.w	8003e44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0x34>
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c8a:	e0db      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c8c:	4b73      	ldr	r3, [pc, #460]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c90:	e0db      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c92:	4b73      	ldr	r3, [pc, #460]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c96:	e0d8      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c98:	4b6f      	ldr	r3, [pc, #444]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ca2:	4b6d      	ldr	r3, [pc, #436]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d063      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cae:	4b6a      	ldr	r3, [pc, #424]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	099b      	lsrs	r3, r3, #6
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cca:	4622      	mov	r2, r4
 8003ccc:	462b      	mov	r3, r5
 8003cce:	f04f 0000 	mov.w	r0, #0
 8003cd2:	f04f 0100 	mov.w	r1, #0
 8003cd6:	0159      	lsls	r1, r3, #5
 8003cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cdc:	0150      	lsls	r0, r2, #5
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	1a51      	subs	r1, r2, r1
 8003ce6:	6139      	str	r1, [r7, #16]
 8003ce8:	4629      	mov	r1, r5
 8003cea:	eb63 0301 	sbc.w	r3, r3, r1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	018b      	lsls	r3, r1, #6
 8003d00:	4651      	mov	r1, sl
 8003d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d06:	4651      	mov	r1, sl
 8003d08:	018a      	lsls	r2, r1, #6
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d10:	4659      	mov	r1, fp
 8003d12:	eb63 0901 	sbc.w	r9, r3, r1
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d2a:	4690      	mov	r8, r2
 8003d2c:	4699      	mov	r9, r3
 8003d2e:	4623      	mov	r3, r4
 8003d30:	eb18 0303 	adds.w	r3, r8, r3
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	462b      	mov	r3, r5
 8003d38:	eb49 0303 	adc.w	r3, r9, r3
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	024b      	lsls	r3, r1, #9
 8003d4e:	4621      	mov	r1, r4
 8003d50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d54:	4621      	mov	r1, r4
 8003d56:	024a      	lsls	r2, r1, #9
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5e:	2200      	movs	r2, #0
 8003d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d68:	f7fc fa9a 	bl	80002a0 <__aeabi_uldivmod>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4613      	mov	r3, r2
 8003d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d74:	e058      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d76:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	099b      	lsrs	r3, r3, #6
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	4611      	mov	r1, r2
 8003d82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d86:	623b      	str	r3, [r7, #32]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d90:	4642      	mov	r2, r8
 8003d92:	464b      	mov	r3, r9
 8003d94:	f04f 0000 	mov.w	r0, #0
 8003d98:	f04f 0100 	mov.w	r1, #0
 8003d9c:	0159      	lsls	r1, r3, #5
 8003d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da2:	0150      	lsls	r0, r2, #5
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4641      	mov	r1, r8
 8003daa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dae:	4649      	mov	r1, r9
 8003db0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dc8:	ebb2 040a 	subs.w	r4, r2, sl
 8003dcc:	eb63 050b 	sbc.w	r5, r3, fp
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	00eb      	lsls	r3, r5, #3
 8003dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dde:	00e2      	lsls	r2, r4, #3
 8003de0:	4614      	mov	r4, r2
 8003de2:	461d      	mov	r5, r3
 8003de4:	4643      	mov	r3, r8
 8003de6:	18e3      	adds	r3, r4, r3
 8003de8:	603b      	str	r3, [r7, #0]
 8003dea:	464b      	mov	r3, r9
 8003dec:	eb45 0303 	adc.w	r3, r5, r3
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dfe:	4629      	mov	r1, r5
 8003e00:	028b      	lsls	r3, r1, #10
 8003e02:	4621      	mov	r1, r4
 8003e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e08:	4621      	mov	r1, r4
 8003e0a:	028a      	lsls	r2, r1, #10
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e12:	2200      	movs	r2, #0
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	61fa      	str	r2, [r7, #28]
 8003e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e1c:	f7fc fa40 	bl	80002a0 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4613      	mov	r3, r2
 8003e26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	3301      	adds	r3, #1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e42:	e002      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3750      	adds	r7, #80	; 0x50
 8003e50:	46bd      	mov	sp, r7
 8003e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	00f42400 	.word	0x00f42400
 8003e60:	007a1200 	.word	0x007a1200

08003e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000000 	.word	0x20000000

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e80:	f7ff fff0 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0a9b      	lsrs	r3, r3, #10
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4903      	ldr	r1, [pc, #12]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	080050b0 	.word	0x080050b0

08003ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ea8:	f7ff ffdc 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0b5b      	lsrs	r3, r3, #13
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	080050b0 	.word	0x080050b0

08003ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e03f      	b.n	8003f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd fd5a 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	; 0x24
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f929 	bl	8004168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b08a      	sub	sp, #40	; 0x28
 8003f6a:	af02      	add	r7, sp, #8
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d17c      	bne.n	8004080 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_UART_Transmit+0x2c>
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e075      	b.n	8004082 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_UART_Transmit+0x3e>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e06e      	b.n	8004082 <HAL_UART_Transmit+0x11c>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2221      	movs	r2, #33	; 0x21
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fba:	f7fd fdd7 	bl	8001b6c <HAL_GetTick>
 8003fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	88fa      	ldrh	r2, [r7, #6]
 8003fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd4:	d108      	bne.n	8003fe8 <HAL_UART_Transmit+0x82>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d104      	bne.n	8003fe8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	e003      	b.n	8003ff0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ff8:	e02a      	b.n	8004050 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2200      	movs	r2, #0
 8004002:	2180      	movs	r1, #128	; 0x80
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f840 	bl	800408a <UART_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e036      	b.n	8004082 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	3302      	adds	r3, #2
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	e007      	b.n	8004042 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	3301      	adds	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1cf      	bne.n	8003ffa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2200      	movs	r2, #0
 8004062:	2140      	movs	r1, #64	; 0x40
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f810 	bl	800408a <UART_WaitOnFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e006      	b.n	8004082 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b090      	sub	sp, #64	; 0x40
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4613      	mov	r3, r2
 8004098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409a:	e050      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a2:	d04c      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <UART_WaitOnFlagUntilTimeout+0x30>
 80040aa:	f7fd fd5f 	bl	8001b6c <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d241      	bcs.n	800413e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	330c      	adds	r3, #12
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040da:	637a      	str	r2, [r7, #52]	; 0x34
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e5      	bne.n	80040ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3314      	adds	r3, #20
 80040f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	613b      	str	r3, [r7, #16]
   return(result);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	63bb      	str	r3, [r7, #56]	; 0x38
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3314      	adds	r3, #20
 800410c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800410e:	623a      	str	r2, [r7, #32]
 8004110:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	69f9      	ldr	r1, [r7, #28]
 8004114:	6a3a      	ldr	r2, [r7, #32]
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	61bb      	str	r3, [r7, #24]
   return(result);
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e5      	bne.n	80040ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e00f      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	429a      	cmp	r2, r3
 800415a:	d09f      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3740      	adds	r7, #64	; 0x40
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800416c:	b0c0      	sub	sp, #256	; 0x100
 800416e:	af00      	add	r7, sp, #0
 8004170:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	68d9      	ldr	r1, [r3, #12]
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	ea40 0301 	orr.w	r3, r0, r1
 8004190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	431a      	orrs	r2, r3
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041c0:	f021 010c 	bic.w	r1, r1, #12
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041ce:	430b      	orrs	r3, r1
 80041d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e2:	6999      	ldr	r1, [r3, #24]
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	ea40 0301 	orr.w	r3, r0, r1
 80041ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b8f      	ldr	r3, [pc, #572]	; (8004434 <UART_SetConfig+0x2cc>)
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d005      	beq.n	8004208 <UART_SetConfig+0xa0>
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b8d      	ldr	r3, [pc, #564]	; (8004438 <UART_SetConfig+0x2d0>)
 8004204:	429a      	cmp	r2, r3
 8004206:	d104      	bne.n	8004212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004208:	f7ff fe4c 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 800420c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004210:	e003      	b.n	800421a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004212:	f7ff fe33 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8004216:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004224:	f040 810c 	bne.w	8004440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422c:	2200      	movs	r2, #0
 800422e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004232:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800423a:	4622      	mov	r2, r4
 800423c:	462b      	mov	r3, r5
 800423e:	1891      	adds	r1, r2, r2
 8004240:	65b9      	str	r1, [r7, #88]	; 0x58
 8004242:	415b      	adcs	r3, r3
 8004244:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800424a:	4621      	mov	r1, r4
 800424c:	eb12 0801 	adds.w	r8, r2, r1
 8004250:	4629      	mov	r1, r5
 8004252:	eb43 0901 	adc.w	r9, r3, r1
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800426a:	4690      	mov	r8, r2
 800426c:	4699      	mov	r9, r3
 800426e:	4623      	mov	r3, r4
 8004270:	eb18 0303 	adds.w	r3, r8, r3
 8004274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004278:	462b      	mov	r3, r5
 800427a:	eb49 0303 	adc.w	r3, r9, r3
 800427e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800428e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004296:	460b      	mov	r3, r1
 8004298:	18db      	adds	r3, r3, r3
 800429a:	653b      	str	r3, [r7, #80]	; 0x50
 800429c:	4613      	mov	r3, r2
 800429e:	eb42 0303 	adc.w	r3, r2, r3
 80042a2:	657b      	str	r3, [r7, #84]	; 0x54
 80042a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042ac:	f7fb fff8 	bl	80002a0 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4b61      	ldr	r3, [pc, #388]	; (800443c <UART_SetConfig+0x2d4>)
 80042b6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	011c      	lsls	r4, r3, #4
 80042be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	1891      	adds	r1, r2, r2
 80042d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80042d8:	415b      	adcs	r3, r3
 80042da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042e0:	4641      	mov	r1, r8
 80042e2:	eb12 0a01 	adds.w	sl, r2, r1
 80042e6:	4649      	mov	r1, r9
 80042e8:	eb43 0b01 	adc.w	fp, r3, r1
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004300:	4692      	mov	sl, r2
 8004302:	469b      	mov	fp, r3
 8004304:	4643      	mov	r3, r8
 8004306:	eb1a 0303 	adds.w	r3, sl, r3
 800430a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800430e:	464b      	mov	r3, r9
 8004310:	eb4b 0303 	adc.w	r3, fp, r3
 8004314:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004324:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800432c:	460b      	mov	r3, r1
 800432e:	18db      	adds	r3, r3, r3
 8004330:	643b      	str	r3, [r7, #64]	; 0x40
 8004332:	4613      	mov	r3, r2
 8004334:	eb42 0303 	adc.w	r3, r2, r3
 8004338:	647b      	str	r3, [r7, #68]	; 0x44
 800433a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800433e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004342:	f7fb ffad 	bl	80002a0 <__aeabi_uldivmod>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4611      	mov	r1, r2
 800434c:	4b3b      	ldr	r3, [pc, #236]	; (800443c <UART_SetConfig+0x2d4>)
 800434e:	fba3 2301 	umull	r2, r3, r3, r1
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2264      	movs	r2, #100	; 0x64
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	1acb      	subs	r3, r1, r3
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004362:	4b36      	ldr	r3, [pc, #216]	; (800443c <UART_SetConfig+0x2d4>)
 8004364:	fba3 2302 	umull	r2, r3, r3, r2
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004370:	441c      	add	r4, r3
 8004372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004376:	2200      	movs	r2, #0
 8004378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800437c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	1891      	adds	r1, r2, r2
 800438a:	63b9      	str	r1, [r7, #56]	; 0x38
 800438c:	415b      	adcs	r3, r3
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004394:	4641      	mov	r1, r8
 8004396:	1851      	adds	r1, r2, r1
 8004398:	6339      	str	r1, [r7, #48]	; 0x30
 800439a:	4649      	mov	r1, r9
 800439c:	414b      	adcs	r3, r1
 800439e:	637b      	str	r3, [r7, #52]	; 0x34
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043ac:	4659      	mov	r1, fp
 80043ae:	00cb      	lsls	r3, r1, #3
 80043b0:	4651      	mov	r1, sl
 80043b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b6:	4651      	mov	r1, sl
 80043b8:	00ca      	lsls	r2, r1, #3
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	4642      	mov	r2, r8
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043c8:	464b      	mov	r3, r9
 80043ca:	460a      	mov	r2, r1
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043e8:	460b      	mov	r3, r1
 80043ea:	18db      	adds	r3, r3, r3
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ee:	4613      	mov	r3, r2
 80043f0:	eb42 0303 	adc.w	r3, r2, r3
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043fe:	f7fb ff4f 	bl	80002a0 <__aeabi_uldivmod>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <UART_SetConfig+0x2d4>)
 8004408:	fba3 1302 	umull	r1, r3, r3, r2
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	2164      	movs	r1, #100	; 0x64
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	3332      	adds	r3, #50	; 0x32
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <UART_SetConfig+0x2d4>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	f003 0207 	and.w	r2, r3, #7
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4422      	add	r2, r4
 800442e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004430:	e106      	b.n	8004640 <UART_SetConfig+0x4d8>
 8004432:	bf00      	nop
 8004434:	40011000 	.word	0x40011000
 8004438:	40011400 	.word	0x40011400
 800443c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004444:	2200      	movs	r2, #0
 8004446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800444a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800444e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004452:	4642      	mov	r2, r8
 8004454:	464b      	mov	r3, r9
 8004456:	1891      	adds	r1, r2, r2
 8004458:	6239      	str	r1, [r7, #32]
 800445a:	415b      	adcs	r3, r3
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
 800445e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004462:	4641      	mov	r1, r8
 8004464:	1854      	adds	r4, r2, r1
 8004466:	4649      	mov	r1, r9
 8004468:	eb43 0501 	adc.w	r5, r3, r1
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	00eb      	lsls	r3, r5, #3
 8004476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800447a:	00e2      	lsls	r2, r4, #3
 800447c:	4614      	mov	r4, r2
 800447e:	461d      	mov	r5, r3
 8004480:	4643      	mov	r3, r8
 8004482:	18e3      	adds	r3, r4, r3
 8004484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004488:	464b      	mov	r3, r9
 800448a:	eb45 0303 	adc.w	r3, r5, r3
 800448e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800449e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044ae:	4629      	mov	r1, r5
 80044b0:	008b      	lsls	r3, r1, #2
 80044b2:	4621      	mov	r1, r4
 80044b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b8:	4621      	mov	r1, r4
 80044ba:	008a      	lsls	r2, r1, #2
 80044bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044c0:	f7fb feee 	bl	80002a0 <__aeabi_uldivmod>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4b60      	ldr	r3, [pc, #384]	; (800464c <UART_SetConfig+0x4e4>)
 80044ca:	fba3 2302 	umull	r2, r3, r3, r2
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	011c      	lsls	r4, r3, #4
 80044d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044e4:	4642      	mov	r2, r8
 80044e6:	464b      	mov	r3, r9
 80044e8:	1891      	adds	r1, r2, r2
 80044ea:	61b9      	str	r1, [r7, #24]
 80044ec:	415b      	adcs	r3, r3
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f4:	4641      	mov	r1, r8
 80044f6:	1851      	adds	r1, r2, r1
 80044f8:	6139      	str	r1, [r7, #16]
 80044fa:	4649      	mov	r1, r9
 80044fc:	414b      	adcs	r3, r1
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800450c:	4659      	mov	r1, fp
 800450e:	00cb      	lsls	r3, r1, #3
 8004510:	4651      	mov	r1, sl
 8004512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004516:	4651      	mov	r1, sl
 8004518:	00ca      	lsls	r2, r1, #3
 800451a:	4610      	mov	r0, r2
 800451c:	4619      	mov	r1, r3
 800451e:	4603      	mov	r3, r0
 8004520:	4642      	mov	r2, r8
 8004522:	189b      	adds	r3, r3, r2
 8004524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004528:	464b      	mov	r3, r9
 800452a:	460a      	mov	r2, r1
 800452c:	eb42 0303 	adc.w	r3, r2, r3
 8004530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	67bb      	str	r3, [r7, #120]	; 0x78
 800453e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800454c:	4649      	mov	r1, r9
 800454e:	008b      	lsls	r3, r1, #2
 8004550:	4641      	mov	r1, r8
 8004552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004556:	4641      	mov	r1, r8
 8004558:	008a      	lsls	r2, r1, #2
 800455a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800455e:	f7fb fe9f 	bl	80002a0 <__aeabi_uldivmod>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4611      	mov	r1, r2
 8004568:	4b38      	ldr	r3, [pc, #224]	; (800464c <UART_SetConfig+0x4e4>)
 800456a:	fba3 2301 	umull	r2, r3, r3, r1
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2264      	movs	r2, #100	; 0x64
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	1acb      	subs	r3, r1, r3
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	3332      	adds	r3, #50	; 0x32
 800457c:	4a33      	ldr	r2, [pc, #204]	; (800464c <UART_SetConfig+0x4e4>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004588:	441c      	add	r4, r3
 800458a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800458e:	2200      	movs	r2, #0
 8004590:	673b      	str	r3, [r7, #112]	; 0x70
 8004592:	677a      	str	r2, [r7, #116]	; 0x74
 8004594:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004598:	4642      	mov	r2, r8
 800459a:	464b      	mov	r3, r9
 800459c:	1891      	adds	r1, r2, r2
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	415b      	adcs	r3, r3
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a8:	4641      	mov	r1, r8
 80045aa:	1851      	adds	r1, r2, r1
 80045ac:	6039      	str	r1, [r7, #0]
 80045ae:	4649      	mov	r1, r9
 80045b0:	414b      	adcs	r3, r1
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045c0:	4659      	mov	r1, fp
 80045c2:	00cb      	lsls	r3, r1, #3
 80045c4:	4651      	mov	r1, sl
 80045c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ca:	4651      	mov	r1, sl
 80045cc:	00ca      	lsls	r2, r1, #3
 80045ce:	4610      	mov	r0, r2
 80045d0:	4619      	mov	r1, r3
 80045d2:	4603      	mov	r3, r0
 80045d4:	4642      	mov	r2, r8
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80045da:	464b      	mov	r3, r9
 80045dc:	460a      	mov	r2, r1
 80045de:	eb42 0303 	adc.w	r3, r2, r3
 80045e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	663b      	str	r3, [r7, #96]	; 0x60
 80045ee:	667a      	str	r2, [r7, #100]	; 0x64
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045fc:	4649      	mov	r1, r9
 80045fe:	008b      	lsls	r3, r1, #2
 8004600:	4641      	mov	r1, r8
 8004602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004606:	4641      	mov	r1, r8
 8004608:	008a      	lsls	r2, r1, #2
 800460a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800460e:	f7fb fe47 	bl	80002a0 <__aeabi_uldivmod>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4b0d      	ldr	r3, [pc, #52]	; (800464c <UART_SetConfig+0x4e4>)
 8004618:	fba3 1302 	umull	r1, r3, r3, r2
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	2164      	movs	r1, #100	; 0x64
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	3332      	adds	r3, #50	; 0x32
 800462a:	4a08      	ldr	r2, [pc, #32]	; (800464c <UART_SetConfig+0x4e4>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	f003 020f 	and.w	r2, r3, #15
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4422      	add	r2, r4
 800463e:	609a      	str	r2, [r3, #8]
}
 8004640:	bf00      	nop
 8004642:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004646:	46bd      	mov	sp, r7
 8004648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464c:	51eb851f 	.word	0x51eb851f

08004650 <siprintf>:
 8004650:	b40e      	push	{r1, r2, r3}
 8004652:	b500      	push	{lr}
 8004654:	b09c      	sub	sp, #112	; 0x70
 8004656:	ab1d      	add	r3, sp, #116	; 0x74
 8004658:	9002      	str	r0, [sp, #8]
 800465a:	9006      	str	r0, [sp, #24]
 800465c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004660:	4809      	ldr	r0, [pc, #36]	; (8004688 <siprintf+0x38>)
 8004662:	9107      	str	r1, [sp, #28]
 8004664:	9104      	str	r1, [sp, #16]
 8004666:	4909      	ldr	r1, [pc, #36]	; (800468c <siprintf+0x3c>)
 8004668:	f853 2b04 	ldr.w	r2, [r3], #4
 800466c:	9105      	str	r1, [sp, #20]
 800466e:	6800      	ldr	r0, [r0, #0]
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	a902      	add	r1, sp, #8
 8004674:	f000 f992 	bl	800499c <_svfiprintf_r>
 8004678:	9b02      	ldr	r3, [sp, #8]
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	b01c      	add	sp, #112	; 0x70
 8004680:	f85d eb04 	ldr.w	lr, [sp], #4
 8004684:	b003      	add	sp, #12
 8004686:	4770      	bx	lr
 8004688:	20000060 	.word	0x20000060
 800468c:	ffff0208 	.word	0xffff0208

08004690 <memset>:
 8004690:	4402      	add	r2, r0
 8004692:	4603      	mov	r3, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <__errno>:
 80046a0:	4b01      	ldr	r3, [pc, #4]	; (80046a8 <__errno+0x8>)
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20000060 	.word	0x20000060

080046ac <__libc_init_array>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	4d0d      	ldr	r5, [pc, #52]	; (80046e4 <__libc_init_array+0x38>)
 80046b0:	4c0d      	ldr	r4, [pc, #52]	; (80046e8 <__libc_init_array+0x3c>)
 80046b2:	1b64      	subs	r4, r4, r5
 80046b4:	10a4      	asrs	r4, r4, #2
 80046b6:	2600      	movs	r6, #0
 80046b8:	42a6      	cmp	r6, r4
 80046ba:	d109      	bne.n	80046d0 <__libc_init_array+0x24>
 80046bc:	4d0b      	ldr	r5, [pc, #44]	; (80046ec <__libc_init_array+0x40>)
 80046be:	4c0c      	ldr	r4, [pc, #48]	; (80046f0 <__libc_init_array+0x44>)
 80046c0:	f000 fc6a 	bl	8004f98 <_init>
 80046c4:	1b64      	subs	r4, r4, r5
 80046c6:	10a4      	asrs	r4, r4, #2
 80046c8:	2600      	movs	r6, #0
 80046ca:	42a6      	cmp	r6, r4
 80046cc:	d105      	bne.n	80046da <__libc_init_array+0x2e>
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
 80046d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d4:	4798      	blx	r3
 80046d6:	3601      	adds	r6, #1
 80046d8:	e7ee      	b.n	80046b8 <__libc_init_array+0xc>
 80046da:	f855 3b04 	ldr.w	r3, [r5], #4
 80046de:	4798      	blx	r3
 80046e0:	3601      	adds	r6, #1
 80046e2:	e7f2      	b.n	80046ca <__libc_init_array+0x1e>
 80046e4:	080050f4 	.word	0x080050f4
 80046e8:	080050f4 	.word	0x080050f4
 80046ec:	080050f4 	.word	0x080050f4
 80046f0:	080050f8 	.word	0x080050f8

080046f4 <__retarget_lock_acquire_recursive>:
 80046f4:	4770      	bx	lr

080046f6 <__retarget_lock_release_recursive>:
 80046f6:	4770      	bx	lr

080046f8 <_free_r>:
 80046f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046fa:	2900      	cmp	r1, #0
 80046fc:	d044      	beq.n	8004788 <_free_r+0x90>
 80046fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004702:	9001      	str	r0, [sp, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f1a1 0404 	sub.w	r4, r1, #4
 800470a:	bfb8      	it	lt
 800470c:	18e4      	addlt	r4, r4, r3
 800470e:	f000 f8df 	bl	80048d0 <__malloc_lock>
 8004712:	4a1e      	ldr	r2, [pc, #120]	; (800478c <_free_r+0x94>)
 8004714:	9801      	ldr	r0, [sp, #4]
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	b933      	cbnz	r3, 8004728 <_free_r+0x30>
 800471a:	6063      	str	r3, [r4, #4]
 800471c:	6014      	str	r4, [r2, #0]
 800471e:	b003      	add	sp, #12
 8004720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004724:	f000 b8da 	b.w	80048dc <__malloc_unlock>
 8004728:	42a3      	cmp	r3, r4
 800472a:	d908      	bls.n	800473e <_free_r+0x46>
 800472c:	6825      	ldr	r5, [r4, #0]
 800472e:	1961      	adds	r1, r4, r5
 8004730:	428b      	cmp	r3, r1
 8004732:	bf01      	itttt	eq
 8004734:	6819      	ldreq	r1, [r3, #0]
 8004736:	685b      	ldreq	r3, [r3, #4]
 8004738:	1949      	addeq	r1, r1, r5
 800473a:	6021      	streq	r1, [r4, #0]
 800473c:	e7ed      	b.n	800471a <_free_r+0x22>
 800473e:	461a      	mov	r2, r3
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	b10b      	cbz	r3, 8004748 <_free_r+0x50>
 8004744:	42a3      	cmp	r3, r4
 8004746:	d9fa      	bls.n	800473e <_free_r+0x46>
 8004748:	6811      	ldr	r1, [r2, #0]
 800474a:	1855      	adds	r5, r2, r1
 800474c:	42a5      	cmp	r5, r4
 800474e:	d10b      	bne.n	8004768 <_free_r+0x70>
 8004750:	6824      	ldr	r4, [r4, #0]
 8004752:	4421      	add	r1, r4
 8004754:	1854      	adds	r4, r2, r1
 8004756:	42a3      	cmp	r3, r4
 8004758:	6011      	str	r1, [r2, #0]
 800475a:	d1e0      	bne.n	800471e <_free_r+0x26>
 800475c:	681c      	ldr	r4, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	6053      	str	r3, [r2, #4]
 8004762:	440c      	add	r4, r1
 8004764:	6014      	str	r4, [r2, #0]
 8004766:	e7da      	b.n	800471e <_free_r+0x26>
 8004768:	d902      	bls.n	8004770 <_free_r+0x78>
 800476a:	230c      	movs	r3, #12
 800476c:	6003      	str	r3, [r0, #0]
 800476e:	e7d6      	b.n	800471e <_free_r+0x26>
 8004770:	6825      	ldr	r5, [r4, #0]
 8004772:	1961      	adds	r1, r4, r5
 8004774:	428b      	cmp	r3, r1
 8004776:	bf04      	itt	eq
 8004778:	6819      	ldreq	r1, [r3, #0]
 800477a:	685b      	ldreq	r3, [r3, #4]
 800477c:	6063      	str	r3, [r4, #4]
 800477e:	bf04      	itt	eq
 8004780:	1949      	addeq	r1, r1, r5
 8004782:	6021      	streq	r1, [r4, #0]
 8004784:	6054      	str	r4, [r2, #4]
 8004786:	e7ca      	b.n	800471e <_free_r+0x26>
 8004788:	b003      	add	sp, #12
 800478a:	bd30      	pop	{r4, r5, pc}
 800478c:	200002c8 	.word	0x200002c8

08004790 <sbrk_aligned>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	4e0e      	ldr	r6, [pc, #56]	; (80047cc <sbrk_aligned+0x3c>)
 8004794:	460c      	mov	r4, r1
 8004796:	6831      	ldr	r1, [r6, #0]
 8004798:	4605      	mov	r5, r0
 800479a:	b911      	cbnz	r1, 80047a2 <sbrk_aligned+0x12>
 800479c:	f000 fba6 	bl	8004eec <_sbrk_r>
 80047a0:	6030      	str	r0, [r6, #0]
 80047a2:	4621      	mov	r1, r4
 80047a4:	4628      	mov	r0, r5
 80047a6:	f000 fba1 	bl	8004eec <_sbrk_r>
 80047aa:	1c43      	adds	r3, r0, #1
 80047ac:	d00a      	beq.n	80047c4 <sbrk_aligned+0x34>
 80047ae:	1cc4      	adds	r4, r0, #3
 80047b0:	f024 0403 	bic.w	r4, r4, #3
 80047b4:	42a0      	cmp	r0, r4
 80047b6:	d007      	beq.n	80047c8 <sbrk_aligned+0x38>
 80047b8:	1a21      	subs	r1, r4, r0
 80047ba:	4628      	mov	r0, r5
 80047bc:	f000 fb96 	bl	8004eec <_sbrk_r>
 80047c0:	3001      	adds	r0, #1
 80047c2:	d101      	bne.n	80047c8 <sbrk_aligned+0x38>
 80047c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80047c8:	4620      	mov	r0, r4
 80047ca:	bd70      	pop	{r4, r5, r6, pc}
 80047cc:	200002cc 	.word	0x200002cc

080047d0 <_malloc_r>:
 80047d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047d4:	1ccd      	adds	r5, r1, #3
 80047d6:	f025 0503 	bic.w	r5, r5, #3
 80047da:	3508      	adds	r5, #8
 80047dc:	2d0c      	cmp	r5, #12
 80047de:	bf38      	it	cc
 80047e0:	250c      	movcc	r5, #12
 80047e2:	2d00      	cmp	r5, #0
 80047e4:	4607      	mov	r7, r0
 80047e6:	db01      	blt.n	80047ec <_malloc_r+0x1c>
 80047e8:	42a9      	cmp	r1, r5
 80047ea:	d905      	bls.n	80047f8 <_malloc_r+0x28>
 80047ec:	230c      	movs	r3, #12
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	2600      	movs	r6, #0
 80047f2:	4630      	mov	r0, r6
 80047f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80048cc <_malloc_r+0xfc>
 80047fc:	f000 f868 	bl	80048d0 <__malloc_lock>
 8004800:	f8d8 3000 	ldr.w	r3, [r8]
 8004804:	461c      	mov	r4, r3
 8004806:	bb5c      	cbnz	r4, 8004860 <_malloc_r+0x90>
 8004808:	4629      	mov	r1, r5
 800480a:	4638      	mov	r0, r7
 800480c:	f7ff ffc0 	bl	8004790 <sbrk_aligned>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	4604      	mov	r4, r0
 8004814:	d155      	bne.n	80048c2 <_malloc_r+0xf2>
 8004816:	f8d8 4000 	ldr.w	r4, [r8]
 800481a:	4626      	mov	r6, r4
 800481c:	2e00      	cmp	r6, #0
 800481e:	d145      	bne.n	80048ac <_malloc_r+0xdc>
 8004820:	2c00      	cmp	r4, #0
 8004822:	d048      	beq.n	80048b6 <_malloc_r+0xe6>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	4631      	mov	r1, r6
 8004828:	4638      	mov	r0, r7
 800482a:	eb04 0903 	add.w	r9, r4, r3
 800482e:	f000 fb5d 	bl	8004eec <_sbrk_r>
 8004832:	4581      	cmp	r9, r0
 8004834:	d13f      	bne.n	80048b6 <_malloc_r+0xe6>
 8004836:	6821      	ldr	r1, [r4, #0]
 8004838:	1a6d      	subs	r5, r5, r1
 800483a:	4629      	mov	r1, r5
 800483c:	4638      	mov	r0, r7
 800483e:	f7ff ffa7 	bl	8004790 <sbrk_aligned>
 8004842:	3001      	adds	r0, #1
 8004844:	d037      	beq.n	80048b6 <_malloc_r+0xe6>
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	442b      	add	r3, r5
 800484a:	6023      	str	r3, [r4, #0]
 800484c:	f8d8 3000 	ldr.w	r3, [r8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d038      	beq.n	80048c6 <_malloc_r+0xf6>
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	42a2      	cmp	r2, r4
 8004858:	d12b      	bne.n	80048b2 <_malloc_r+0xe2>
 800485a:	2200      	movs	r2, #0
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	e00f      	b.n	8004880 <_malloc_r+0xb0>
 8004860:	6822      	ldr	r2, [r4, #0]
 8004862:	1b52      	subs	r2, r2, r5
 8004864:	d41f      	bmi.n	80048a6 <_malloc_r+0xd6>
 8004866:	2a0b      	cmp	r2, #11
 8004868:	d917      	bls.n	800489a <_malloc_r+0xca>
 800486a:	1961      	adds	r1, r4, r5
 800486c:	42a3      	cmp	r3, r4
 800486e:	6025      	str	r5, [r4, #0]
 8004870:	bf18      	it	ne
 8004872:	6059      	strne	r1, [r3, #4]
 8004874:	6863      	ldr	r3, [r4, #4]
 8004876:	bf08      	it	eq
 8004878:	f8c8 1000 	streq.w	r1, [r8]
 800487c:	5162      	str	r2, [r4, r5]
 800487e:	604b      	str	r3, [r1, #4]
 8004880:	4638      	mov	r0, r7
 8004882:	f104 060b 	add.w	r6, r4, #11
 8004886:	f000 f829 	bl	80048dc <__malloc_unlock>
 800488a:	f026 0607 	bic.w	r6, r6, #7
 800488e:	1d23      	adds	r3, r4, #4
 8004890:	1af2      	subs	r2, r6, r3
 8004892:	d0ae      	beq.n	80047f2 <_malloc_r+0x22>
 8004894:	1b9b      	subs	r3, r3, r6
 8004896:	50a3      	str	r3, [r4, r2]
 8004898:	e7ab      	b.n	80047f2 <_malloc_r+0x22>
 800489a:	42a3      	cmp	r3, r4
 800489c:	6862      	ldr	r2, [r4, #4]
 800489e:	d1dd      	bne.n	800485c <_malloc_r+0x8c>
 80048a0:	f8c8 2000 	str.w	r2, [r8]
 80048a4:	e7ec      	b.n	8004880 <_malloc_r+0xb0>
 80048a6:	4623      	mov	r3, r4
 80048a8:	6864      	ldr	r4, [r4, #4]
 80048aa:	e7ac      	b.n	8004806 <_malloc_r+0x36>
 80048ac:	4634      	mov	r4, r6
 80048ae:	6876      	ldr	r6, [r6, #4]
 80048b0:	e7b4      	b.n	800481c <_malloc_r+0x4c>
 80048b2:	4613      	mov	r3, r2
 80048b4:	e7cc      	b.n	8004850 <_malloc_r+0x80>
 80048b6:	230c      	movs	r3, #12
 80048b8:	603b      	str	r3, [r7, #0]
 80048ba:	4638      	mov	r0, r7
 80048bc:	f000 f80e 	bl	80048dc <__malloc_unlock>
 80048c0:	e797      	b.n	80047f2 <_malloc_r+0x22>
 80048c2:	6025      	str	r5, [r4, #0]
 80048c4:	e7dc      	b.n	8004880 <_malloc_r+0xb0>
 80048c6:	605b      	str	r3, [r3, #4]
 80048c8:	deff      	udf	#255	; 0xff
 80048ca:	bf00      	nop
 80048cc:	200002c8 	.word	0x200002c8

080048d0 <__malloc_lock>:
 80048d0:	4801      	ldr	r0, [pc, #4]	; (80048d8 <__malloc_lock+0x8>)
 80048d2:	f7ff bf0f 	b.w	80046f4 <__retarget_lock_acquire_recursive>
 80048d6:	bf00      	nop
 80048d8:	200002c4 	.word	0x200002c4

080048dc <__malloc_unlock>:
 80048dc:	4801      	ldr	r0, [pc, #4]	; (80048e4 <__malloc_unlock+0x8>)
 80048de:	f7ff bf0a 	b.w	80046f6 <__retarget_lock_release_recursive>
 80048e2:	bf00      	nop
 80048e4:	200002c4 	.word	0x200002c4

080048e8 <__ssputs_r>:
 80048e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ec:	688e      	ldr	r6, [r1, #8]
 80048ee:	461f      	mov	r7, r3
 80048f0:	42be      	cmp	r6, r7
 80048f2:	680b      	ldr	r3, [r1, #0]
 80048f4:	4682      	mov	sl, r0
 80048f6:	460c      	mov	r4, r1
 80048f8:	4690      	mov	r8, r2
 80048fa:	d82c      	bhi.n	8004956 <__ssputs_r+0x6e>
 80048fc:	898a      	ldrh	r2, [r1, #12]
 80048fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004902:	d026      	beq.n	8004952 <__ssputs_r+0x6a>
 8004904:	6965      	ldr	r5, [r4, #20]
 8004906:	6909      	ldr	r1, [r1, #16]
 8004908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800490c:	eba3 0901 	sub.w	r9, r3, r1
 8004910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004914:	1c7b      	adds	r3, r7, #1
 8004916:	444b      	add	r3, r9
 8004918:	106d      	asrs	r5, r5, #1
 800491a:	429d      	cmp	r5, r3
 800491c:	bf38      	it	cc
 800491e:	461d      	movcc	r5, r3
 8004920:	0553      	lsls	r3, r2, #21
 8004922:	d527      	bpl.n	8004974 <__ssputs_r+0x8c>
 8004924:	4629      	mov	r1, r5
 8004926:	f7ff ff53 	bl	80047d0 <_malloc_r>
 800492a:	4606      	mov	r6, r0
 800492c:	b360      	cbz	r0, 8004988 <__ssputs_r+0xa0>
 800492e:	6921      	ldr	r1, [r4, #16]
 8004930:	464a      	mov	r2, r9
 8004932:	f000 faeb 	bl	8004f0c <memcpy>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800493c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004940:	81a3      	strh	r3, [r4, #12]
 8004942:	6126      	str	r6, [r4, #16]
 8004944:	6165      	str	r5, [r4, #20]
 8004946:	444e      	add	r6, r9
 8004948:	eba5 0509 	sub.w	r5, r5, r9
 800494c:	6026      	str	r6, [r4, #0]
 800494e:	60a5      	str	r5, [r4, #8]
 8004950:	463e      	mov	r6, r7
 8004952:	42be      	cmp	r6, r7
 8004954:	d900      	bls.n	8004958 <__ssputs_r+0x70>
 8004956:	463e      	mov	r6, r7
 8004958:	6820      	ldr	r0, [r4, #0]
 800495a:	4632      	mov	r2, r6
 800495c:	4641      	mov	r1, r8
 800495e:	f000 faab 	bl	8004eb8 <memmove>
 8004962:	68a3      	ldr	r3, [r4, #8]
 8004964:	1b9b      	subs	r3, r3, r6
 8004966:	60a3      	str	r3, [r4, #8]
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	4433      	add	r3, r6
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	2000      	movs	r0, #0
 8004970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004974:	462a      	mov	r2, r5
 8004976:	f000 fad7 	bl	8004f28 <_realloc_r>
 800497a:	4606      	mov	r6, r0
 800497c:	2800      	cmp	r0, #0
 800497e:	d1e0      	bne.n	8004942 <__ssputs_r+0x5a>
 8004980:	6921      	ldr	r1, [r4, #16]
 8004982:	4650      	mov	r0, sl
 8004984:	f7ff feb8 	bl	80046f8 <_free_r>
 8004988:	230c      	movs	r3, #12
 800498a:	f8ca 3000 	str.w	r3, [sl]
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004994:	81a3      	strh	r3, [r4, #12]
 8004996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800499a:	e7e9      	b.n	8004970 <__ssputs_r+0x88>

0800499c <_svfiprintf_r>:
 800499c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a0:	4698      	mov	r8, r3
 80049a2:	898b      	ldrh	r3, [r1, #12]
 80049a4:	061b      	lsls	r3, r3, #24
 80049a6:	b09d      	sub	sp, #116	; 0x74
 80049a8:	4607      	mov	r7, r0
 80049aa:	460d      	mov	r5, r1
 80049ac:	4614      	mov	r4, r2
 80049ae:	d50e      	bpl.n	80049ce <_svfiprintf_r+0x32>
 80049b0:	690b      	ldr	r3, [r1, #16]
 80049b2:	b963      	cbnz	r3, 80049ce <_svfiprintf_r+0x32>
 80049b4:	2140      	movs	r1, #64	; 0x40
 80049b6:	f7ff ff0b 	bl	80047d0 <_malloc_r>
 80049ba:	6028      	str	r0, [r5, #0]
 80049bc:	6128      	str	r0, [r5, #16]
 80049be:	b920      	cbnz	r0, 80049ca <_svfiprintf_r+0x2e>
 80049c0:	230c      	movs	r3, #12
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049c8:	e0d0      	b.n	8004b6c <_svfiprintf_r+0x1d0>
 80049ca:	2340      	movs	r3, #64	; 0x40
 80049cc:	616b      	str	r3, [r5, #20]
 80049ce:	2300      	movs	r3, #0
 80049d0:	9309      	str	r3, [sp, #36]	; 0x24
 80049d2:	2320      	movs	r3, #32
 80049d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80049dc:	2330      	movs	r3, #48	; 0x30
 80049de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004b84 <_svfiprintf_r+0x1e8>
 80049e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049e6:	f04f 0901 	mov.w	r9, #1
 80049ea:	4623      	mov	r3, r4
 80049ec:	469a      	mov	sl, r3
 80049ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f2:	b10a      	cbz	r2, 80049f8 <_svfiprintf_r+0x5c>
 80049f4:	2a25      	cmp	r2, #37	; 0x25
 80049f6:	d1f9      	bne.n	80049ec <_svfiprintf_r+0x50>
 80049f8:	ebba 0b04 	subs.w	fp, sl, r4
 80049fc:	d00b      	beq.n	8004a16 <_svfiprintf_r+0x7a>
 80049fe:	465b      	mov	r3, fp
 8004a00:	4622      	mov	r2, r4
 8004a02:	4629      	mov	r1, r5
 8004a04:	4638      	mov	r0, r7
 8004a06:	f7ff ff6f 	bl	80048e8 <__ssputs_r>
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	f000 80a9 	beq.w	8004b62 <_svfiprintf_r+0x1c6>
 8004a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a12:	445a      	add	r2, fp
 8004a14:	9209      	str	r2, [sp, #36]	; 0x24
 8004a16:	f89a 3000 	ldrb.w	r3, [sl]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80a1 	beq.w	8004b62 <_svfiprintf_r+0x1c6>
 8004a20:	2300      	movs	r3, #0
 8004a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a2a:	f10a 0a01 	add.w	sl, sl, #1
 8004a2e:	9304      	str	r3, [sp, #16]
 8004a30:	9307      	str	r3, [sp, #28]
 8004a32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a36:	931a      	str	r3, [sp, #104]	; 0x68
 8004a38:	4654      	mov	r4, sl
 8004a3a:	2205      	movs	r2, #5
 8004a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a40:	4850      	ldr	r0, [pc, #320]	; (8004b84 <_svfiprintf_r+0x1e8>)
 8004a42:	f7fb fbdd 	bl	8000200 <memchr>
 8004a46:	9a04      	ldr	r2, [sp, #16]
 8004a48:	b9d8      	cbnz	r0, 8004a82 <_svfiprintf_r+0xe6>
 8004a4a:	06d0      	lsls	r0, r2, #27
 8004a4c:	bf44      	itt	mi
 8004a4e:	2320      	movmi	r3, #32
 8004a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a54:	0711      	lsls	r1, r2, #28
 8004a56:	bf44      	itt	mi
 8004a58:	232b      	movmi	r3, #43	; 0x2b
 8004a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a62:	2b2a      	cmp	r3, #42	; 0x2a
 8004a64:	d015      	beq.n	8004a92 <_svfiprintf_r+0xf6>
 8004a66:	9a07      	ldr	r2, [sp, #28]
 8004a68:	4654      	mov	r4, sl
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f04f 0c0a 	mov.w	ip, #10
 8004a70:	4621      	mov	r1, r4
 8004a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a76:	3b30      	subs	r3, #48	; 0x30
 8004a78:	2b09      	cmp	r3, #9
 8004a7a:	d94d      	bls.n	8004b18 <_svfiprintf_r+0x17c>
 8004a7c:	b1b0      	cbz	r0, 8004aac <_svfiprintf_r+0x110>
 8004a7e:	9207      	str	r2, [sp, #28]
 8004a80:	e014      	b.n	8004aac <_svfiprintf_r+0x110>
 8004a82:	eba0 0308 	sub.w	r3, r0, r8
 8004a86:	fa09 f303 	lsl.w	r3, r9, r3
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	9304      	str	r3, [sp, #16]
 8004a8e:	46a2      	mov	sl, r4
 8004a90:	e7d2      	b.n	8004a38 <_svfiprintf_r+0x9c>
 8004a92:	9b03      	ldr	r3, [sp, #12]
 8004a94:	1d19      	adds	r1, r3, #4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	9103      	str	r1, [sp, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfbb      	ittet	lt
 8004a9e:	425b      	neglt	r3, r3
 8004aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8004aa4:	9307      	strge	r3, [sp, #28]
 8004aa6:	9307      	strlt	r3, [sp, #28]
 8004aa8:	bfb8      	it	lt
 8004aaa:	9204      	strlt	r2, [sp, #16]
 8004aac:	7823      	ldrb	r3, [r4, #0]
 8004aae:	2b2e      	cmp	r3, #46	; 0x2e
 8004ab0:	d10c      	bne.n	8004acc <_svfiprintf_r+0x130>
 8004ab2:	7863      	ldrb	r3, [r4, #1]
 8004ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab6:	d134      	bne.n	8004b22 <_svfiprintf_r+0x186>
 8004ab8:	9b03      	ldr	r3, [sp, #12]
 8004aba:	1d1a      	adds	r2, r3, #4
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	9203      	str	r2, [sp, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bfb8      	it	lt
 8004ac4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ac8:	3402      	adds	r4, #2
 8004aca:	9305      	str	r3, [sp, #20]
 8004acc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004b94 <_svfiprintf_r+0x1f8>
 8004ad0:	7821      	ldrb	r1, [r4, #0]
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	4650      	mov	r0, sl
 8004ad6:	f7fb fb93 	bl	8000200 <memchr>
 8004ada:	b138      	cbz	r0, 8004aec <_svfiprintf_r+0x150>
 8004adc:	9b04      	ldr	r3, [sp, #16]
 8004ade:	eba0 000a 	sub.w	r0, r0, sl
 8004ae2:	2240      	movs	r2, #64	; 0x40
 8004ae4:	4082      	lsls	r2, r0
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	3401      	adds	r4, #1
 8004aea:	9304      	str	r3, [sp, #16]
 8004aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af0:	4825      	ldr	r0, [pc, #148]	; (8004b88 <_svfiprintf_r+0x1ec>)
 8004af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004af6:	2206      	movs	r2, #6
 8004af8:	f7fb fb82 	bl	8000200 <memchr>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d038      	beq.n	8004b72 <_svfiprintf_r+0x1d6>
 8004b00:	4b22      	ldr	r3, [pc, #136]	; (8004b8c <_svfiprintf_r+0x1f0>)
 8004b02:	bb1b      	cbnz	r3, 8004b4c <_svfiprintf_r+0x1b0>
 8004b04:	9b03      	ldr	r3, [sp, #12]
 8004b06:	3307      	adds	r3, #7
 8004b08:	f023 0307 	bic.w	r3, r3, #7
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	9303      	str	r3, [sp, #12]
 8004b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b12:	4433      	add	r3, r6
 8004b14:	9309      	str	r3, [sp, #36]	; 0x24
 8004b16:	e768      	b.n	80049ea <_svfiprintf_r+0x4e>
 8004b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	2001      	movs	r0, #1
 8004b20:	e7a6      	b.n	8004a70 <_svfiprintf_r+0xd4>
 8004b22:	2300      	movs	r3, #0
 8004b24:	3401      	adds	r4, #1
 8004b26:	9305      	str	r3, [sp, #20]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f04f 0c0a 	mov.w	ip, #10
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b34:	3a30      	subs	r2, #48	; 0x30
 8004b36:	2a09      	cmp	r2, #9
 8004b38:	d903      	bls.n	8004b42 <_svfiprintf_r+0x1a6>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0c6      	beq.n	8004acc <_svfiprintf_r+0x130>
 8004b3e:	9105      	str	r1, [sp, #20]
 8004b40:	e7c4      	b.n	8004acc <_svfiprintf_r+0x130>
 8004b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b46:	4604      	mov	r4, r0
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e7f0      	b.n	8004b2e <_svfiprintf_r+0x192>
 8004b4c:	ab03      	add	r3, sp, #12
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	462a      	mov	r2, r5
 8004b52:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <_svfiprintf_r+0x1f4>)
 8004b54:	a904      	add	r1, sp, #16
 8004b56:	4638      	mov	r0, r7
 8004b58:	f3af 8000 	nop.w
 8004b5c:	1c42      	adds	r2, r0, #1
 8004b5e:	4606      	mov	r6, r0
 8004b60:	d1d6      	bne.n	8004b10 <_svfiprintf_r+0x174>
 8004b62:	89ab      	ldrh	r3, [r5, #12]
 8004b64:	065b      	lsls	r3, r3, #25
 8004b66:	f53f af2d 	bmi.w	80049c4 <_svfiprintf_r+0x28>
 8004b6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b6c:	b01d      	add	sp, #116	; 0x74
 8004b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b72:	ab03      	add	r3, sp, #12
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	462a      	mov	r2, r5
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <_svfiprintf_r+0x1f4>)
 8004b7a:	a904      	add	r1, sp, #16
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	f000 f879 	bl	8004c74 <_printf_i>
 8004b82:	e7eb      	b.n	8004b5c <_svfiprintf_r+0x1c0>
 8004b84:	080050b8 	.word	0x080050b8
 8004b88:	080050c2 	.word	0x080050c2
 8004b8c:	00000000 	.word	0x00000000
 8004b90:	080048e9 	.word	0x080048e9
 8004b94:	080050be 	.word	0x080050be

08004b98 <_printf_common>:
 8004b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b9c:	4616      	mov	r6, r2
 8004b9e:	4699      	mov	r9, r3
 8004ba0:	688a      	ldr	r2, [r1, #8]
 8004ba2:	690b      	ldr	r3, [r1, #16]
 8004ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	bfb8      	it	lt
 8004bac:	4613      	movlt	r3, r2
 8004bae:	6033      	str	r3, [r6, #0]
 8004bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bb4:	4607      	mov	r7, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	b10a      	cbz	r2, 8004bbe <_printf_common+0x26>
 8004bba:	3301      	adds	r3, #1
 8004bbc:	6033      	str	r3, [r6, #0]
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	0699      	lsls	r1, r3, #26
 8004bc2:	bf42      	ittt	mi
 8004bc4:	6833      	ldrmi	r3, [r6, #0]
 8004bc6:	3302      	addmi	r3, #2
 8004bc8:	6033      	strmi	r3, [r6, #0]
 8004bca:	6825      	ldr	r5, [r4, #0]
 8004bcc:	f015 0506 	ands.w	r5, r5, #6
 8004bd0:	d106      	bne.n	8004be0 <_printf_common+0x48>
 8004bd2:	f104 0a19 	add.w	sl, r4, #25
 8004bd6:	68e3      	ldr	r3, [r4, #12]
 8004bd8:	6832      	ldr	r2, [r6, #0]
 8004bda:	1a9b      	subs	r3, r3, r2
 8004bdc:	42ab      	cmp	r3, r5
 8004bde:	dc26      	bgt.n	8004c2e <_printf_common+0x96>
 8004be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004be4:	1e13      	subs	r3, r2, #0
 8004be6:	6822      	ldr	r2, [r4, #0]
 8004be8:	bf18      	it	ne
 8004bea:	2301      	movne	r3, #1
 8004bec:	0692      	lsls	r2, r2, #26
 8004bee:	d42b      	bmi.n	8004c48 <_printf_common+0xb0>
 8004bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	47c0      	blx	r8
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	d01e      	beq.n	8004c3c <_printf_common+0xa4>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	6922      	ldr	r2, [r4, #16]
 8004c02:	f003 0306 	and.w	r3, r3, #6
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	bf02      	ittt	eq
 8004c0a:	68e5      	ldreq	r5, [r4, #12]
 8004c0c:	6833      	ldreq	r3, [r6, #0]
 8004c0e:	1aed      	subeq	r5, r5, r3
 8004c10:	68a3      	ldr	r3, [r4, #8]
 8004c12:	bf0c      	ite	eq
 8004c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c18:	2500      	movne	r5, #0
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	bfc4      	itt	gt
 8004c1e:	1a9b      	subgt	r3, r3, r2
 8004c20:	18ed      	addgt	r5, r5, r3
 8004c22:	2600      	movs	r6, #0
 8004c24:	341a      	adds	r4, #26
 8004c26:	42b5      	cmp	r5, r6
 8004c28:	d11a      	bne.n	8004c60 <_printf_common+0xc8>
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	e008      	b.n	8004c40 <_printf_common+0xa8>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	4652      	mov	r2, sl
 8004c32:	4649      	mov	r1, r9
 8004c34:	4638      	mov	r0, r7
 8004c36:	47c0      	blx	r8
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d103      	bne.n	8004c44 <_printf_common+0xac>
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c44:	3501      	adds	r5, #1
 8004c46:	e7c6      	b.n	8004bd6 <_printf_common+0x3e>
 8004c48:	18e1      	adds	r1, r4, r3
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	2030      	movs	r0, #48	; 0x30
 8004c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c52:	4422      	add	r2, r4
 8004c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	e7c7      	b.n	8004bf0 <_printf_common+0x58>
 8004c60:	2301      	movs	r3, #1
 8004c62:	4622      	mov	r2, r4
 8004c64:	4649      	mov	r1, r9
 8004c66:	4638      	mov	r0, r7
 8004c68:	47c0      	blx	r8
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d0e6      	beq.n	8004c3c <_printf_common+0xa4>
 8004c6e:	3601      	adds	r6, #1
 8004c70:	e7d9      	b.n	8004c26 <_printf_common+0x8e>
	...

08004c74 <_printf_i>:
 8004c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c78:	7e0f      	ldrb	r7, [r1, #24]
 8004c7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c7c:	2f78      	cmp	r7, #120	; 0x78
 8004c7e:	4691      	mov	r9, r2
 8004c80:	4680      	mov	r8, r0
 8004c82:	460c      	mov	r4, r1
 8004c84:	469a      	mov	sl, r3
 8004c86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c8a:	d807      	bhi.n	8004c9c <_printf_i+0x28>
 8004c8c:	2f62      	cmp	r7, #98	; 0x62
 8004c8e:	d80a      	bhi.n	8004ca6 <_printf_i+0x32>
 8004c90:	2f00      	cmp	r7, #0
 8004c92:	f000 80d4 	beq.w	8004e3e <_printf_i+0x1ca>
 8004c96:	2f58      	cmp	r7, #88	; 0x58
 8004c98:	f000 80c0 	beq.w	8004e1c <_printf_i+0x1a8>
 8004c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ca4:	e03a      	b.n	8004d1c <_printf_i+0xa8>
 8004ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004caa:	2b15      	cmp	r3, #21
 8004cac:	d8f6      	bhi.n	8004c9c <_printf_i+0x28>
 8004cae:	a101      	add	r1, pc, #4	; (adr r1, 8004cb4 <_printf_i+0x40>)
 8004cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cb4:	08004d0d 	.word	0x08004d0d
 8004cb8:	08004d21 	.word	0x08004d21
 8004cbc:	08004c9d 	.word	0x08004c9d
 8004cc0:	08004c9d 	.word	0x08004c9d
 8004cc4:	08004c9d 	.word	0x08004c9d
 8004cc8:	08004c9d 	.word	0x08004c9d
 8004ccc:	08004d21 	.word	0x08004d21
 8004cd0:	08004c9d 	.word	0x08004c9d
 8004cd4:	08004c9d 	.word	0x08004c9d
 8004cd8:	08004c9d 	.word	0x08004c9d
 8004cdc:	08004c9d 	.word	0x08004c9d
 8004ce0:	08004e25 	.word	0x08004e25
 8004ce4:	08004d4d 	.word	0x08004d4d
 8004ce8:	08004ddf 	.word	0x08004ddf
 8004cec:	08004c9d 	.word	0x08004c9d
 8004cf0:	08004c9d 	.word	0x08004c9d
 8004cf4:	08004e47 	.word	0x08004e47
 8004cf8:	08004c9d 	.word	0x08004c9d
 8004cfc:	08004d4d 	.word	0x08004d4d
 8004d00:	08004c9d 	.word	0x08004c9d
 8004d04:	08004c9d 	.word	0x08004c9d
 8004d08:	08004de7 	.word	0x08004de7
 8004d0c:	682b      	ldr	r3, [r5, #0]
 8004d0e:	1d1a      	adds	r2, r3, #4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	602a      	str	r2, [r5, #0]
 8004d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e09f      	b.n	8004e60 <_printf_i+0x1ec>
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	682b      	ldr	r3, [r5, #0]
 8004d24:	0607      	lsls	r7, r0, #24
 8004d26:	f103 0104 	add.w	r1, r3, #4
 8004d2a:	6029      	str	r1, [r5, #0]
 8004d2c:	d501      	bpl.n	8004d32 <_printf_i+0xbe>
 8004d2e:	681e      	ldr	r6, [r3, #0]
 8004d30:	e003      	b.n	8004d3a <_printf_i+0xc6>
 8004d32:	0646      	lsls	r6, r0, #25
 8004d34:	d5fb      	bpl.n	8004d2e <_printf_i+0xba>
 8004d36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d3a:	2e00      	cmp	r6, #0
 8004d3c:	da03      	bge.n	8004d46 <_printf_i+0xd2>
 8004d3e:	232d      	movs	r3, #45	; 0x2d
 8004d40:	4276      	negs	r6, r6
 8004d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d46:	485a      	ldr	r0, [pc, #360]	; (8004eb0 <_printf_i+0x23c>)
 8004d48:	230a      	movs	r3, #10
 8004d4a:	e012      	b.n	8004d72 <_printf_i+0xfe>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	1d19      	adds	r1, r3, #4
 8004d52:	6029      	str	r1, [r5, #0]
 8004d54:	0605      	lsls	r5, r0, #24
 8004d56:	d501      	bpl.n	8004d5c <_printf_i+0xe8>
 8004d58:	681e      	ldr	r6, [r3, #0]
 8004d5a:	e002      	b.n	8004d62 <_printf_i+0xee>
 8004d5c:	0641      	lsls	r1, r0, #25
 8004d5e:	d5fb      	bpl.n	8004d58 <_printf_i+0xe4>
 8004d60:	881e      	ldrh	r6, [r3, #0]
 8004d62:	4853      	ldr	r0, [pc, #332]	; (8004eb0 <_printf_i+0x23c>)
 8004d64:	2f6f      	cmp	r7, #111	; 0x6f
 8004d66:	bf0c      	ite	eq
 8004d68:	2308      	moveq	r3, #8
 8004d6a:	230a      	movne	r3, #10
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d72:	6865      	ldr	r5, [r4, #4]
 8004d74:	60a5      	str	r5, [r4, #8]
 8004d76:	2d00      	cmp	r5, #0
 8004d78:	bfa2      	ittt	ge
 8004d7a:	6821      	ldrge	r1, [r4, #0]
 8004d7c:	f021 0104 	bicge.w	r1, r1, #4
 8004d80:	6021      	strge	r1, [r4, #0]
 8004d82:	b90e      	cbnz	r6, 8004d88 <_printf_i+0x114>
 8004d84:	2d00      	cmp	r5, #0
 8004d86:	d04b      	beq.n	8004e20 <_printf_i+0x1ac>
 8004d88:	4615      	mov	r5, r2
 8004d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d92:	5dc7      	ldrb	r7, [r0, r7]
 8004d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d98:	4637      	mov	r7, r6
 8004d9a:	42bb      	cmp	r3, r7
 8004d9c:	460e      	mov	r6, r1
 8004d9e:	d9f4      	bls.n	8004d8a <_printf_i+0x116>
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d10b      	bne.n	8004dbc <_printf_i+0x148>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	07de      	lsls	r6, r3, #31
 8004da8:	d508      	bpl.n	8004dbc <_printf_i+0x148>
 8004daa:	6923      	ldr	r3, [r4, #16]
 8004dac:	6861      	ldr	r1, [r4, #4]
 8004dae:	4299      	cmp	r1, r3
 8004db0:	bfde      	ittt	le
 8004db2:	2330      	movle	r3, #48	; 0x30
 8004db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004db8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004dbc:	1b52      	subs	r2, r2, r5
 8004dbe:	6122      	str	r2, [r4, #16]
 8004dc0:	f8cd a000 	str.w	sl, [sp]
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	aa03      	add	r2, sp, #12
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4640      	mov	r0, r8
 8004dcc:	f7ff fee4 	bl	8004b98 <_printf_common>
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d14a      	bne.n	8004e6a <_printf_i+0x1f6>
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dd8:	b004      	add	sp, #16
 8004dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	f043 0320 	orr.w	r3, r3, #32
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	4833      	ldr	r0, [pc, #204]	; (8004eb4 <_printf_i+0x240>)
 8004de8:	2778      	movs	r7, #120	; 0x78
 8004dea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	6829      	ldr	r1, [r5, #0]
 8004df2:	061f      	lsls	r7, r3, #24
 8004df4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004df8:	d402      	bmi.n	8004e00 <_printf_i+0x18c>
 8004dfa:	065f      	lsls	r7, r3, #25
 8004dfc:	bf48      	it	mi
 8004dfe:	b2b6      	uxthmi	r6, r6
 8004e00:	07df      	lsls	r7, r3, #31
 8004e02:	bf48      	it	mi
 8004e04:	f043 0320 	orrmi.w	r3, r3, #32
 8004e08:	6029      	str	r1, [r5, #0]
 8004e0a:	bf48      	it	mi
 8004e0c:	6023      	strmi	r3, [r4, #0]
 8004e0e:	b91e      	cbnz	r6, 8004e18 <_printf_i+0x1a4>
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	f023 0320 	bic.w	r3, r3, #32
 8004e16:	6023      	str	r3, [r4, #0]
 8004e18:	2310      	movs	r3, #16
 8004e1a:	e7a7      	b.n	8004d6c <_printf_i+0xf8>
 8004e1c:	4824      	ldr	r0, [pc, #144]	; (8004eb0 <_printf_i+0x23c>)
 8004e1e:	e7e4      	b.n	8004dea <_printf_i+0x176>
 8004e20:	4615      	mov	r5, r2
 8004e22:	e7bd      	b.n	8004da0 <_printf_i+0x12c>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	6826      	ldr	r6, [r4, #0]
 8004e28:	6961      	ldr	r1, [r4, #20]
 8004e2a:	1d18      	adds	r0, r3, #4
 8004e2c:	6028      	str	r0, [r5, #0]
 8004e2e:	0635      	lsls	r5, r6, #24
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	d501      	bpl.n	8004e38 <_printf_i+0x1c4>
 8004e34:	6019      	str	r1, [r3, #0]
 8004e36:	e002      	b.n	8004e3e <_printf_i+0x1ca>
 8004e38:	0670      	lsls	r0, r6, #25
 8004e3a:	d5fb      	bpl.n	8004e34 <_printf_i+0x1c0>
 8004e3c:	8019      	strh	r1, [r3, #0]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	6123      	str	r3, [r4, #16]
 8004e42:	4615      	mov	r5, r2
 8004e44:	e7bc      	b.n	8004dc0 <_printf_i+0x14c>
 8004e46:	682b      	ldr	r3, [r5, #0]
 8004e48:	1d1a      	adds	r2, r3, #4
 8004e4a:	602a      	str	r2, [r5, #0]
 8004e4c:	681d      	ldr	r5, [r3, #0]
 8004e4e:	6862      	ldr	r2, [r4, #4]
 8004e50:	2100      	movs	r1, #0
 8004e52:	4628      	mov	r0, r5
 8004e54:	f7fb f9d4 	bl	8000200 <memchr>
 8004e58:	b108      	cbz	r0, 8004e5e <_printf_i+0x1ea>
 8004e5a:	1b40      	subs	r0, r0, r5
 8004e5c:	6060      	str	r0, [r4, #4]
 8004e5e:	6863      	ldr	r3, [r4, #4]
 8004e60:	6123      	str	r3, [r4, #16]
 8004e62:	2300      	movs	r3, #0
 8004e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e68:	e7aa      	b.n	8004dc0 <_printf_i+0x14c>
 8004e6a:	6923      	ldr	r3, [r4, #16]
 8004e6c:	462a      	mov	r2, r5
 8004e6e:	4649      	mov	r1, r9
 8004e70:	4640      	mov	r0, r8
 8004e72:	47d0      	blx	sl
 8004e74:	3001      	adds	r0, #1
 8004e76:	d0ad      	beq.n	8004dd4 <_printf_i+0x160>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	079b      	lsls	r3, r3, #30
 8004e7c:	d413      	bmi.n	8004ea6 <_printf_i+0x232>
 8004e7e:	68e0      	ldr	r0, [r4, #12]
 8004e80:	9b03      	ldr	r3, [sp, #12]
 8004e82:	4298      	cmp	r0, r3
 8004e84:	bfb8      	it	lt
 8004e86:	4618      	movlt	r0, r3
 8004e88:	e7a6      	b.n	8004dd8 <_printf_i+0x164>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4632      	mov	r2, r6
 8004e8e:	4649      	mov	r1, r9
 8004e90:	4640      	mov	r0, r8
 8004e92:	47d0      	blx	sl
 8004e94:	3001      	adds	r0, #1
 8004e96:	d09d      	beq.n	8004dd4 <_printf_i+0x160>
 8004e98:	3501      	adds	r5, #1
 8004e9a:	68e3      	ldr	r3, [r4, #12]
 8004e9c:	9903      	ldr	r1, [sp, #12]
 8004e9e:	1a5b      	subs	r3, r3, r1
 8004ea0:	42ab      	cmp	r3, r5
 8004ea2:	dcf2      	bgt.n	8004e8a <_printf_i+0x216>
 8004ea4:	e7eb      	b.n	8004e7e <_printf_i+0x20a>
 8004ea6:	2500      	movs	r5, #0
 8004ea8:	f104 0619 	add.w	r6, r4, #25
 8004eac:	e7f5      	b.n	8004e9a <_printf_i+0x226>
 8004eae:	bf00      	nop
 8004eb0:	080050c9 	.word	0x080050c9
 8004eb4:	080050da 	.word	0x080050da

08004eb8 <memmove>:
 8004eb8:	4288      	cmp	r0, r1
 8004eba:	b510      	push	{r4, lr}
 8004ebc:	eb01 0402 	add.w	r4, r1, r2
 8004ec0:	d902      	bls.n	8004ec8 <memmove+0x10>
 8004ec2:	4284      	cmp	r4, r0
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	d807      	bhi.n	8004ed8 <memmove+0x20>
 8004ec8:	1e43      	subs	r3, r0, #1
 8004eca:	42a1      	cmp	r1, r4
 8004ecc:	d008      	beq.n	8004ee0 <memmove+0x28>
 8004ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ed6:	e7f8      	b.n	8004eca <memmove+0x12>
 8004ed8:	4402      	add	r2, r0
 8004eda:	4601      	mov	r1, r0
 8004edc:	428a      	cmp	r2, r1
 8004ede:	d100      	bne.n	8004ee2 <memmove+0x2a>
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eea:	e7f7      	b.n	8004edc <memmove+0x24>

08004eec <_sbrk_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4d06      	ldr	r5, [pc, #24]	; (8004f08 <_sbrk_r+0x1c>)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	602b      	str	r3, [r5, #0]
 8004ef8:	f7fb fc2e 	bl	8000758 <_sbrk>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_sbrk_r+0x1a>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_sbrk_r+0x1a>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	200002c0 	.word	0x200002c0

08004f0c <memcpy>:
 8004f0c:	440a      	add	r2, r1
 8004f0e:	4291      	cmp	r1, r2
 8004f10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f14:	d100      	bne.n	8004f18 <memcpy+0xc>
 8004f16:	4770      	bx	lr
 8004f18:	b510      	push	{r4, lr}
 8004f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f22:	4291      	cmp	r1, r2
 8004f24:	d1f9      	bne.n	8004f1a <memcpy+0xe>
 8004f26:	bd10      	pop	{r4, pc}

08004f28 <_realloc_r>:
 8004f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2c:	4680      	mov	r8, r0
 8004f2e:	4614      	mov	r4, r2
 8004f30:	460e      	mov	r6, r1
 8004f32:	b921      	cbnz	r1, 8004f3e <_realloc_r+0x16>
 8004f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f38:	4611      	mov	r1, r2
 8004f3a:	f7ff bc49 	b.w	80047d0 <_malloc_r>
 8004f3e:	b92a      	cbnz	r2, 8004f4c <_realloc_r+0x24>
 8004f40:	f7ff fbda 	bl	80046f8 <_free_r>
 8004f44:	4625      	mov	r5, r4
 8004f46:	4628      	mov	r0, r5
 8004f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f4c:	f000 f81b 	bl	8004f86 <_malloc_usable_size_r>
 8004f50:	4284      	cmp	r4, r0
 8004f52:	4607      	mov	r7, r0
 8004f54:	d802      	bhi.n	8004f5c <_realloc_r+0x34>
 8004f56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f5a:	d812      	bhi.n	8004f82 <_realloc_r+0x5a>
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	4640      	mov	r0, r8
 8004f60:	f7ff fc36 	bl	80047d0 <_malloc_r>
 8004f64:	4605      	mov	r5, r0
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d0ed      	beq.n	8004f46 <_realloc_r+0x1e>
 8004f6a:	42bc      	cmp	r4, r7
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	4631      	mov	r1, r6
 8004f70:	bf28      	it	cs
 8004f72:	463a      	movcs	r2, r7
 8004f74:	f7ff ffca 	bl	8004f0c <memcpy>
 8004f78:	4631      	mov	r1, r6
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	f7ff fbbc 	bl	80046f8 <_free_r>
 8004f80:	e7e1      	b.n	8004f46 <_realloc_r+0x1e>
 8004f82:	4635      	mov	r5, r6
 8004f84:	e7df      	b.n	8004f46 <_realloc_r+0x1e>

08004f86 <_malloc_usable_size_r>:
 8004f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f8a:	1f18      	subs	r0, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bfbc      	itt	lt
 8004f90:	580b      	ldrlt	r3, [r1, r0]
 8004f92:	18c0      	addlt	r0, r0, r3
 8004f94:	4770      	bx	lr
	...

08004f98 <_init>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	bf00      	nop
 8004f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9e:	bc08      	pop	{r3}
 8004fa0:	469e      	mov	lr, r3
 8004fa2:	4770      	bx	lr

08004fa4 <_fini>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	bf00      	nop
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr
