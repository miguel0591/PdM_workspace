
Proyecto Final - PdM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004294  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f0  080044f0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044f8  080044f8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          0000021c  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a224  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022ba  00000000  00000000  0002a2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a08  00000000  00000000  0002c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000786  00000000  00000000  0002cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025d48  00000000  00000000  0002d746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f10f  00000000  00000000  0005348e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df3e6  00000000  00000000  0006259d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002b4c  00000000  00000000  00141984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  001444d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800442c 	.word	0x0800442c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	0800442c 	.word	0x0800442c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2220      	movs	r2, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fabc 	bl	8003b24 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ac:	4b2f      	ldr	r3, [pc, #188]	; (800066c <MX_ADC1_Init+0xe0>)
 80005ae:	4a30      	ldr	r2, [pc, #192]	; (8000670 <MX_ADC1_Init+0xe4>)
 80005b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005b2:	4b2e      	ldr	r3, [pc, #184]	; (800066c <MX_ADC1_Init+0xe0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b8:	4b2c      	ldr	r3, [pc, #176]	; (800066c <MX_ADC1_Init+0xe0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <MX_ADC1_Init+0xe0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <MX_ADC1_Init+0xe0>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <MX_ADC1_Init+0xe0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d2:	4b26      	ldr	r3, [pc, #152]	; (800066c <MX_ADC1_Init+0xe0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <MX_ADC1_Init+0xe0>)
 80005da:	4a26      	ldr	r2, [pc, #152]	; (8000674 <MX_ADC1_Init+0xe8>)
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005de:	4b23      	ldr	r3, [pc, #140]	; (800066c <MX_ADC1_Init+0xe0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e4:	4b21      	ldr	r3, [pc, #132]	; (800066c <MX_ADC1_Init+0xe0>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <MX_ADC1_Init+0xe0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <MX_ADC1_Init+0xe0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f8:	481c      	ldr	r0, [pc, #112]	; (800066c <MX_ADC1_Init+0xe0>)
 80005fa:	f001 f907 	bl	800180c <HAL_ADC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000604:	f000 fb4a 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000608:	2305      	movs	r3, #5
 800060a:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4619      	mov	r1, r3
 800061a:	4814      	ldr	r0, [pc, #80]	; (800066c <MX_ADC1_Init+0xe0>)
 800061c:	f001 faa4 	bl	8001b68 <HAL_ADC_ConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000626:	f000 fb39 	bl	8000c9c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800062a:	2305      	movs	r3, #5
 800062c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_ADC1_Init+0xec>)
 8000640:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000642:	2300      	movs	r3, #0
 8000644:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	4619      	mov	r1, r3
 8000652:	4806      	ldr	r0, [pc, #24]	; (800066c <MX_ADC1_Init+0xe0>)
 8000654:	f001 fcb6 	bl	8001fc4 <HAL_ADCEx_InjectedConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800065e:	f000 fb1d 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	3730      	adds	r7, #48	; 0x30
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000007c 	.word	0x2000007c
 8000670:	40012000 	.word	0x40012000
 8000674:	0f000001 	.word	0x0f000001
 8000678:	000f0001 	.word	0x000f0001

0800067c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <HAL_ADC_MspInit+0x7c>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d127      	bne.n	80006ee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_ADC_MspInit+0x80>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <HAL_ADC_MspInit+0x80>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ac:	6453      	str	r3, [r2, #68]	; 0x44
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <HAL_ADC_MspInit+0x80>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_ADC_MspInit+0x80>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <HAL_ADC_MspInit+0x80>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <HAL_ADC_MspInit+0x80>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006d6:	2320      	movs	r3, #32
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006da:	2303      	movs	r3, #3
 80006dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <HAL_ADC_MspInit+0x84>)
 80006ea:	f001 feeb 	bl	80024c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40012000 	.word	0x40012000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020000 	.word	0x40020000

08000704 <MX_GPIO_Init>:
     PB9   ------> LTDC_B7
     PE0   ------> FMC_NBL0
     PE1   ------> FMC_NBL1
*/
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	; 0x38
 8000708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
 800071e:	4bb2      	ldr	r3, [pc, #712]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4ab1      	ldr	r2, [pc, #708]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4baf      	ldr	r3, [pc, #700]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	623b      	str	r3, [r7, #32]
 8000734:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
 800073a:	4bab      	ldr	r3, [pc, #684]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4aaa      	ldr	r2, [pc, #680]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000740:	f043 0320 	orr.w	r3, r3, #32
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4ba8      	ldr	r3, [pc, #672]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0320 	and.w	r3, r3, #32
 800074e:	61fb      	str	r3, [r7, #28]
 8000750:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	4ba4      	ldr	r3, [pc, #656]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4aa3      	ldr	r2, [pc, #652]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4ba1      	ldr	r3, [pc, #644]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	4b9d      	ldr	r3, [pc, #628]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a9c      	ldr	r2, [pc, #624]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b9a      	ldr	r3, [pc, #616]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b96      	ldr	r3, [pc, #600]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a95      	ldr	r2, [pc, #596]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b93      	ldr	r3, [pc, #588]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b8f      	ldr	r3, [pc, #572]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a8e      	ldr	r2, [pc, #568]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b8c      	ldr	r3, [pc, #560]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b88      	ldr	r3, [pc, #544]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a87      	ldr	r2, [pc, #540]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b85      	ldr	r3, [pc, #532]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b81      	ldr	r3, [pc, #516]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a80      	ldr	r2, [pc, #512]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b7e      	ldr	r3, [pc, #504]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2116      	movs	r1, #22
 80007fe:	487b      	ldr	r0, [pc, #492]	; (80009ec <MX_GPIO_Init+0x2e8>)
 8000800:	f002 f80c 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	4879      	ldr	r0, [pc, #484]	; (80009f0 <MX_GPIO_Init+0x2ec>)
 800080a:	f002 f807 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000814:	4877      	ldr	r0, [pc, #476]	; (80009f4 <MX_GPIO_Init+0x2f0>)
 8000816:	f002 f801 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000820:	4875      	ldr	r0, [pc, #468]	; (80009f8 <MX_GPIO_Init+0x2f4>)
 8000822:	f001 fffb 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000826:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000838:	230c      	movs	r3, #12
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	486e      	ldr	r0, [pc, #440]	; (80009fc <MX_GPIO_Init+0x2f8>)
 8000844:	f001 fe3e 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000848:	f44f 7360 	mov.w	r3, #896	; 0x380
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800085a:	2305      	movs	r3, #5
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4865      	ldr	r0, [pc, #404]	; (80009fc <MX_GPIO_Init+0x2f8>)
 8000866:	f001 fe2d 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800086a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800087c:	230e      	movs	r3, #14
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	485d      	ldr	r0, [pc, #372]	; (80009fc <MX_GPIO_Init+0x2f8>)
 8000888:	f001 fe1c 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800088c:	2301      	movs	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800089c:	230c      	movs	r3, #12
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4851      	ldr	r0, [pc, #324]	; (80009ec <MX_GPIO_Init+0x2e8>)
 80008a8:	f001 fe0c 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008ac:	2316      	movs	r3, #22
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	484a      	ldr	r0, [pc, #296]	; (80009ec <MX_GPIO_Init+0x2e8>)
 80008c4:	f001 fdfe 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008c8:	f248 0307 	movw	r3, #32775	; 0x8007
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008dc:	4619      	mov	r1, r3
 80008de:	4844      	ldr	r0, [pc, #272]	; (80009f0 <MX_GPIO_Init+0x2ec>)
 80008e0:	f001 fdf0 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80008e4:	f641 0358 	movw	r3, #6232	; 0x1858
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008f6:	230e      	movs	r3, #14
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	483b      	ldr	r0, [pc, #236]	; (80009f0 <MX_GPIO_Init+0x2ec>)
 8000902:	f001 fddf 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	4834      	ldr	r0, [pc, #208]	; (80009f0 <MX_GPIO_Init+0x2ec>)
 800091e:	f001 fdd1 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000922:	2320      	movs	r3, #32
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000926:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	482d      	ldr	r0, [pc, #180]	; (80009ec <MX_GPIO_Init+0x2e8>)
 8000938:	f001 fdc4 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800093c:	2303      	movs	r3, #3
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800094c:	2309      	movs	r3, #9
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	482a      	ldr	r0, [pc, #168]	; (8000a00 <MX_GPIO_Init+0x2fc>)
 8000958:	f001 fdb4 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800095c:	2304      	movs	r3, #4
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	4824      	ldr	r0, [pc, #144]	; (8000a00 <MX_GPIO_Init+0x2fc>)
 8000970:	f001 fda8 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000974:	f248 1333 	movw	r3, #33075	; 0x8133
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000986:	230c      	movs	r3, #12
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4819      	ldr	r0, [pc, #100]	; (80009f8 <MX_GPIO_Init+0x2f4>)
 8000992:	f001 fd97 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000996:	f64f 7383 	movw	r3, #65411	; 0xff83
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a8:	230c      	movs	r3, #12
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <MX_GPIO_Init+0x300>)
 80009b4:	f001 fd86 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80009b8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ca:	230e      	movs	r3, #14
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	480a      	ldr	r0, [pc, #40]	; (8000a00 <MX_GPIO_Init+0x2fc>)
 80009d6:	f001 fd75 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80009da:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80009e4:	e010      	b.n	8000a08 <MX_GPIO_Init+0x304>
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40021800 	.word	0x40021800
 80009fc:	40021400 	.word	0x40021400
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a10:	230c      	movs	r3, #12
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	485a      	ldr	r0, [pc, #360]	; (8000b84 <MX_GPIO_Init+0x480>)
 8000a1c:	f001 fd52 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	4853      	ldr	r0, [pc, #332]	; (8000b84 <MX_GPIO_Init+0x480>)
 8000a36:	f001 fd45 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a3a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	484c      	ldr	r0, [pc, #304]	; (8000b88 <MX_GPIO_Init+0x484>)
 8000a58:	f001 fd34 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4845      	ldr	r0, [pc, #276]	; (8000b88 <MX_GPIO_Init+0x484>)
 8000a72:	f001 fd27 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	483e      	ldr	r0, [pc, #248]	; (8000b88 <MX_GPIO_Init+0x484>)
 8000a90:	f001 fd18 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000a94:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aa6:	230e      	movs	r3, #14
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4836      	ldr	r0, [pc, #216]	; (8000b8c <MX_GPIO_Init+0x488>)
 8000ab2:	f001 fd07 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000ab6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac8:	230e      	movs	r3, #14
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	482f      	ldr	r0, [pc, #188]	; (8000b90 <MX_GPIO_Init+0x48c>)
 8000ad4:	f001 fcf6 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ad8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aea:	2307      	movs	r3, #7
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4827      	ldr	r0, [pc, #156]	; (8000b94 <MX_GPIO_Init+0x490>)
 8000af6:	f001 fce5 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000afa:	2348      	movs	r3, #72	; 0x48
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b0a:	230e      	movs	r3, #14
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	481c      	ldr	r0, [pc, #112]	; (8000b88 <MX_GPIO_Init+0x484>)
 8000b16:	f001 fcd5 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b2c:	2309      	movs	r3, #9
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4815      	ldr	r0, [pc, #84]	; (8000b8c <MX_GPIO_Init+0x488>)
 8000b38:	f001 fcc4 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000b3c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_GPIO_Init+0x488>)
 8000b56:	f001 fcb5 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b5a:	2360      	movs	r3, #96	; 0x60
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <MX_GPIO_Init+0x480>)
 8000b76:	f001 fca5 	bl	80024c4 <HAL_GPIO_Init>

}
 8000b7a:	bf00      	nop
 8000b7c:	3738      	adds	r7, #56	; 0x38
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40020400 	.word	0x40020400
 8000b88:	40020c00 	.word	0x40020c00
 8000b8c:	40021800 	.word	0x40021800
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40020000 	.word	0x40020000

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9c:	f000 fda0 	bl	80016e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba0:	f000 f810 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba4:	f7ff fdae 	bl	8000704 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000ba8:	f000 fcc2 	bl	8001530 <MX_I2C3_Init>
  MX_ADC1_Init();
 8000bac:	f7ff fcee 	bl	800058c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCD_2x16_init();
 8000bb0:	f000 f9ea 	bl	8000f88 <LCD_2x16_init>
  MEF_init();
 8000bb4:	f000 fb6c 	bl	8001290 <MEF_init>
  SENSOR_TEMP_init();
 8000bb8:	f000 fc74 	bl	80014a4 <SENSOR_TEMP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	MEF_update();
 8000bbc:	f000 fb7c 	bl	80012b8 <MEF_update>
 8000bc0:	e7fc      	b.n	8000bbc <main+0x24>
	...

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	; 0x50
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	2230      	movs	r2, #48	; 0x30
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 ffa6 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <SystemClock_Config+0xd0>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <SystemClock_Config+0xd0>)
 8000bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <SystemClock_Config+0xd0>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <SystemClock_Config+0xd4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <SystemClock_Config+0xd4>)
 8000c12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <SystemClock_Config+0xd4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c24:	2302      	movs	r3, #2
 8000c26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c30:	2302      	movs	r3, #2
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000c3c:	2332      	movs	r3, #50	; 0x32
 8000c3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c40:	2304      	movs	r3, #4
 8000c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c44:	2307      	movs	r3, #7
 8000c46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0320 	add.w	r3, r7, #32
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 fac5 	bl	80031dc <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c58:	f000 f820 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2302      	movs	r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000c68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 fd26 	bl	80036cc <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c86:	f000 f809 	bl	8000c9c <Error_Handler>
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	3750      	adds	r7, #80	; 0x50
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40007000 	.word	0x40007000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ce6:	2007      	movs	r0, #7
 8000ce8:	f001 fbb8 	bl	800245c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 fd1e 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f002 feda 	bl	8003b34 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20030000 	.word	0x20030000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	200000c4 	.word	0x200000c4
 8000db4:	20000280 	.word	0x20000280

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de2:	490e      	ldr	r1, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df8:	4c0b      	ldr	r4, [pc, #44]	; (8000e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e06:	f7ff ffd7 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f002 fe99 	bl	8003b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fec3 	bl	8000b98 <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e20:	08004500 	.word	0x08004500
  ldr r2, =_sbss
 8000e24:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e28:	2000027c 	.word	0x2000027c

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>

08000e2e <delayInit>:
 */
#include "API_delay.h"


//Funcion de Inicializacion
void delayInit( delay_t* delay, tick_t duration ){
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	721a      	strb	r2, [r3, #8]
	delay->startTime = HAL_GetTick();
 8000e44:	f000 fcb2 	bl	80017ac <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	601a      	str	r2, [r3, #0]
};
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <delayRead>:

//Funcion de control
bool_t delayRead( delay_t* delay ){
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	uint8_t flag;
	if ((HAL_GetTick() - delay->startTime) <= delay->duration) {
 8000e5e:	f000 fca5 	bl	80017ac <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	1ad2      	subs	r2, r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d805      	bhi.n	8000e7e <delayRead+0x28>
		delay->running = false;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	721a      	strb	r2, [r3, #8]
		flag = false;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	e004      	b.n	8000e88 <delayRead+0x32>
	}else{
		delay->running = true;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	721a      	strb	r2, [r3, #8]
		flag = true;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
	}
	return flag;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf14      	ite	ne
 8000e8e:	2301      	movne	r3, #1
 8000e90:	2300      	moveq	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <delayWrite>:

//Funcion de cambio de duracion
void delayWrite( delay_t * delay, tick_t duration ){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	721a      	strb	r2, [r3, #8]
	delay->startTime = HAL_GetTick();
 8000eb2:	f000 fc7b 	bl	80017ac <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	601a      	str	r2, [r3, #0]
};
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <LCD_2x16_command>:
#ifdef MOD_4BIT_I2C

/*******************************************************************************************
 *                             Funciones Privadas Necesarias                               *
 *******************************************************************************************/
static LCD_Status_t LCD_2x16_command(uint8_t cmd){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd_h, cmd_l;
	uint8_t data[4];
	cmd_h = (cmd) & 0xF0;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f023 030f 	bic.w	r3, r3, #15
 8000ed4:	73fb      	strb	r3, [r7, #15]
	cmd_l = ((cmd) & 0x0F) << 4;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	73bb      	strb	r3, [r7, #14]
	data[0] = (cmd_h | EN_ON) | BL_ON;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	f043 030c 	orr.w	r3, r3, #12
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	723b      	strb	r3, [r7, #8]
	data[1] = (data[0]) & ~EN_ON;
 8000ee6:	7a3b      	ldrb	r3, [r7, #8]
 8000ee8:	f023 0304 	bic.w	r3, r3, #4
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	727b      	strb	r3, [r7, #9]
	data[2] = cmd_l | EN_ON | BL_ON;
 8000ef0:	7bbb      	ldrb	r3, [r7, #14]
 8000ef2:	f043 030c 	orr.w	r3, r3, #12
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	72bb      	strb	r3, [r7, #10]
	data[3] = (data[2]) & ~EN_ON;
 8000efa:	7abb      	ldrb	r3, [r7, #10]
 8000efc:	f023 0304 	bic.w	r3, r3, #4
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	72fb      	strb	r3, [r7, #11]
	LCD_2x16_Send_I2C(data);
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fbd7 	bl	80016bc <LCD_2x16_Send_I2C>
	return OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <LCD_2x16_char>:
static LCD_Status_t LCD_2x16_char(char letra){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	char letra_h, letra_l;
	uint8_t data[4];
	letra_h = (letra) & 0xF0;
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f023 030f 	bic.w	r3, r3, #15
 8000f28:	73fb      	strb	r3, [r7, #15]
	letra_l = ((letra) & 0x0F) << 4;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	73bb      	strb	r3, [r7, #14]
	data[0] = ((letra_h | EN_ON) | BL_ON) | RS_ON;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	f043 030d 	orr.w	r3, r3, #13
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	723b      	strb	r3, [r7, #8]
	data[1] = (data[0]) & ~EN_ON;
 8000f3a:	7a3b      	ldrb	r3, [r7, #8]
 8000f3c:	f023 0304 	bic.w	r3, r3, #4
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	727b      	strb	r3, [r7, #9]
	data[2] = letra_l | EN_ON | BL_ON |RS_ON;
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	f043 030d 	orr.w	r3, r3, #13
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	72bb      	strb	r3, [r7, #10]
	data[3] = (data[2]) & ~EN_ON;
 8000f4e:	7abb      	ldrb	r3, [r7, #10]
 8000f50:	f023 0304 	bic.w	r3, r3, #4
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	72fb      	strb	r3, [r7, #11]
	LCD_2x16_Send_I2C(data);
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fbad 	bl	80016bc <LCD_2x16_Send_I2C>
	return OK;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <LCD_2x16_delay>:
static LCD_Status_t LCD_2x16_delay(uint8_t delay){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(delay);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fc23 	bl	80017c4 <HAL_Delay>
	return OK;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <LCD_2x16_init>:


/*******************************************************************************************
 *                                    Funciones Publicas                                   *
 *******************************************************************************************/
LCD_Status_t LCD_2x16_init(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	LCD_2x16_delay(50);                //Tiempo de espera necesario desde el encendio >40ms
 8000f8c:	2032      	movs	r0, #50	; 0x32
 8000f8e:	f7ff ffed 	bl	8000f6c <LCD_2x16_delay>
	LCD_Send_RawData(0x3C);
 8000f92:	203c      	movs	r0, #60	; 0x3c
 8000f94:	f000 fb76 	bl	8001684 <LCD_Send_RawData>
	LCD_2x16_delay(5);
 8000f98:	2005      	movs	r0, #5
 8000f9a:	f7ff ffe7 	bl	8000f6c <LCD_2x16_delay>
	LCD_Send_RawData(0x3C);
 8000f9e:	203c      	movs	r0, #60	; 0x3c
 8000fa0:	f000 fb70 	bl	8001684 <LCD_Send_RawData>
	LCD_2x16_delay(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff ffe1 	bl	8000f6c <LCD_2x16_delay>
	LCD_Send_RawData(0x3C);
 8000faa:	203c      	movs	r0, #60	; 0x3c
 8000fac:	f000 fb6a 	bl	8001684 <LCD_Send_RawData>
	LCD_2x16_delay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff ffdb 	bl	8000f6c <LCD_2x16_delay>
	LCD_Send_RawData(0x2C);    // desde aqui funciona en 4 bits.
 8000fb6:	202c      	movs	r0, #44	; 0x2c
 8000fb8:	f000 fb64 	bl	8001684 <LCD_Send_RawData>
	LCD_2x16_delay(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff ffd5 	bl	8000f6c <LCD_2x16_delay>

	LCD_2x16_command(FUNCTION_SET);
 8000fc2:	2028      	movs	r0, #40	; 0x28
 8000fc4:	f7ff ff7e 	bl	8000ec4 <LCD_2x16_command>
	LCD_2x16_delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff ffcf 	bl	8000f6c <LCD_2x16_delay>
	LCD_2x16_command(DISPLAY_OFF);
 8000fce:	2008      	movs	r0, #8
 8000fd0:	f7ff ff78 	bl	8000ec4 <LCD_2x16_command>
	LCD_2x16_delay(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff ffc9 	bl	8000f6c <LCD_2x16_delay>
	LCD_2x16_command(DISPLAY_CLEAR);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff ff72 	bl	8000ec4 <LCD_2x16_command>
	LCD_2x16_delay(2);
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f7ff ffc3 	bl	8000f6c <LCD_2x16_delay>
	LCD_2x16_command(ENTRY_MODE_SET);
 8000fe6:	2006      	movs	r0, #6
 8000fe8:	f7ff ff6c 	bl	8000ec4 <LCD_2x16_command>
	LCD_2x16_delay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f7ff ffbd 	bl	8000f6c <LCD_2x16_delay>
	LCD_2x16_command(DISPLAY_0N);
 8000ff2:	200c      	movs	r0, #12
 8000ff4:	f7ff ff66 	bl	8000ec4 <LCD_2x16_command>
	LCD_2x16_delay(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff ffb7 	bl	8000f6c <LCD_2x16_delay>
	return OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	bd80      	pop	{r7, pc}

08001004 <LCD_2x16_cursor>:

LCD_Status_t LCD_2x16_cursor(uint8_t linea, uint8_t pos){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	460a      	mov	r2, r1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	71bb      	strb	r3, [r7, #6]
	if(linea <= 0 && linea > 2){
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d104      	bne.n	8001024 <LCD_2x16_cursor+0x20>
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <LCD_2x16_cursor+0x20>
		return NO_OK;
 8001020:	2301      	movs	r3, #1
 8001022:	e054      	b.n	80010ce <LCD_2x16_cursor+0xca>
	}
	if(pos <= 0 && pos > 16){
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d104      	bne.n	8001034 <LCD_2x16_cursor+0x30>
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	2b10      	cmp	r3, #16
 800102e:	d901      	bls.n	8001034 <LCD_2x16_cursor+0x30>
		return NO_OK;
 8001030:	2301      	movs	r3, #1
 8001032:	e04c      	b.n	80010ce <LCD_2x16_cursor+0xca>
	}

	char dir_h, dir_l;
	uint8_t dir, data[4];
	if(linea == 1){
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d122      	bne.n	8001080 <LCD_2x16_cursor+0x7c>
		dir = L1_COL1 + (pos - 1);
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	337f      	adds	r3, #127	; 0x7f
 800103e:	73fb      	strb	r3, [r7, #15]
		dir_h = (dir)& 0xF0;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f023 030f 	bic.w	r3, r3, #15
 8001046:	73bb      	strb	r3, [r7, #14]
		dir_l = ((dir)& 0x0F) << 4;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	737b      	strb	r3, [r7, #13]
		data[0] = ((dir_h | EN_ON) | BL_ON);
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	f043 030c 	orr.w	r3, r3, #12
 8001054:	b2db      	uxtb	r3, r3
 8001056:	723b      	strb	r3, [r7, #8]
		data[1] = (data[0]) & ~EN_ON;
 8001058:	7a3b      	ldrb	r3, [r7, #8]
 800105a:	f023 0304 	bic.w	r3, r3, #4
 800105e:	b2db      	uxtb	r3, r3
 8001060:	727b      	strb	r3, [r7, #9]
		data[2] = dir_l | EN_ON | BL_ON;
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	f043 030c 	orr.w	r3, r3, #12
 8001068:	b2db      	uxtb	r3, r3
 800106a:	72bb      	strb	r3, [r7, #10]
		data[3] = (data[2]) & ~EN_ON;
 800106c:	7abb      	ldrb	r3, [r7, #10]
 800106e:	f023 0304 	bic.w	r3, r3, #4
 8001072:	b2db      	uxtb	r3, r3
 8001074:	72fb      	strb	r3, [r7, #11]
		LCD_2x16_Send_I2C(data);
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fb1e 	bl	80016bc <LCD_2x16_Send_I2C>
	}
	if (linea == 2){
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d122      	bne.n	80010cc <LCD_2x16_cursor+0xc8>
		dir = L2_COL1 + (pos - 1);
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	3b41      	subs	r3, #65	; 0x41
 800108a:	73fb      	strb	r3, [r7, #15]
		dir_h = (dir)& 0xF0;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	f023 030f 	bic.w	r3, r3, #15
 8001092:	73bb      	strb	r3, [r7, #14]
		dir_l = ((dir)& 0x0F) << 4;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	737b      	strb	r3, [r7, #13]
		data[0] = ((dir_h | EN_ON) | BL_ON);
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	f043 030c 	orr.w	r3, r3, #12
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	723b      	strb	r3, [r7, #8]
		data[1] = (data[0]) & ~EN_ON;
 80010a4:	7a3b      	ldrb	r3, [r7, #8]
 80010a6:	f023 0304 	bic.w	r3, r3, #4
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	727b      	strb	r3, [r7, #9]
		data[2] = dir_l | EN_ON | BL_ON;
 80010ae:	7b7b      	ldrb	r3, [r7, #13]
 80010b0:	f043 030c 	orr.w	r3, r3, #12
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	72bb      	strb	r3, [r7, #10]
		data[3] = (data[2]) & ~EN_ON;
 80010b8:	7abb      	ldrb	r3, [r7, #10]
 80010ba:	f023 0304 	bic.w	r3, r3, #4
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	72fb      	strb	r3, [r7, #11]
		LCD_2x16_Send_I2C(data);
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 faf8 	bl	80016bc <LCD_2x16_Send_I2C>
	}
	return OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <LCD_2x16_string>:
LCD_Status_t LCD_2x16_string(char * str){
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
	while (*str){
 80010de:	e006      	b.n	80010ee <LCD_2x16_string+0x18>
		LCD_2x16_char(*str++);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff15 	bl	8000f18 <LCD_2x16_char>
	while (*str){
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f4      	bne.n	80010e0 <LCD_2x16_string+0xa>
	}
	return OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <LDC_2x16_clear>:
LCD_Status_t LDC_2x16_clear(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	LCD_2x16_cursor(1, 1);
 8001104:	2101      	movs	r1, #1
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff ff7c 	bl	8001004 <LCD_2x16_cursor>
	LCD_2x16_string("                ");
 800110c:	4806      	ldr	r0, [pc, #24]	; (8001128 <LDC_2x16_clear+0x28>)
 800110e:	f7ff ffe2 	bl	80010d6 <LCD_2x16_string>
	LCD_2x16_cursor(2, 1);
 8001112:	2101      	movs	r1, #1
 8001114:	2002      	movs	r0, #2
 8001116:	f7ff ff75 	bl	8001004 <LCD_2x16_cursor>
	LCD_2x16_string("                ");
 800111a:	4803      	ldr	r0, [pc, #12]	; (8001128 <LDC_2x16_clear+0x28>)
 800111c:	f7ff ffdb 	bl	80010d6 <LCD_2x16_string>
	return OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	08004444 	.word	0x08004444

0800112c <LCD_2x16_uint16>:
LCD_Status_t LCD_2x16_cursorBlink(){
	LCD_2x16_command(DISPLAY_CURSOR_BLINK);
	return OK;
}
LCD_Status_t LCD_2x16_uint16(uint16_t valor){
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
	if(valor<0 || valor>65536){
		return NO_OK;
	}
	char valor2[3];
	sprintf(valor2, "%d",valor);
 8001136:	88fa      	ldrh	r2, [r7, #6]
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4906      	ldr	r1, [pc, #24]	; (8001158 <LCD_2x16_uint16+0x2c>)
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fcd0 	bl	8003ae4 <siprintf>
	LCD_2x16_string(valor2);
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffc4 	bl	80010d6 <LCD_2x16_string>
	return OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	08004458 	.word	0x08004458

0800115c <LCD_printEstable>:

/*******************************************************************************************
 *                             Funciones Privadas Necesarias                               *
 *******************************************************************************************/
/*funciones para imprimir en el LCD*/
static void LCD_printEstable(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	LDC_2x16_clear();
 8001160:	f7ff ffce 	bl	8001100 <LDC_2x16_clear>
	LCD_2x16_cursor(1, 1);
 8001164:	2101      	movs	r1, #1
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff ff4c 	bl	8001004 <LCD_2x16_cursor>
	LCD_2x16_string("Estado:  Estable");
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <LCD_printEstable+0x28>)
 800116e:	f7ff ffb2 	bl	80010d6 <LCD_2x16_string>
	LCD_2x16_cursor(2, 1);
 8001172:	2101      	movs	r1, #1
 8001174:	2002      	movs	r0, #2
 8001176:	f7ff ff45 	bl	8001004 <LCD_2x16_cursor>
	LCD_2x16_string("Temperatura:");
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <LCD_printEstable+0x2c>)
 800117c:	f7ff ffab 	bl	80010d6 <LCD_2x16_string>
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	0800445c 	.word	0x0800445c
 8001188:	08004470 	.word	0x08004470

0800118c <LCD_printPrecaucion>:

static void LCD_printPrecaucion(){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	LDC_2x16_clear();
 8001190:	f7ff ffb6 	bl	8001100 <LDC_2x16_clear>
	LCD_2x16_cursor(1, 1);
 8001194:	2101      	movs	r1, #1
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff ff34 	bl	8001004 <LCD_2x16_cursor>
	LCD_2x16_string("Estado: Precauc.");
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <LCD_printPrecaucion+0x28>)
 800119e:	f7ff ff9a 	bl	80010d6 <LCD_2x16_string>
	LCD_2x16_cursor(2, 1);
 80011a2:	2101      	movs	r1, #1
 80011a4:	2002      	movs	r0, #2
 80011a6:	f7ff ff2d 	bl	8001004 <LCD_2x16_cursor>
	LCD_2x16_string("Temperatura:");
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <LCD_printPrecaucion+0x2c>)
 80011ac:	f7ff ff93 	bl	80010d6 <LCD_2x16_string>

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	08004480 	.word	0x08004480
 80011b8:	08004470 	.word	0x08004470

080011bc <LCD_printPeligro>:

static void LCD_printPeligro(){
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	LDC_2x16_clear();
 80011c0:	f7ff ff9e 	bl	8001100 <LDC_2x16_clear>
	LCD_2x16_cursor(1, 1);
 80011c4:	2101      	movs	r1, #1
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff ff1c 	bl	8001004 <LCD_2x16_cursor>
	LCD_2x16_string("Estado: Peligro");
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <LCD_printPeligro+0x28>)
 80011ce:	f7ff ff82 	bl	80010d6 <LCD_2x16_string>
	LCD_2x16_cursor(2, 1);
 80011d2:	2101      	movs	r1, #1
 80011d4:	2002      	movs	r0, #2
 80011d6:	f7ff ff15 	bl	8001004 <LCD_2x16_cursor>
	LCD_2x16_string("Temperatura:");
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <LCD_printPeligro+0x2c>)
 80011dc:	f7ff ff7b 	bl	80010d6 <LCD_2x16_string>

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	08004494 	.word	0x08004494
 80011e8:	08004470 	.word	0x08004470

080011ec <LDC_printTemp>:

static void LDC_printTemp(uint16_t temp){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
	if(delayRead(&delayLCDtemp)){
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <LDC_printTemp+0x3c>)
 80011f8:	f7ff fe2d 	bl	8000e56 <delayRead>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00d      	beq.n	800121e <LDC_printTemp+0x32>
		LCD_2x16_cursor(2, 14);
 8001202:	210e      	movs	r1, #14
 8001204:	2002      	movs	r0, #2
 8001206:	f7ff fefd 	bl	8001004 <LCD_2x16_cursor>
		LCD_2x16_uint16(temp);
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff8d 	bl	800112c <LCD_2x16_uint16>
		delayWrite(&delayLCDtemp, duracion);
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <LDC_printTemp+0x40>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <LDC_printTemp+0x3c>)
 800121a:	f7ff fe3f 	bl	8000e9c <delayWrite>
	}
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000d0 	.word	0x200000d0
 800122c:	20000004 	.word	0x20000004

08001230 <MEF_fanOff>:

/* Manejo de actuadores*/
/*Manejo de FAN - el rele del fan encuentra conectado al GPIO_PIN 13*/
static void MEF_fanOff(){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123a:	4802      	ldr	r0, [pc, #8]	; (8001244 <MEF_fanOff+0x14>)
 800123c:	f001 faee 	bl	800281c <HAL_GPIO_WritePin>
};
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021800 	.word	0x40021800

08001248 <MEF_fanOn>:
static void MEF_fanOn(){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 1);
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001252:	4802      	ldr	r0, [pc, #8]	; (800125c <MEF_fanOn+0x14>)
 8001254:	f001 fae2 	bl	800281c <HAL_GPIO_WritePin>
};
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021800 	.word	0x40021800

08001260 <MEF_alarmOff>:

/*Manejo de Alarma*/
/*El contacto que dispara la alamar se en cuentra conectado al GPIO_PIN 14*/
static void MEF_alarmOff(){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126a:	4802      	ldr	r0, [pc, #8]	; (8001274 <MEF_alarmOff+0x14>)
 800126c:	f001 fad6 	bl	800281c <HAL_GPIO_WritePin>
};
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021800 	.word	0x40021800

08001278 <MEF_alarmOn>:
static void MEF_alarmOn(){
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001282:	4802      	ldr	r0, [pc, #8]	; (800128c <MEF_alarmOn+0x14>)
 8001284:	f001 faca 	bl	800281c <HAL_GPIO_WritePin>
};
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021800 	.word	0x40021800

08001290 <MEF_init>:

/*******************************************************************************************
 *                               Definicion de las funciones                               *
 *******************************************************************************************/
/* Inicializa la MEF*/
void MEF_init(){
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	delayInit(&delayLCDtemp, duracion);
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <MEF_init+0x1c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MEF_init+0x20>)
 800129c:	f7ff fdc7 	bl	8000e2e <delayInit>
	MEF = ESTABLE;
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <MEF_init+0x24>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000004 	.word	0x20000004
 80012b0:	200000d0 	.word	0x200000d0
 80012b4:	200000c8 	.word	0x200000c8

080012b8 <MEF_update>:

/* Actualiza la MEF */
void MEF_update(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	LDC_printTemp(temp);
 80012bc:	4b74      	ldr	r3, [pc, #464]	; (8001490 <MEF_update+0x1d8>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff93 	bl	80011ec <LDC_printTemp>
	switch(MEF){
 80012c6:	4b73      	ldr	r3, [pc, #460]	; (8001494 <MEF_update+0x1dc>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	f000 8093 	beq.w	80013f6 <MEF_update+0x13e>
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	f300 80da 	bgt.w	800148a <MEF_update+0x1d2>
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <MEF_update+0x28>
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d046      	beq.n	800136c <MEF_update+0xb4>
				MEF_fanOn();
				MEF_alarmOff();
			}
		break;
	}
}
 80012de:	e0d4      	b.n	800148a <MEF_update+0x1d2>
			temp = SENSOR_TEMP_check();
 80012e0:	f000 f8ea 	bl	80014b8 <SENSOR_TEMP_check>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b69      	ldr	r3, [pc, #420]	; (8001490 <MEF_update+0x1d8>)
 80012ea:	801a      	strh	r2, [r3, #0]
			if (temp <= T1) {
 80012ec:	4b68      	ldr	r3, [pc, #416]	; (8001490 <MEF_update+0x1d8>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	2b1e      	cmp	r3, #30
 80012f2:	d80f      	bhi.n	8001314 <MEF_update+0x5c>
				if(flag1 == 0){
 80012f4:	4b68      	ldr	r3, [pc, #416]	; (8001498 <MEF_update+0x1e0>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	f083 0301 	eor.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d008      	beq.n	8001314 <MEF_update+0x5c>
					flag1 = 1;
 8001302:	4b65      	ldr	r3, [pc, #404]	; (8001498 <MEF_update+0x1e0>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
					LCD_printEstable();
 8001308:	f7ff ff28 	bl	800115c <LCD_printEstable>
					MEF_fanOff();
 800130c:	f7ff ff90 	bl	8001230 <MEF_fanOff>
					MEF_alarmOff();
 8001310:	f7ff ffa6 	bl	8001260 <MEF_alarmOff>
			if(temp>T1 && temp<=T2){
 8001314:	4b5e      	ldr	r3, [pc, #376]	; (8001490 <MEF_update+0x1d8>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	2b1e      	cmp	r3, #30
 800131a:	d912      	bls.n	8001342 <MEF_update+0x8a>
 800131c:	4b5c      	ldr	r3, [pc, #368]	; (8001490 <MEF_update+0x1d8>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	2b5a      	cmp	r3, #90	; 0x5a
 8001322:	d80e      	bhi.n	8001342 <MEF_update+0x8a>
				MEF = PRECAUCION;
 8001324:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <MEF_update+0x1dc>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
				flag1 = 0;
 800132a:	4b5b      	ldr	r3, [pc, #364]	; (8001498 <MEF_update+0x1e0>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
				flag2 = 1;
 8001330:	4b5a      	ldr	r3, [pc, #360]	; (800149c <MEF_update+0x1e4>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
				LCD_printPrecaucion();
 8001336:	f7ff ff29 	bl	800118c <LCD_printPrecaucion>
				MEF_fanOn();
 800133a:	f7ff ff85 	bl	8001248 <MEF_fanOn>
				MEF_alarmOff();
 800133e:	f7ff ff8f 	bl	8001260 <MEF_alarmOff>
			if(temp>T2){
 8001342:	4b53      	ldr	r3, [pc, #332]	; (8001490 <MEF_update+0x1d8>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	2b5a      	cmp	r3, #90	; 0x5a
 8001348:	f240 809a 	bls.w	8001480 <MEF_update+0x1c8>
				MEF = PELIGRO;
 800134c:	4b51      	ldr	r3, [pc, #324]	; (8001494 <MEF_update+0x1dc>)
 800134e:	2202      	movs	r2, #2
 8001350:	701a      	strb	r2, [r3, #0]
				flag1 = 0;
 8001352:	4b51      	ldr	r3, [pc, #324]	; (8001498 <MEF_update+0x1e0>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
				flag3 = 1;
 8001358:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <MEF_update+0x1e8>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
				LCD_printPeligro();
 800135e:	f7ff ff2d 	bl	80011bc <LCD_printPeligro>
				MEF_fanOn();
 8001362:	f7ff ff71 	bl	8001248 <MEF_fanOn>
				MEF_alarmOn();
 8001366:	f7ff ff87 	bl	8001278 <MEF_alarmOn>
		break;
 800136a:	e089      	b.n	8001480 <MEF_update+0x1c8>
			temp = SENSOR_TEMP_check();
 800136c:	f000 f8a4 	bl	80014b8 <SENSOR_TEMP_check>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <MEF_update+0x1d8>)
 8001376:	801a      	strh	r2, [r3, #0]
			if (temp > T1 && temp <= T2) {
 8001378:	4b45      	ldr	r3, [pc, #276]	; (8001490 <MEF_update+0x1d8>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	2b1e      	cmp	r3, #30
 800137e:	d913      	bls.n	80013a8 <MEF_update+0xf0>
 8001380:	4b43      	ldr	r3, [pc, #268]	; (8001490 <MEF_update+0x1d8>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	2b5a      	cmp	r3, #90	; 0x5a
 8001386:	d80f      	bhi.n	80013a8 <MEF_update+0xf0>
				if(flag2 == 0){
 8001388:	4b44      	ldr	r3, [pc, #272]	; (800149c <MEF_update+0x1e4>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d008      	beq.n	80013a8 <MEF_update+0xf0>
					flag2 = 1;
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <MEF_update+0x1e4>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
					LCD_printPrecaucion();
 800139c:	f7ff fef6 	bl	800118c <LCD_printPrecaucion>
					MEF_fanOn();
 80013a0:	f7ff ff52 	bl	8001248 <MEF_fanOn>
					MEF_alarmOff();
 80013a4:	f7ff ff5c 	bl	8001260 <MEF_alarmOff>
			if(temp <= T1){
 80013a8:	4b39      	ldr	r3, [pc, #228]	; (8001490 <MEF_update+0x1d8>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	2b1e      	cmp	r3, #30
 80013ae:	d80e      	bhi.n	80013ce <MEF_update+0x116>
				MEF = ESTABLE;
 80013b0:	4b38      	ldr	r3, [pc, #224]	; (8001494 <MEF_update+0x1dc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
				flag2 = 0;
 80013b6:	4b39      	ldr	r3, [pc, #228]	; (800149c <MEF_update+0x1e4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
				flag1 = 1;
 80013bc:	4b36      	ldr	r3, [pc, #216]	; (8001498 <MEF_update+0x1e0>)
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
				LCD_printEstable();
 80013c2:	f7ff fecb 	bl	800115c <LCD_printEstable>
				MEF_fanOff();
 80013c6:	f7ff ff33 	bl	8001230 <MEF_fanOff>
				MEF_alarmOff();
 80013ca:	f7ff ff49 	bl	8001260 <MEF_alarmOff>
			if(temp > T2){
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <MEF_update+0x1d8>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	2b5a      	cmp	r3, #90	; 0x5a
 80013d4:	d956      	bls.n	8001484 <MEF_update+0x1cc>
				MEF = PELIGRO;
 80013d6:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <MEF_update+0x1dc>)
 80013d8:	2202      	movs	r2, #2
 80013da:	701a      	strb	r2, [r3, #0]
				flag2 = 0;
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <MEF_update+0x1e4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
				flag3 = 1;
 80013e2:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <MEF_update+0x1e8>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
				LCD_printPeligro();
 80013e8:	f7ff fee8 	bl	80011bc <LCD_printPeligro>
				MEF_fanOn();
 80013ec:	f7ff ff2c 	bl	8001248 <MEF_fanOn>
				MEF_alarmOn();
 80013f0:	f7ff ff42 	bl	8001278 <MEF_alarmOn>
		break;
 80013f4:	e046      	b.n	8001484 <MEF_update+0x1cc>
			temp = SENSOR_TEMP_check();
 80013f6:	f000 f85f 	bl	80014b8 <SENSOR_TEMP_check>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <MEF_update+0x1d8>)
 8001400:	801a      	strh	r2, [r3, #0]
			if (temp > T2) {
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <MEF_update+0x1d8>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	2b5a      	cmp	r3, #90	; 0x5a
 8001408:	d90f      	bls.n	800142a <MEF_update+0x172>
				if(flag3 == 0){
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <MEF_update+0x1e8>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	f083 0301 	eor.w	r3, r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <MEF_update+0x172>
					flag3 = 1;
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <MEF_update+0x1e8>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
					LCD_printPeligro();
 800141e:	f7ff fecd 	bl	80011bc <LCD_printPeligro>
					MEF_fanOn();
 8001422:	f7ff ff11 	bl	8001248 <MEF_fanOn>
					MEF_alarmOn();
 8001426:	f7ff ff27 	bl	8001278 <MEF_alarmOn>
			if(temp <= T1){
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MEF_update+0x1d8>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	2b1e      	cmp	r3, #30
 8001430:	d80e      	bhi.n	8001450 <MEF_update+0x198>
				MEF = ESTABLE;
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MEF_update+0x1dc>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
				flag3 = 0;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MEF_update+0x1e8>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
				flag1 = 1;
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MEF_update+0x1e0>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
				LCD_printEstable();
 8001444:	f7ff fe8a 	bl	800115c <LCD_printEstable>
				MEF_fanOff();
 8001448:	f7ff fef2 	bl	8001230 <MEF_fanOff>
				MEF_alarmOff();
 800144c:	f7ff ff08 	bl	8001260 <MEF_alarmOff>
			if(temp>T1 && temp<=T2){
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MEF_update+0x1d8>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	2b1e      	cmp	r3, #30
 8001456:	d917      	bls.n	8001488 <MEF_update+0x1d0>
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MEF_update+0x1d8>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	2b5a      	cmp	r3, #90	; 0x5a
 800145e:	d813      	bhi.n	8001488 <MEF_update+0x1d0>
				MEF = PRECAUCION;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MEF_update+0x1dc>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
				flag3 = 0;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MEF_update+0x1e8>)
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
				flag2 = 1;
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MEF_update+0x1e4>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
				LCD_printPrecaucion();
 8001472:	f7ff fe8b 	bl	800118c <LCD_printPrecaucion>
				MEF_fanOn();
 8001476:	f7ff fee7 	bl	8001248 <MEF_fanOn>
				MEF_alarmOff();
 800147a:	f7ff fef1 	bl	8001260 <MEF_alarmOff>
		break;
 800147e:	e003      	b.n	8001488 <MEF_update+0x1d0>
		break;
 8001480:	bf00      	nop
 8001482:	e002      	b.n	800148a <MEF_update+0x1d2>
		break;
 8001484:	bf00      	nop
 8001486:	e000      	b.n	800148a <MEF_update+0x1d2>
		break;
 8001488:	bf00      	nop
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200000cc 	.word	0x200000cc
 8001494:	200000c8 	.word	0x200000c8
 8001498:	200000c9 	.word	0x200000c9
 800149c:	200000ca 	.word	0x200000ca
 80014a0:	200000cb 	.word	0x200000cb

080014a4 <SENSOR_TEMP_init>:


/*******************************************************************************************
 *                               Definicion de las funciones                               *
 *******************************************************************************************/
void SENSOR_TEMP_init(void){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <SENSOR_TEMP_init+0x10>)
 80014aa:	f000 f9f3 	bl	8001894 <HAL_ADC_Start>
};
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000007c 	.word	0x2000007c

080014b8 <SENSOR_TEMP_check>:

uint16_t SENSOR_TEMP_check(void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1, 100);
 80014be:	2164      	movs	r1, #100	; 0x64
 80014c0:	4818      	ldr	r0, [pc, #96]	; (8001524 <SENSOR_TEMP_check+0x6c>)
 80014c2:	f000 fab9 	bl	8001a38 <HAL_ADC_PollForConversion>
	uint16_t tempADC = HAL_ADC_GetValue(&hadc1);
 80014c6:	4817      	ldr	r0, [pc, #92]	; (8001524 <SENSOR_TEMP_check+0x6c>)
 80014c8:	f000 fb41 	bl	8001b4e <HAL_ADC_GetValue>
 80014cc:	4603      	mov	r3, r0
 80014ce:	82fb      	strh	r3, [r7, #22]
	float con = ((float)diff)/4095;
 80014d0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8001528 <SENSOR_TEMP_check+0x70>
 80014d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014d8:	eddf 6a14 	vldr	s13, [pc, #80]	; 800152c <SENSOR_TEMP_check+0x74>
 80014dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e0:	edc7 7a04 	vstr	s15, [r7, #16]
	float te = (con * (float)tempADC);
 80014e4:	8afb      	ldrh	r3, [r7, #22]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80014f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f6:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t temp = te + Tmin;
 80014fa:	2314      	movs	r3, #20
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001504:	edd7 7a03 	vldr	s15, [r7, #12]
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001510:	edc7 7a01 	vstr	s15, [r7, #4]
 8001514:	793b      	ldrb	r3, [r7, #4]
 8001516:	72fb      	strb	r3, [r7, #11]
	return temp;
 8001518:	7afb      	ldrb	r3, [r7, #11]
 800151a:	b29b      	uxth	r3, r3
};
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000007c 	.word	0x2000007c
 8001528:	00000082 	.word	0x00000082
 800152c:	457ff000 	.word	0x457ff000

08001530 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_I2C3_Init+0x74>)
 8001536:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <MX_I2C3_Init+0x78>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_I2C3_Init+0x74>)
 800153c:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <MX_I2C3_Init+0x7c>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_I2C3_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_I2C3_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <MX_I2C3_Init+0x74>)
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_I2C3_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_I2C3_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_I2C3_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_I2C3_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_I2C3_Init+0x74>)
 800156e:	f001 f96f 	bl	8002850 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001578:	f7ff fb90 	bl	8000c9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800157c:	2100      	movs	r1, #0
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <MX_I2C3_Init+0x74>)
 8001580:	f001 fdb1 	bl	80030e6 <HAL_I2CEx_ConfigAnalogFilter>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800158a:	f7ff fb87 	bl	8000c9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800158e:	2100      	movs	r1, #0
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_I2C3_Init+0x74>)
 8001592:	f001 fde4 	bl	800315e <HAL_I2CEx_ConfigDigitalFilter>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800159c:	f7ff fb7e 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200000dc 	.word	0x200000dc
 80015a8:	40005c00 	.word	0x40005c00
 80015ac:	000186a0 	.word	0x000186a0

080015b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a29      	ldr	r2, [pc, #164]	; (8001674 <HAL_I2C_MspInit+0xc4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d14b      	bne.n	800166a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b28      	ldr	r3, [pc, #160]	; (8001678 <HAL_I2C_MspInit+0xc8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a27      	ldr	r2, [pc, #156]	; (8001678 <HAL_I2C_MspInit+0xc8>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b25      	ldr	r3, [pc, #148]	; (8001678 <HAL_I2C_MspInit+0xc8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <HAL_I2C_MspInit+0xc8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a20      	ldr	r2, [pc, #128]	; (8001678 <HAL_I2C_MspInit+0xc8>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_I2C_MspInit+0xc8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800160a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001610:	2312      	movs	r3, #18
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800161c:	2304      	movs	r3, #4
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4815      	ldr	r0, [pc, #84]	; (800167c <HAL_I2C_MspInit+0xcc>)
 8001628:	f000 ff4c 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800162c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001632:	2312      	movs	r3, #18
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800163e:	2304      	movs	r3, #4
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <HAL_I2C_MspInit+0xd0>)
 800164a:	f000 ff3b 	bl	80024c4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_I2C_MspInit+0xc8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_I2C_MspInit+0xc8>)
 8001658:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_I2C_MspInit+0xc8>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40005c00 	.word	0x40005c00
 8001678:	40023800 	.word	0x40023800
 800167c:	40020800 	.word	0x40020800
 8001680:	40020000 	.word	0x40020000

08001684 <LCD_Send_RawData>:
  }
}

/* USER CODE BEGIN 1 */

void LCD_Send_RawData(uint8_t datoraw){
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af02      	add	r7, sp, #8
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
	uint8_t packet[2];
	packet[0]= datoraw;
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	733b      	strb	r3, [r7, #12]
	packet[1]= ((datoraw) & (~EN_ON));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f023 0304 	bic.w	r3, r3, #4
 8001698:	b2db      	uxtb	r3, r3
 800169a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, SLAVE_ADDRESS_LCD, packet, 2, 100);
 800169c:	f107 020c 	add.w	r2, r7, #12
 80016a0:	2364      	movs	r3, #100	; 0x64
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2302      	movs	r3, #2
 80016a6:	214e      	movs	r1, #78	; 0x4e
 80016a8:	4803      	ldr	r0, [pc, #12]	; (80016b8 <LCD_Send_RawData+0x34>)
 80016aa:	f001 fa15 	bl	8002ad8 <HAL_I2C_Master_Transmit>
};
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200000dc 	.word	0x200000dc

080016bc <LCD_2x16_Send_I2C>:

void LCD_2x16_Send_I2C(uint8_t* data){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c3, SLAVE_ADDRESS_LCD, data, 4, 100);
 80016c4:	2364      	movs	r3, #100	; 0x64
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2304      	movs	r3, #4
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	214e      	movs	r1, #78	; 0x4e
 80016ce:	4803      	ldr	r0, [pc, #12]	; (80016dc <LCD_2x16_Send_I2C+0x20>)
 80016d0:	f001 fa02 	bl	8002ad8 <HAL_I2C_Master_Transmit>
};
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200000dc 	.word	0x200000dc

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_Init+0x40>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_Init+0x40>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x40>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 fea7 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fac8 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 feb1 	bl	80024aa <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001760:	f000 fe87 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	2000000c 	.word	0x2000000c
 8001780:	20000008 	.word	0x20000008

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	20000130 	.word	0x20000130

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000130 	.word	0x20000130

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000000c 	.word	0x2000000c

0800180c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e033      	b.n	800188a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7fe ff26 	bl	800067c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001852:	f023 0302 	bic.w	r3, r3, #2
 8001856:	f043 0202 	orr.w	r2, r3, #2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fab4 	bl	8001dcc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f023 0303 	bic.w	r3, r3, #3
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
 800187a:	e001      	b.n	8001880 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Start+0x1a>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e0b2      	b.n	8001a14 <HAL_ADC_Start+0x180>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d018      	beq.n	80018f6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018d4:	4b52      	ldr	r3, [pc, #328]	; (8001a20 <HAL_ADC_Start+0x18c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <HAL_ADC_Start+0x190>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	0c9a      	lsrs	r2, r3, #18
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018e8:	e002      	b.n	80018f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f9      	bne.n	80018ea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d17a      	bne.n	80019fa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800192e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001942:	d106      	bne.n	8001952 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	f023 0206 	bic.w	r2, r3, #6
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	645a      	str	r2, [r3, #68]	; 0x44
 8001950:	e002      	b.n	8001958 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001960:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_ADC_Start+0x194>)
 8001962:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800196c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2b00      	cmp	r3, #0
 8001978:	d12a      	bne.n	80019d0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a2b      	ldr	r2, [pc, #172]	; (8001a2c <HAL_ADC_Start+0x198>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d015      	beq.n	80019b0 <HAL_ADC_Start+0x11c>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a29      	ldr	r2, [pc, #164]	; (8001a30 <HAL_ADC_Start+0x19c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d105      	bne.n	800199a <HAL_ADC_Start+0x106>
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <HAL_ADC_Start+0x194>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00a      	beq.n	80019b0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <HAL_ADC_Start+0x1a0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d136      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
 80019a4:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_ADC_Start+0x194>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d130      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d129      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	e020      	b.n	8001a12 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <HAL_ADC_Start+0x198>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d11b      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d114      	bne.n	8001a12 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	e00b      	b.n	8001a12 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f043 0210 	orr.w	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	20000000 	.word	0x20000000
 8001a24:	431bde83 	.word	0x431bde83
 8001a28:	40012300 	.word	0x40012300
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	40012100 	.word	0x40012100
 8001a34:	40012200 	.word	0x40012200

08001a38 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a54:	d113      	bne.n	8001a7e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a64:	d10b      	bne.n	8001a7e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f043 0220 	orr.w	r2, r3, #32
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e063      	b.n	8001b46 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a7e:	f7ff fe95 	bl	80017ac <HAL_GetTick>
 8001a82:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a84:	e021      	b.n	8001aca <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a8c:	d01d      	beq.n	8001aca <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d007      	beq.n	8001aa4 <HAL_ADC_PollForConversion+0x6c>
 8001a94:	f7ff fe8a 	bl	80017ac <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d212      	bcs.n	8001aca <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d00b      	beq.n	8001aca <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f043 0204 	orr.w	r2, r3, #4
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e03d      	b.n	8001b46 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d1d6      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0212 	mvn.w	r2, #18
 8001ae0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d123      	bne.n	8001b44 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d11f      	bne.n	8001b44 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d111      	bne.n	8001b44 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1c>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e113      	b.n	8001dac <HAL_ADC_ConfigChannel+0x244>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	d925      	bls.n	8001be0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68d9      	ldr	r1, [r3, #12]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b1e      	subs	r3, #30
 8001baa:	2207      	movs	r2, #7
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68d9      	ldr	r1, [r3, #12]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4603      	mov	r3, r0
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4403      	add	r3, r0
 8001bd2:	3b1e      	subs	r3, #30
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	e022      	b.n	8001c26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6919      	ldr	r1, [r3, #16]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	400a      	ands	r2, r1
 8001c02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6919      	ldr	r1, [r3, #16]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4403      	add	r3, r0
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d824      	bhi.n	8001c78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b05      	subs	r3, #5
 8001c40:	221f      	movs	r2, #31
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	3b05      	subs	r3, #5
 8001c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
 8001c76:	e04c      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b0c      	cmp	r3, #12
 8001c7e:	d824      	bhi.n	8001cca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b23      	subs	r3, #35	; 0x23
 8001c92:	221f      	movs	r2, #31
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b23      	subs	r3, #35	; 0x23
 8001cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc8:	e023      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b41      	subs	r3, #65	; 0x41
 8001cdc:	221f      	movs	r2, #31
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	400a      	ands	r2, r1
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	3b41      	subs	r3, #65	; 0x41
 8001d06:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d12:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <HAL_ADC_ConfigChannel+0x250>)
 8001d14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a28      	ldr	r2, [pc, #160]	; (8001dbc <HAL_ADC_ConfigChannel+0x254>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10f      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x1d8>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b12      	cmp	r3, #18
 8001d26:	d10b      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <HAL_ADC_ConfigChannel+0x254>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d12b      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x23a>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <HAL_ADC_ConfigChannel+0x258>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d003      	beq.n	8001d5c <HAL_ADC_ConfigChannel+0x1f4>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b11      	cmp	r3, #17
 8001d5a:	d122      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a11      	ldr	r2, [pc, #68]	; (8001dc0 <HAL_ADC_ConfigChannel+0x258>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d111      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_ADC_ConfigChannel+0x25c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <HAL_ADC_ConfigChannel+0x260>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	0c9a      	lsrs	r2, r3, #18
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d94:	e002      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f9      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40012300 	.word	0x40012300
 8001dbc:	40012000 	.word	0x40012000
 8001dc0:	10000012 	.word	0x10000012
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	431bde83 	.word	0x431bde83

08001dcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd4:	4b79      	ldr	r3, [pc, #484]	; (8001fbc <ADC_Init+0x1f0>)
 8001dd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	431a      	orrs	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	021a      	lsls	r2, r3, #8
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6899      	ldr	r1, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	4a58      	ldr	r2, [pc, #352]	; (8001fc0 <ADC_Init+0x1f4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d022      	beq.n	8001eaa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6899      	ldr	r1, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6899      	ldr	r1, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	e00f      	b.n	8001eca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ec8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0202 	bic.w	r2, r2, #2
 8001ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6899      	ldr	r1, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7e1b      	ldrb	r3, [r3, #24]
 8001ee4:	005a      	lsls	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01b      	beq.n	8001f30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6859      	ldr	r1, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	3b01      	subs	r3, #1
 8001f24:	035a      	lsls	r2, r3, #13
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	e007      	b.n	8001f40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	051a      	lsls	r2, r3, #20
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6899      	ldr	r1, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f82:	025a      	lsls	r2, r3, #9
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6899      	ldr	r1, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	029a      	lsls	r2, r3, #10
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	609a      	str	r2, [r3, #8]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40012300 	.word	0x40012300
 8001fc0:	0f000001 	.word	0x0f000001

08001fc4 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e17e      	b.n	80022da <HAL_ADCEx_InjectedConfigChannel+0x316>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	d925      	bls.n	8002038 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68d9      	ldr	r1, [r3, #12]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	3b1e      	subs	r3, #30
 8002002:	2207      	movs	r2, #7
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43da      	mvns	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	400a      	ands	r2, r1
 8002010:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68d9      	ldr	r1, [r3, #12]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	4603      	mov	r3, r0
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4403      	add	r3, r0
 800202a:	3b1e      	subs	r3, #30
 800202c:	409a      	lsls	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	e022      	b.n	800207e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6919      	ldr	r1, [r3, #16]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	2207      	movs	r2, #7
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	400a      	ands	r2, r1
 800205a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	4603      	mov	r3, r0
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4403      	add	r3, r0
 8002074:	409a      	lsls	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	3b01      	subs	r3, #1
 800209a:	051a      	lsls	r2, r3, #20
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	3303      	adds	r3, #3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	221f      	movs	r2, #31
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43da      	mvns	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	400a      	ands	r2, r1
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3303      	adds	r3, #3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	fa00 f203 	lsl.w	r2, r0, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a75      	ldr	r2, [pc, #468]	; (80022e8 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d022      	beq.n	800215c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6899      	ldr	r1, [r3, #8]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002146:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6899      	ldr	r1, [r3, #8]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	e00f      	b.n	800217c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800216a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800217a:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	7d5b      	ldrb	r3, [r3, #21]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	e007      	b.n	80021a6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	7d1b      	ldrb	r3, [r3, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	e007      	b.n	80021d0 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021ce:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d02e      	beq.n	8002236 <HAL_ADCEx_InjectedConfigChannel+0x272>
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d840      	bhi.n	800225e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d002      	beq.n	80021e6 <HAL_ADCEx_InjectedConfigChannel+0x222>
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d014      	beq.n	800220e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80021e4:	e03b      	b.n	800225e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80021f4:	f023 030f 	bic.w	r3, r3, #15
 80021f8:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6959      	ldr	r1, [r3, #20]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	615a      	str	r2, [r3, #20]
      break;
 800220c:	e03b      	b.n	8002286 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800221c:	f023 030f 	bic.w	r3, r3, #15
 8002220:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6999      	ldr	r1, [r3, #24]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	619a      	str	r2, [r3, #24]
      break;
 8002234:	e027      	b.n	8002286 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002244:	f023 030f 	bic.w	r3, r3, #15
 8002248:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69d9      	ldr	r1, [r3, #28]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	61da      	str	r2, [r3, #28]
      break;
 800225c:	e013      	b.n	8002286 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800226c:	f023 030f 	bic.w	r3, r3, #15
 8002270:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a19      	ldr	r1, [r3, #32]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	621a      	str	r2, [r3, #32]
      break;
 8002284:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002288:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d109      	bne.n	80022a8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b12      	cmp	r3, #18
 800229a:	d105      	bne.n	80022a8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10e      	bne.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d003      	beq.n	80022c4 <HAL_ADCEx_InjectedConfigChannel+0x300>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b11      	cmp	r3, #17
 80022c2:	d105      	bne.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	000f0001 	.word	0x000f0001
 80022ec:	40012300 	.word	0x40012300
 80022f0:	40012000 	.word	0x40012000
 80022f4:	10000012 	.word	0x10000012

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	; (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	; (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff47 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff5c 	bl	8002340 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff8e 	bl	80023b0 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffb0 	bl	8002418 <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e177      	b.n	80027d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f040 8166 	bne.w	80027ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d005      	beq.n	8002516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002512:	2b02      	cmp	r3, #2
 8002514:	d130      	bne.n	8002578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800254c:	2201      	movs	r2, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 0201 	and.w	r2, r3, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b03      	cmp	r3, #3
 8002582:	d017      	beq.n	80025b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d123      	bne.n	8002608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	08da      	lsrs	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3208      	adds	r2, #8
 8002602:	69b9      	ldr	r1, [r7, #24]
 8002604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2203      	movs	r2, #3
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0203 	and.w	r2, r3, #3
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80c0 	beq.w	80027ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_GPIO_Init+0x324>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002666:	4a61      	ldr	r2, [pc, #388]	; (80027ec <HAL_GPIO_Init+0x328>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_GPIO_Init+0x32c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d037      	beq.n	8002702 <HAL_GPIO_Init+0x23e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_GPIO_Init+0x330>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_GPIO_Init+0x23a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_GPIO_Init+0x334>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x236>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a55      	ldr	r2, [pc, #340]	; (80027fc <HAL_GPIO_Init+0x338>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x232>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a54      	ldr	r2, [pc, #336]	; (8002800 <HAL_GPIO_Init+0x33c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x22e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a53      	ldr	r2, [pc, #332]	; (8002804 <HAL_GPIO_Init+0x340>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x22a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_GPIO_Init+0x344>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x226>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a51      	ldr	r2, [pc, #324]	; (800280c <HAL_GPIO_Init+0x348>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x222>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a50      	ldr	r2, [pc, #320]	; (8002810 <HAL_GPIO_Init+0x34c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x21e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4f      	ldr	r2, [pc, #316]	; (8002814 <HAL_GPIO_Init+0x350>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x21a>
 80026da:	2309      	movs	r3, #9
 80026dc:	e012      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026de:	230a      	movs	r3, #10
 80026e0:	e010      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e2:	2308      	movs	r3, #8
 80026e4:	e00e      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x240>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002714:	4935      	ldr	r1, [pc, #212]	; (80027ec <HAL_GPIO_Init+0x328>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_GPIO_Init+0x354>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a29      	ldr	r2, [pc, #164]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_GPIO_Init+0x354>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_GPIO_Init+0x354>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_GPIO_Init+0x354>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae84 	bls.w	80024e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40022000 	.word	0x40022000
 8002814:	40022400 	.word	0x40022400
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	4613      	mov	r3, r2
 800282a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800282c:	787b      	ldrb	r3, [r7, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002838:	e003      	b.n	8002842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283a:	887b      	ldrh	r3, [r7, #2]
 800283c:	041a      	lsls	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e12b      	b.n	8002aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fe9a 	bl	80015b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028b4:	f001 f902 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 80028b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a81      	ldr	r2, [pc, #516]	; (8002ac4 <HAL_I2C_Init+0x274>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d807      	bhi.n	80028d4 <HAL_I2C_Init+0x84>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a80      	ldr	r2, [pc, #512]	; (8002ac8 <HAL_I2C_Init+0x278>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	bf94      	ite	ls
 80028cc:	2301      	movls	r3, #1
 80028ce:	2300      	movhi	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e006      	b.n	80028e2 <HAL_I2C_Init+0x92>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a7d      	ldr	r2, [pc, #500]	; (8002acc <HAL_I2C_Init+0x27c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	bf94      	ite	ls
 80028dc:	2301      	movls	r3, #1
 80028de:	2300      	movhi	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0e7      	b.n	8002aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a78      	ldr	r2, [pc, #480]	; (8002ad0 <HAL_I2C_Init+0x280>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	0c9b      	lsrs	r3, r3, #18
 80028f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a6a      	ldr	r2, [pc, #424]	; (8002ac4 <HAL_I2C_Init+0x274>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d802      	bhi.n	8002924 <HAL_I2C_Init+0xd4>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3301      	adds	r3, #1
 8002922:	e009      	b.n	8002938 <HAL_I2C_Init+0xe8>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	4a69      	ldr	r2, [pc, #420]	; (8002ad4 <HAL_I2C_Init+0x284>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	3301      	adds	r3, #1
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	430b      	orrs	r3, r1
 800293e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800294a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	495c      	ldr	r1, [pc, #368]	; (8002ac4 <HAL_I2C_Init+0x274>)
 8002954:	428b      	cmp	r3, r1
 8002956:	d819      	bhi.n	800298c <HAL_I2C_Init+0x13c>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e59      	subs	r1, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fbb1 f3f3 	udiv	r3, r1, r3
 8002966:	1c59      	adds	r1, r3, #1
 8002968:	f640 73fc 	movw	r3, #4092	; 0xffc
 800296c:	400b      	ands	r3, r1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_I2C_Init+0x138>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e59      	subs	r1, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002986:	e051      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 8002988:	2304      	movs	r3, #4
 800298a:	e04f      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d111      	bne.n	80029b8 <HAL_I2C_Init+0x168>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e012      	b.n	80029de <HAL_I2C_Init+0x18e>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1e58      	subs	r0, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	0099      	lsls	r1, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Init+0x196>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e022      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10e      	bne.n	8002a0c <HAL_I2C_Init+0x1bc>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1e58      	subs	r0, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	440b      	add	r3, r1
 80029fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0a:	e00f      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	0099      	lsls	r1, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	6809      	ldr	r1, [r1, #0]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6911      	ldr	r1, [r2, #16]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68d2      	ldr	r2, [r2, #12]
 8002a66:	4311      	orrs	r1, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	000186a0 	.word	0x000186a0
 8002ac8:	001e847f 	.word	0x001e847f
 8002acc:	003d08ff 	.word	0x003d08ff
 8002ad0:	431bde83 	.word	0x431bde83
 8002ad4:	10624dd3 	.word	0x10624dd3

08002ad8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	817b      	strh	r3, [r7, #10]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aec:	f7fe fe5e 	bl	80017ac <HAL_GetTick>
 8002af0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	f040 80e0 	bne.w	8002cc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2319      	movs	r3, #25
 8002b06:	2201      	movs	r2, #1
 8002b08:	4970      	ldr	r1, [pc, #448]	; (8002ccc <HAL_I2C_Master_Transmit+0x1f4>)
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f964 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0d3      	b.n	8002cc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_I2C_Master_Transmit+0x50>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e0cc      	b.n	8002cc2 <HAL_I2C_Master_Transmit+0x1ea>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d007      	beq.n	8002b4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2221      	movs	r2, #33	; 0x21
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	893a      	ldrh	r2, [r7, #8]
 8002b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4a50      	ldr	r2, [pc, #320]	; (8002cd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b90:	8979      	ldrh	r1, [r7, #10]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	6a3a      	ldr	r2, [r7, #32]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f89c 	bl	8002cd4 <I2C_MasterRequestWrite>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e08d      	b.n	8002cc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bbc:	e066      	b.n	8002c8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	6a39      	ldr	r1, [r7, #32]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f9de 	bl	8002f84 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00d      	beq.n	8002bea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d107      	bne.n	8002be6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06b      	b.n	8002cc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	781a      	ldrb	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d11b      	bne.n	8002c60 <HAL_I2C_Master_Transmit+0x188>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d017      	beq.n	8002c60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	6a39      	ldr	r1, [r7, #32]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f9ce 	bl	8003006 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d107      	bne.n	8002c88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e01a      	b.n	8002cc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d194      	bne.n	8002bbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e000      	b.n	8002cc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	00100002 	.word	0x00100002
 8002cd0:	ffff0000 	.word	0xffff0000

08002cd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d006      	beq.n	8002cfe <I2C_MasterRequestWrite+0x2a>
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d003      	beq.n	8002cfe <I2C_MasterRequestWrite+0x2a>
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cfc:	d108      	bne.n	8002d10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e00b      	b.n	8002d28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	2b12      	cmp	r3, #18
 8002d16:	d107      	bne.n	8002d28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f84f 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4e:	d103      	bne.n	8002d58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e035      	b.n	8002dc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d64:	d108      	bne.n	8002d78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d74:	611a      	str	r2, [r3, #16]
 8002d76:	e01b      	b.n	8002db0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d78:	897b      	ldrh	r3, [r7, #10]
 8002d7a:	11db      	asrs	r3, r3, #7
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f003 0306 	and.w	r3, r3, #6
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f063 030f 	orn	r3, r3, #15
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	490e      	ldr	r1, [pc, #56]	; (8002dd0 <I2C_MasterRequestWrite+0xfc>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f875 	bl	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e010      	b.n	8002dc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4907      	ldr	r1, [pc, #28]	; (8002dd4 <I2C_MasterRequestWrite+0x100>)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f865 	bl	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	00010008 	.word	0x00010008
 8002dd4:	00010002 	.word	0x00010002

08002dd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de8:	e025      	b.n	8002e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df0:	d021      	beq.n	8002e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df2:	f7fe fcdb 	bl	80017ac <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d116      	bne.n	8002e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f043 0220 	orr.w	r2, r3, #32
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e023      	b.n	8002e7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d10d      	bne.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf0c      	ite	eq
 8002e52:	2301      	moveq	r3, #1
 8002e54:	2300      	movne	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	e00c      	b.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	43da      	mvns	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4013      	ands	r3, r2
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf0c      	ite	eq
 8002e6e:	2301      	moveq	r3, #1
 8002e70:	2300      	movne	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d0b6      	beq.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e94:	e051      	b.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea4:	d123      	bne.n	8002eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ebe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f043 0204 	orr.w	r2, r3, #4
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e046      	b.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef4:	d021      	beq.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7fe fc59 	bl	80017ac <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d302      	bcc.n	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d116      	bne.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e020      	b.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d10c      	bne.n	8002f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bf14      	ite	ne
 8002f56:	2301      	movne	r3, #1
 8002f58:	2300      	moveq	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	e00b      	b.n	8002f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	43da      	mvns	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf14      	ite	ne
 8002f70:	2301      	movne	r3, #1
 8002f72:	2300      	moveq	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d18d      	bne.n	8002e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f90:	e02d      	b.n	8002fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f878 	bl	8003088 <I2C_IsAcknowledgeFailed>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e02d      	b.n	8002ffe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa8:	d021      	beq.n	8002fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002faa:	f7fe fbff 	bl	80017ac <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d302      	bcc.n	8002fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d116      	bne.n	8002fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f043 0220 	orr.w	r2, r3, #32
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e007      	b.n	8002ffe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff8:	2b80      	cmp	r3, #128	; 0x80
 8002ffa:	d1ca      	bne.n	8002f92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003012:	e02d      	b.n	8003070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f837 	bl	8003088 <I2C_IsAcknowledgeFailed>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e02d      	b.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302a:	d021      	beq.n	8003070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302c:	f7fe fbbe 	bl	80017ac <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	d302      	bcc.n	8003042 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d116      	bne.n	8003070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e007      	b.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b04      	cmp	r3, #4
 800307c:	d1ca      	bne.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d11b      	bne.n	80030d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f043 0204 	orr.w	r2, r3, #4
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d129      	bne.n	8003150 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0210 	bic.w	r2, r2, #16
 8003122:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e000      	b.n	8003152 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b20      	cmp	r3, #32
 8003176:	d12a      	bne.n	80031ce <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2224      	movs	r2, #36	; 0x24
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003198:	89fb      	ldrh	r3, [r7, #14]
 800319a:	f023 030f 	bic.w	r3, r3, #15
 800319e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	89fb      	ldrh	r3, [r7, #14]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	89fa      	ldrh	r2, [r7, #14]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e267      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d075      	beq.n	80032e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fa:	4b88      	ldr	r3, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x240>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b04      	cmp	r3, #4
 8003204:	d00c      	beq.n	8003220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003206:	4b85      	ldr	r3, [pc, #532]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800320e:	2b08      	cmp	r3, #8
 8003210:	d112      	bne.n	8003238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003212:	4b82      	ldr	r3, [pc, #520]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321e:	d10b      	bne.n	8003238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003220:	4b7e      	ldr	r3, [pc, #504]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d05b      	beq.n	80032e4 <HAL_RCC_OscConfig+0x108>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d157      	bne.n	80032e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e242      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003240:	d106      	bne.n	8003250 <HAL_RCC_OscConfig+0x74>
 8003242:	4b76      	ldr	r3, [pc, #472]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a75      	ldr	r2, [pc, #468]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e01d      	b.n	800328c <HAL_RCC_OscConfig+0xb0>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x98>
 800325a:	4b70      	ldr	r3, [pc, #448]	; (800341c <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6f      	ldr	r2, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b6d      	ldr	r3, [pc, #436]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6c      	ldr	r2, [pc, #432]	; (800341c <HAL_RCC_OscConfig+0x240>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0xb0>
 8003274:	4b69      	ldr	r3, [pc, #420]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a68      	ldr	r2, [pc, #416]	; (800341c <HAL_RCC_OscConfig+0x240>)
 800327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b66      	ldr	r3, [pc, #408]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a65      	ldr	r2, [pc, #404]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d013      	beq.n	80032bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe fa8a 	bl	80017ac <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329c:	f7fe fa86 	bl	80017ac <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e207      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	4b5b      	ldr	r3, [pc, #364]	; (800341c <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0xc0>
 80032ba:	e014      	b.n	80032e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe fa76 	bl	80017ac <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fe fa72 	bl	80017ac <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e1f3      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	4b51      	ldr	r3, [pc, #324]	; (800341c <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0xe8>
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d063      	beq.n	80033ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f2:	4b4a      	ldr	r3, [pc, #296]	; (800341c <HAL_RCC_OscConfig+0x240>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003306:	2b08      	cmp	r3, #8
 8003308:	d11c      	bne.n	8003344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330a:	4b44      	ldr	r3, [pc, #272]	; (800341c <HAL_RCC_OscConfig+0x240>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d116      	bne.n	8003344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003316:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_RCC_OscConfig+0x152>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d001      	beq.n	800332e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e1c7      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332e:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4937      	ldr	r1, [pc, #220]	; (800341c <HAL_RCC_OscConfig+0x240>)
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003342:	e03a      	b.n	80033ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d020      	beq.n	800338e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800334c:	4b34      	ldr	r3, [pc, #208]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fe fa2b 	bl	80017ac <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335a:	f7fe fa27 	bl	80017ac <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e1a8      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336c:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_RCC_OscConfig+0x240>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003378:	4b28      	ldr	r3, [pc, #160]	; (800341c <HAL_RCC_OscConfig+0x240>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4925      	ldr	r1, [pc, #148]	; (800341c <HAL_RCC_OscConfig+0x240>)
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]
 800338c:	e015      	b.n	80033ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800338e:	4b24      	ldr	r3, [pc, #144]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fe fa0a 	bl	80017ac <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800339c:	f7fe fa06 	bl	80017ac <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e187      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d036      	beq.n	8003434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d016      	beq.n	80033fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HAL_RCC_OscConfig+0x248>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d4:	f7fe f9ea 	bl	80017ac <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033dc:	f7fe f9e6 	bl	80017ac <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e167      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_OscConfig+0x240>)
 80033f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0x200>
 80033fa:	e01b      	b.n	8003434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_OscConfig+0x248>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003402:	f7fe f9d3 	bl	80017ac <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	e00e      	b.n	8003428 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340a:	f7fe f9cf 	bl	80017ac <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d907      	bls.n	8003428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e150      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
 800341c:	40023800 	.word	0x40023800
 8003420:	42470000 	.word	0x42470000
 8003424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003428:	4b88      	ldr	r3, [pc, #544]	; (800364c <HAL_RCC_OscConfig+0x470>)
 800342a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1ea      	bne.n	800340a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8097 	beq.w	8003570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003446:	4b81      	ldr	r3, [pc, #516]	; (800364c <HAL_RCC_OscConfig+0x470>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10f      	bne.n	8003472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	4b7d      	ldr	r3, [pc, #500]	; (800364c <HAL_RCC_OscConfig+0x470>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4a7c      	ldr	r2, [pc, #496]	; (800364c <HAL_RCC_OscConfig+0x470>)
 800345c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003460:	6413      	str	r3, [r2, #64]	; 0x40
 8003462:	4b7a      	ldr	r3, [pc, #488]	; (800364c <HAL_RCC_OscConfig+0x470>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346e:	2301      	movs	r3, #1
 8003470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003472:	4b77      	ldr	r3, [pc, #476]	; (8003650 <HAL_RCC_OscConfig+0x474>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d118      	bne.n	80034b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800347e:	4b74      	ldr	r3, [pc, #464]	; (8003650 <HAL_RCC_OscConfig+0x474>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a73      	ldr	r2, [pc, #460]	; (8003650 <HAL_RCC_OscConfig+0x474>)
 8003484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348a:	f7fe f98f 	bl	80017ac <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003492:	f7fe f98b 	bl	80017ac <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e10c      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a4:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <HAL_RCC_OscConfig+0x474>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d106      	bne.n	80034c6 <HAL_RCC_OscConfig+0x2ea>
 80034b8:	4b64      	ldr	r3, [pc, #400]	; (800364c <HAL_RCC_OscConfig+0x470>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	4a63      	ldr	r2, [pc, #396]	; (800364c <HAL_RCC_OscConfig+0x470>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6713      	str	r3, [r2, #112]	; 0x70
 80034c4:	e01c      	b.n	8003500 <HAL_RCC_OscConfig+0x324>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x30c>
 80034ce:	4b5f      	ldr	r3, [pc, #380]	; (800364c <HAL_RCC_OscConfig+0x470>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	4a5e      	ldr	r2, [pc, #376]	; (800364c <HAL_RCC_OscConfig+0x470>)
 80034d4:	f043 0304 	orr.w	r3, r3, #4
 80034d8:	6713      	str	r3, [r2, #112]	; 0x70
 80034da:	4b5c      	ldr	r3, [pc, #368]	; (800364c <HAL_RCC_OscConfig+0x470>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	4a5b      	ldr	r2, [pc, #364]	; (800364c <HAL_RCC_OscConfig+0x470>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6713      	str	r3, [r2, #112]	; 0x70
 80034e6:	e00b      	b.n	8003500 <HAL_RCC_OscConfig+0x324>
 80034e8:	4b58      	ldr	r3, [pc, #352]	; (800364c <HAL_RCC_OscConfig+0x470>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4a57      	ldr	r2, [pc, #348]	; (800364c <HAL_RCC_OscConfig+0x470>)
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	6713      	str	r3, [r2, #112]	; 0x70
 80034f4:	4b55      	ldr	r3, [pc, #340]	; (800364c <HAL_RCC_OscConfig+0x470>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f8:	4a54      	ldr	r2, [pc, #336]	; (800364c <HAL_RCC_OscConfig+0x470>)
 80034fa:	f023 0304 	bic.w	r3, r3, #4
 80034fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d015      	beq.n	8003534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fe f950 	bl	80017ac <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350e:	e00a      	b.n	8003526 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003510:	f7fe f94c 	bl	80017ac <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	; 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e0cb      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003526:	4b49      	ldr	r3, [pc, #292]	; (800364c <HAL_RCC_OscConfig+0x470>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0ee      	beq.n	8003510 <HAL_RCC_OscConfig+0x334>
 8003532:	e014      	b.n	800355e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003534:	f7fe f93a 	bl	80017ac <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353a:	e00a      	b.n	8003552 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353c:	f7fe f936 	bl	80017ac <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f241 3288 	movw	r2, #5000	; 0x1388
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e0b5      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003552:	4b3e      	ldr	r3, [pc, #248]	; (800364c <HAL_RCC_OscConfig+0x470>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1ee      	bne.n	800353c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800355e:	7dfb      	ldrb	r3, [r7, #23]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d105      	bne.n	8003570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003564:	4b39      	ldr	r3, [pc, #228]	; (800364c <HAL_RCC_OscConfig+0x470>)
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	4a38      	ldr	r2, [pc, #224]	; (800364c <HAL_RCC_OscConfig+0x470>)
 800356a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80a1 	beq.w	80036bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800357a:	4b34      	ldr	r3, [pc, #208]	; (800364c <HAL_RCC_OscConfig+0x470>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b08      	cmp	r3, #8
 8003584:	d05c      	beq.n	8003640 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d141      	bne.n	8003612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358e:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_RCC_OscConfig+0x478>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe f90a 	bl	80017ac <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359c:	f7fe f906 	bl	80017ac <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e087      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <HAL_RCC_OscConfig+0x470>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69da      	ldr	r2, [r3, #28]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	019b      	lsls	r3, r3, #6
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	3b01      	subs	r3, #1
 80035d4:	041b      	lsls	r3, r3, #16
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	061b      	lsls	r3, r3, #24
 80035de:	491b      	ldr	r1, [pc, #108]	; (800364c <HAL_RCC_OscConfig+0x470>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e4:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <HAL_RCC_OscConfig+0x478>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fe f8df 	bl	80017ac <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fe f8db 	bl	80017ac <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e05c      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_RCC_OscConfig+0x470>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x416>
 8003610:	e054      	b.n	80036bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_RCC_OscConfig+0x478>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe f8c8 	bl	80017ac <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003620:	f7fe f8c4 	bl	80017ac <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e045      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <HAL_RCC_OscConfig+0x470>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x444>
 800363e:	e03d      	b.n	80036bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d107      	bne.n	8003658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e038      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
 800364c:	40023800 	.word	0x40023800
 8003650:	40007000 	.word	0x40007000
 8003654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x4ec>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d028      	beq.n	80036b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d121      	bne.n	80036b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d11a      	bne.n	80036b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003688:	4013      	ands	r3, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800368e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003690:	4293      	cmp	r3, r2
 8003692:	d111      	bne.n	80036b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	3b01      	subs	r3, #1
 80036a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d107      	bne.n	80036b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800

080036cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0cc      	b.n	800387a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e0:	4b68      	ldr	r3, [pc, #416]	; (8003884 <HAL_RCC_ClockConfig+0x1b8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d90c      	bls.n	8003708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b65      	ldr	r3, [pc, #404]	; (8003884 <HAL_RCC_ClockConfig+0x1b8>)
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b63      	ldr	r3, [pc, #396]	; (8003884 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0b8      	b.n	800387a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d020      	beq.n	8003756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003720:	4b59      	ldr	r3, [pc, #356]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4a58      	ldr	r2, [pc, #352]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800372a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003738:	4b53      	ldr	r3, [pc, #332]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4a52      	ldr	r2, [pc, #328]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003744:	4b50      	ldr	r3, [pc, #320]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	494d      	ldr	r1, [pc, #308]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d044      	beq.n	80037ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d119      	bne.n	80037aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e07f      	b.n	800387a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d003      	beq.n	800378a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003786:	2b03      	cmp	r3, #3
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378a:	4b3f      	ldr	r3, [pc, #252]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d109      	bne.n	80037aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e06f      	b.n	800387a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379a:	4b3b      	ldr	r3, [pc, #236]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e067      	b.n	800387a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037aa:	4b37      	ldr	r3, [pc, #220]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f023 0203 	bic.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4934      	ldr	r1, [pc, #208]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037bc:	f7fd fff6 	bl	80017ac <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	e00a      	b.n	80037da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7fd fff2 	bl	80017ac <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e04f      	b.n	800387a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 020c 	and.w	r2, r3, #12
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d1eb      	bne.n	80037c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ec:	4b25      	ldr	r3, [pc, #148]	; (8003884 <HAL_RCC_ClockConfig+0x1b8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d20c      	bcs.n	8003814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b22      	ldr	r3, [pc, #136]	; (8003884 <HAL_RCC_ClockConfig+0x1b8>)
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b20      	ldr	r3, [pc, #128]	; (8003884 <HAL_RCC_ClockConfig+0x1b8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d001      	beq.n	8003814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e032      	b.n	800387a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003820:	4b19      	ldr	r3, [pc, #100]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4916      	ldr	r1, [pc, #88]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800383e:	4b12      	ldr	r3, [pc, #72]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	490e      	ldr	r1, [pc, #56]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003852:	f000 f821 	bl	8003898 <HAL_RCC_GetSysClockFreq>
 8003856:	4602      	mov	r2, r0
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	490a      	ldr	r1, [pc, #40]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 8003864:	5ccb      	ldrb	r3, [r1, r3]
 8003866:	fa22 f303 	lsr.w	r3, r2, r3
 800386a:	4a09      	ldr	r2, [pc, #36]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd ff56 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40023c00 	.word	0x40023c00
 8003888:	40023800 	.word	0x40023800
 800388c:	080044a4 	.word	0x080044a4
 8003890:	20000000 	.word	0x20000000
 8003894:	20000008 	.word	0x20000008

08003898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800389c:	b094      	sub	sp, #80	; 0x50
 800389e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	647b      	str	r3, [r7, #68]	; 0x44
 80038a4:	2300      	movs	r3, #0
 80038a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a8:	2300      	movs	r3, #0
 80038aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038b0:	4b79      	ldr	r3, [pc, #484]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d00d      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0x40>
 80038bc:	2b08      	cmp	r3, #8
 80038be:	f200 80e1 	bhi.w	8003a84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x34>
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ca:	e0db      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038cc:	4b73      	ldr	r3, [pc, #460]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x204>)
 80038ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038d0:	e0db      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038d2:	4b73      	ldr	r3, [pc, #460]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x208>)
 80038d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038d6:	e0d8      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038d8:	4b6f      	ldr	r3, [pc, #444]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038e2:	4b6d      	ldr	r3, [pc, #436]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d063      	beq.n	80039b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ee:	4b6a      	ldr	r3, [pc, #424]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	099b      	lsrs	r3, r3, #6
 80038f4:	2200      	movs	r2, #0
 80038f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80038f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
 8003902:	2300      	movs	r3, #0
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
 8003906:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800390a:	4622      	mov	r2, r4
 800390c:	462b      	mov	r3, r5
 800390e:	f04f 0000 	mov.w	r0, #0
 8003912:	f04f 0100 	mov.w	r1, #0
 8003916:	0159      	lsls	r1, r3, #5
 8003918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800391c:	0150      	lsls	r0, r2, #5
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4621      	mov	r1, r4
 8003924:	1a51      	subs	r1, r2, r1
 8003926:	6139      	str	r1, [r7, #16]
 8003928:	4629      	mov	r1, r5
 800392a:	eb63 0301 	sbc.w	r3, r3, r1
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800393c:	4659      	mov	r1, fp
 800393e:	018b      	lsls	r3, r1, #6
 8003940:	4651      	mov	r1, sl
 8003942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003946:	4651      	mov	r1, sl
 8003948:	018a      	lsls	r2, r1, #6
 800394a:	4651      	mov	r1, sl
 800394c:	ebb2 0801 	subs.w	r8, r2, r1
 8003950:	4659      	mov	r1, fp
 8003952:	eb63 0901 	sbc.w	r9, r3, r1
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800396a:	4690      	mov	r8, r2
 800396c:	4699      	mov	r9, r3
 800396e:	4623      	mov	r3, r4
 8003970:	eb18 0303 	adds.w	r3, r8, r3
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	462b      	mov	r3, r5
 8003978:	eb49 0303 	adc.w	r3, r9, r3
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800398a:	4629      	mov	r1, r5
 800398c:	024b      	lsls	r3, r1, #9
 800398e:	4621      	mov	r1, r4
 8003990:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003994:	4621      	mov	r1, r4
 8003996:	024a      	lsls	r2, r1, #9
 8003998:	4610      	mov	r0, r2
 800399a:	4619      	mov	r1, r3
 800399c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800399e:	2200      	movs	r2, #0
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039a8:	f7fc fc72 	bl	8000290 <__aeabi_uldivmod>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4613      	mov	r3, r2
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b4:	e058      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b6:	4b38      	ldr	r3, [pc, #224]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	099b      	lsrs	r3, r3, #6
 80039bc:	2200      	movs	r2, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	4611      	mov	r1, r2
 80039c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039c6:	623b      	str	r3, [r7, #32]
 80039c8:	2300      	movs	r3, #0
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
 80039cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039d0:	4642      	mov	r2, r8
 80039d2:	464b      	mov	r3, r9
 80039d4:	f04f 0000 	mov.w	r0, #0
 80039d8:	f04f 0100 	mov.w	r1, #0
 80039dc:	0159      	lsls	r1, r3, #5
 80039de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e2:	0150      	lsls	r0, r2, #5
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4641      	mov	r1, r8
 80039ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80039ee:	4649      	mov	r1, r9
 80039f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a08:	ebb2 040a 	subs.w	r4, r2, sl
 8003a0c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	00eb      	lsls	r3, r5, #3
 8003a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a1e:	00e2      	lsls	r2, r4, #3
 8003a20:	4614      	mov	r4, r2
 8003a22:	461d      	mov	r5, r3
 8003a24:	4643      	mov	r3, r8
 8003a26:	18e3      	adds	r3, r4, r3
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	eb45 0303 	adc.w	r3, r5, r3
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a3e:	4629      	mov	r1, r5
 8003a40:	028b      	lsls	r3, r1, #10
 8003a42:	4621      	mov	r1, r4
 8003a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a48:	4621      	mov	r1, r4
 8003a4a:	028a      	lsls	r2, r1, #10
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a52:	2200      	movs	r2, #0
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	61fa      	str	r2, [r7, #28]
 8003a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a5c:	f7fc fc18 	bl	8000290 <__aeabi_uldivmod>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4613      	mov	r3, r2
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	0c1b      	lsrs	r3, r3, #16
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	3301      	adds	r3, #1
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a82:	e002      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3750      	adds	r7, #80	; 0x50
 8003a90:	46bd      	mov	sp, r7
 8003a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	00f42400 	.word	0x00f42400
 8003aa0:	007a1200 	.word	0x007a1200

08003aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000000 	.word	0x20000000

08003abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ac0:	f7ff fff0 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	0a9b      	lsrs	r3, r3, #10
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	4903      	ldr	r1, [pc, #12]	; (8003ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad2:	5ccb      	ldrb	r3, [r1, r3]
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	080044b4 	.word	0x080044b4

08003ae4 <siprintf>:
 8003ae4:	b40e      	push	{r1, r2, r3}
 8003ae6:	b500      	push	{lr}
 8003ae8:	b09c      	sub	sp, #112	; 0x70
 8003aea:	ab1d      	add	r3, sp, #116	; 0x74
 8003aec:	9002      	str	r0, [sp, #8]
 8003aee:	9006      	str	r0, [sp, #24]
 8003af0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003af4:	4809      	ldr	r0, [pc, #36]	; (8003b1c <siprintf+0x38>)
 8003af6:	9107      	str	r1, [sp, #28]
 8003af8:	9104      	str	r1, [sp, #16]
 8003afa:	4909      	ldr	r1, [pc, #36]	; (8003b20 <siprintf+0x3c>)
 8003afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b00:	9105      	str	r1, [sp, #20]
 8003b02:	6800      	ldr	r0, [r0, #0]
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	a902      	add	r1, sp, #8
 8003b08:	f000 f992 	bl	8003e30 <_svfiprintf_r>
 8003b0c:	9b02      	ldr	r3, [sp, #8]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	b01c      	add	sp, #112	; 0x70
 8003b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b18:	b003      	add	sp, #12
 8003b1a:	4770      	bx	lr
 8003b1c:	2000005c 	.word	0x2000005c
 8003b20:	ffff0208 	.word	0xffff0208

08003b24 <memset>:
 8003b24:	4402      	add	r2, r0
 8003b26:	4603      	mov	r3, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <__errno>:
 8003b34:	4b01      	ldr	r3, [pc, #4]	; (8003b3c <__errno+0x8>)
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	2000005c 	.word	0x2000005c

08003b40 <__libc_init_array>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	4d0d      	ldr	r5, [pc, #52]	; (8003b78 <__libc_init_array+0x38>)
 8003b44:	4c0d      	ldr	r4, [pc, #52]	; (8003b7c <__libc_init_array+0x3c>)
 8003b46:	1b64      	subs	r4, r4, r5
 8003b48:	10a4      	asrs	r4, r4, #2
 8003b4a:	2600      	movs	r6, #0
 8003b4c:	42a6      	cmp	r6, r4
 8003b4e:	d109      	bne.n	8003b64 <__libc_init_array+0x24>
 8003b50:	4d0b      	ldr	r5, [pc, #44]	; (8003b80 <__libc_init_array+0x40>)
 8003b52:	4c0c      	ldr	r4, [pc, #48]	; (8003b84 <__libc_init_array+0x44>)
 8003b54:	f000 fc6a 	bl	800442c <_init>
 8003b58:	1b64      	subs	r4, r4, r5
 8003b5a:	10a4      	asrs	r4, r4, #2
 8003b5c:	2600      	movs	r6, #0
 8003b5e:	42a6      	cmp	r6, r4
 8003b60:	d105      	bne.n	8003b6e <__libc_init_array+0x2e>
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b68:	4798      	blx	r3
 8003b6a:	3601      	adds	r6, #1
 8003b6c:	e7ee      	b.n	8003b4c <__libc_init_array+0xc>
 8003b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b72:	4798      	blx	r3
 8003b74:	3601      	adds	r6, #1
 8003b76:	e7f2      	b.n	8003b5e <__libc_init_array+0x1e>
 8003b78:	080044f8 	.word	0x080044f8
 8003b7c:	080044f8 	.word	0x080044f8
 8003b80:	080044f8 	.word	0x080044f8
 8003b84:	080044fc 	.word	0x080044fc

08003b88 <__retarget_lock_acquire_recursive>:
 8003b88:	4770      	bx	lr

08003b8a <__retarget_lock_release_recursive>:
 8003b8a:	4770      	bx	lr

08003b8c <_free_r>:
 8003b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b8e:	2900      	cmp	r1, #0
 8003b90:	d044      	beq.n	8003c1c <_free_r+0x90>
 8003b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b96:	9001      	str	r0, [sp, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b9e:	bfb8      	it	lt
 8003ba0:	18e4      	addlt	r4, r4, r3
 8003ba2:	f000 f8df 	bl	8003d64 <__malloc_lock>
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <_free_r+0x94>)
 8003ba8:	9801      	ldr	r0, [sp, #4]
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	b933      	cbnz	r3, 8003bbc <_free_r+0x30>
 8003bae:	6063      	str	r3, [r4, #4]
 8003bb0:	6014      	str	r4, [r2, #0]
 8003bb2:	b003      	add	sp, #12
 8003bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bb8:	f000 b8da 	b.w	8003d70 <__malloc_unlock>
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	d908      	bls.n	8003bd2 <_free_r+0x46>
 8003bc0:	6825      	ldr	r5, [r4, #0]
 8003bc2:	1961      	adds	r1, r4, r5
 8003bc4:	428b      	cmp	r3, r1
 8003bc6:	bf01      	itttt	eq
 8003bc8:	6819      	ldreq	r1, [r3, #0]
 8003bca:	685b      	ldreq	r3, [r3, #4]
 8003bcc:	1949      	addeq	r1, r1, r5
 8003bce:	6021      	streq	r1, [r4, #0]
 8003bd0:	e7ed      	b.n	8003bae <_free_r+0x22>
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b10b      	cbz	r3, 8003bdc <_free_r+0x50>
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	d9fa      	bls.n	8003bd2 <_free_r+0x46>
 8003bdc:	6811      	ldr	r1, [r2, #0]
 8003bde:	1855      	adds	r5, r2, r1
 8003be0:	42a5      	cmp	r5, r4
 8003be2:	d10b      	bne.n	8003bfc <_free_r+0x70>
 8003be4:	6824      	ldr	r4, [r4, #0]
 8003be6:	4421      	add	r1, r4
 8003be8:	1854      	adds	r4, r2, r1
 8003bea:	42a3      	cmp	r3, r4
 8003bec:	6011      	str	r1, [r2, #0]
 8003bee:	d1e0      	bne.n	8003bb2 <_free_r+0x26>
 8003bf0:	681c      	ldr	r4, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	6053      	str	r3, [r2, #4]
 8003bf6:	440c      	add	r4, r1
 8003bf8:	6014      	str	r4, [r2, #0]
 8003bfa:	e7da      	b.n	8003bb2 <_free_r+0x26>
 8003bfc:	d902      	bls.n	8003c04 <_free_r+0x78>
 8003bfe:	230c      	movs	r3, #12
 8003c00:	6003      	str	r3, [r0, #0]
 8003c02:	e7d6      	b.n	8003bb2 <_free_r+0x26>
 8003c04:	6825      	ldr	r5, [r4, #0]
 8003c06:	1961      	adds	r1, r4, r5
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	bf04      	itt	eq
 8003c0c:	6819      	ldreq	r1, [r3, #0]
 8003c0e:	685b      	ldreq	r3, [r3, #4]
 8003c10:	6063      	str	r3, [r4, #4]
 8003c12:	bf04      	itt	eq
 8003c14:	1949      	addeq	r1, r1, r5
 8003c16:	6021      	streq	r1, [r4, #0]
 8003c18:	6054      	str	r4, [r2, #4]
 8003c1a:	e7ca      	b.n	8003bb2 <_free_r+0x26>
 8003c1c:	b003      	add	sp, #12
 8003c1e:	bd30      	pop	{r4, r5, pc}
 8003c20:	20000274 	.word	0x20000274

08003c24 <sbrk_aligned>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	4e0e      	ldr	r6, [pc, #56]	; (8003c60 <sbrk_aligned+0x3c>)
 8003c28:	460c      	mov	r4, r1
 8003c2a:	6831      	ldr	r1, [r6, #0]
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	b911      	cbnz	r1, 8003c36 <sbrk_aligned+0x12>
 8003c30:	f000 fba6 	bl	8004380 <_sbrk_r>
 8003c34:	6030      	str	r0, [r6, #0]
 8003c36:	4621      	mov	r1, r4
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f000 fba1 	bl	8004380 <_sbrk_r>
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	d00a      	beq.n	8003c58 <sbrk_aligned+0x34>
 8003c42:	1cc4      	adds	r4, r0, #3
 8003c44:	f024 0403 	bic.w	r4, r4, #3
 8003c48:	42a0      	cmp	r0, r4
 8003c4a:	d007      	beq.n	8003c5c <sbrk_aligned+0x38>
 8003c4c:	1a21      	subs	r1, r4, r0
 8003c4e:	4628      	mov	r0, r5
 8003c50:	f000 fb96 	bl	8004380 <_sbrk_r>
 8003c54:	3001      	adds	r0, #1
 8003c56:	d101      	bne.n	8003c5c <sbrk_aligned+0x38>
 8003c58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	20000278 	.word	0x20000278

08003c64 <_malloc_r>:
 8003c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c68:	1ccd      	adds	r5, r1, #3
 8003c6a:	f025 0503 	bic.w	r5, r5, #3
 8003c6e:	3508      	adds	r5, #8
 8003c70:	2d0c      	cmp	r5, #12
 8003c72:	bf38      	it	cc
 8003c74:	250c      	movcc	r5, #12
 8003c76:	2d00      	cmp	r5, #0
 8003c78:	4607      	mov	r7, r0
 8003c7a:	db01      	blt.n	8003c80 <_malloc_r+0x1c>
 8003c7c:	42a9      	cmp	r1, r5
 8003c7e:	d905      	bls.n	8003c8c <_malloc_r+0x28>
 8003c80:	230c      	movs	r3, #12
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	2600      	movs	r6, #0
 8003c86:	4630      	mov	r0, r6
 8003c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d60 <_malloc_r+0xfc>
 8003c90:	f000 f868 	bl	8003d64 <__malloc_lock>
 8003c94:	f8d8 3000 	ldr.w	r3, [r8]
 8003c98:	461c      	mov	r4, r3
 8003c9a:	bb5c      	cbnz	r4, 8003cf4 <_malloc_r+0x90>
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	f7ff ffc0 	bl	8003c24 <sbrk_aligned>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	d155      	bne.n	8003d56 <_malloc_r+0xf2>
 8003caa:	f8d8 4000 	ldr.w	r4, [r8]
 8003cae:	4626      	mov	r6, r4
 8003cb0:	2e00      	cmp	r6, #0
 8003cb2:	d145      	bne.n	8003d40 <_malloc_r+0xdc>
 8003cb4:	2c00      	cmp	r4, #0
 8003cb6:	d048      	beq.n	8003d4a <_malloc_r+0xe6>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	4631      	mov	r1, r6
 8003cbc:	4638      	mov	r0, r7
 8003cbe:	eb04 0903 	add.w	r9, r4, r3
 8003cc2:	f000 fb5d 	bl	8004380 <_sbrk_r>
 8003cc6:	4581      	cmp	r9, r0
 8003cc8:	d13f      	bne.n	8003d4a <_malloc_r+0xe6>
 8003cca:	6821      	ldr	r1, [r4, #0]
 8003ccc:	1a6d      	subs	r5, r5, r1
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	f7ff ffa7 	bl	8003c24 <sbrk_aligned>
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d037      	beq.n	8003d4a <_malloc_r+0xe6>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	442b      	add	r3, r5
 8003cde:	6023      	str	r3, [r4, #0]
 8003ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d038      	beq.n	8003d5a <_malloc_r+0xf6>
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	42a2      	cmp	r2, r4
 8003cec:	d12b      	bne.n	8003d46 <_malloc_r+0xe2>
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	e00f      	b.n	8003d14 <_malloc_r+0xb0>
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	1b52      	subs	r2, r2, r5
 8003cf8:	d41f      	bmi.n	8003d3a <_malloc_r+0xd6>
 8003cfa:	2a0b      	cmp	r2, #11
 8003cfc:	d917      	bls.n	8003d2e <_malloc_r+0xca>
 8003cfe:	1961      	adds	r1, r4, r5
 8003d00:	42a3      	cmp	r3, r4
 8003d02:	6025      	str	r5, [r4, #0]
 8003d04:	bf18      	it	ne
 8003d06:	6059      	strne	r1, [r3, #4]
 8003d08:	6863      	ldr	r3, [r4, #4]
 8003d0a:	bf08      	it	eq
 8003d0c:	f8c8 1000 	streq.w	r1, [r8]
 8003d10:	5162      	str	r2, [r4, r5]
 8003d12:	604b      	str	r3, [r1, #4]
 8003d14:	4638      	mov	r0, r7
 8003d16:	f104 060b 	add.w	r6, r4, #11
 8003d1a:	f000 f829 	bl	8003d70 <__malloc_unlock>
 8003d1e:	f026 0607 	bic.w	r6, r6, #7
 8003d22:	1d23      	adds	r3, r4, #4
 8003d24:	1af2      	subs	r2, r6, r3
 8003d26:	d0ae      	beq.n	8003c86 <_malloc_r+0x22>
 8003d28:	1b9b      	subs	r3, r3, r6
 8003d2a:	50a3      	str	r3, [r4, r2]
 8003d2c:	e7ab      	b.n	8003c86 <_malloc_r+0x22>
 8003d2e:	42a3      	cmp	r3, r4
 8003d30:	6862      	ldr	r2, [r4, #4]
 8003d32:	d1dd      	bne.n	8003cf0 <_malloc_r+0x8c>
 8003d34:	f8c8 2000 	str.w	r2, [r8]
 8003d38:	e7ec      	b.n	8003d14 <_malloc_r+0xb0>
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	6864      	ldr	r4, [r4, #4]
 8003d3e:	e7ac      	b.n	8003c9a <_malloc_r+0x36>
 8003d40:	4634      	mov	r4, r6
 8003d42:	6876      	ldr	r6, [r6, #4]
 8003d44:	e7b4      	b.n	8003cb0 <_malloc_r+0x4c>
 8003d46:	4613      	mov	r3, r2
 8003d48:	e7cc      	b.n	8003ce4 <_malloc_r+0x80>
 8003d4a:	230c      	movs	r3, #12
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	4638      	mov	r0, r7
 8003d50:	f000 f80e 	bl	8003d70 <__malloc_unlock>
 8003d54:	e797      	b.n	8003c86 <_malloc_r+0x22>
 8003d56:	6025      	str	r5, [r4, #0]
 8003d58:	e7dc      	b.n	8003d14 <_malloc_r+0xb0>
 8003d5a:	605b      	str	r3, [r3, #4]
 8003d5c:	deff      	udf	#255	; 0xff
 8003d5e:	bf00      	nop
 8003d60:	20000274 	.word	0x20000274

08003d64 <__malloc_lock>:
 8003d64:	4801      	ldr	r0, [pc, #4]	; (8003d6c <__malloc_lock+0x8>)
 8003d66:	f7ff bf0f 	b.w	8003b88 <__retarget_lock_acquire_recursive>
 8003d6a:	bf00      	nop
 8003d6c:	20000270 	.word	0x20000270

08003d70 <__malloc_unlock>:
 8003d70:	4801      	ldr	r0, [pc, #4]	; (8003d78 <__malloc_unlock+0x8>)
 8003d72:	f7ff bf0a 	b.w	8003b8a <__retarget_lock_release_recursive>
 8003d76:	bf00      	nop
 8003d78:	20000270 	.word	0x20000270

08003d7c <__ssputs_r>:
 8003d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d80:	688e      	ldr	r6, [r1, #8]
 8003d82:	461f      	mov	r7, r3
 8003d84:	42be      	cmp	r6, r7
 8003d86:	680b      	ldr	r3, [r1, #0]
 8003d88:	4682      	mov	sl, r0
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	4690      	mov	r8, r2
 8003d8e:	d82c      	bhi.n	8003dea <__ssputs_r+0x6e>
 8003d90:	898a      	ldrh	r2, [r1, #12]
 8003d92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d96:	d026      	beq.n	8003de6 <__ssputs_r+0x6a>
 8003d98:	6965      	ldr	r5, [r4, #20]
 8003d9a:	6909      	ldr	r1, [r1, #16]
 8003d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003da0:	eba3 0901 	sub.w	r9, r3, r1
 8003da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003da8:	1c7b      	adds	r3, r7, #1
 8003daa:	444b      	add	r3, r9
 8003dac:	106d      	asrs	r5, r5, #1
 8003dae:	429d      	cmp	r5, r3
 8003db0:	bf38      	it	cc
 8003db2:	461d      	movcc	r5, r3
 8003db4:	0553      	lsls	r3, r2, #21
 8003db6:	d527      	bpl.n	8003e08 <__ssputs_r+0x8c>
 8003db8:	4629      	mov	r1, r5
 8003dba:	f7ff ff53 	bl	8003c64 <_malloc_r>
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	b360      	cbz	r0, 8003e1c <__ssputs_r+0xa0>
 8003dc2:	6921      	ldr	r1, [r4, #16]
 8003dc4:	464a      	mov	r2, r9
 8003dc6:	f000 faeb 	bl	80043a0 <memcpy>
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd4:	81a3      	strh	r3, [r4, #12]
 8003dd6:	6126      	str	r6, [r4, #16]
 8003dd8:	6165      	str	r5, [r4, #20]
 8003dda:	444e      	add	r6, r9
 8003ddc:	eba5 0509 	sub.w	r5, r5, r9
 8003de0:	6026      	str	r6, [r4, #0]
 8003de2:	60a5      	str	r5, [r4, #8]
 8003de4:	463e      	mov	r6, r7
 8003de6:	42be      	cmp	r6, r7
 8003de8:	d900      	bls.n	8003dec <__ssputs_r+0x70>
 8003dea:	463e      	mov	r6, r7
 8003dec:	6820      	ldr	r0, [r4, #0]
 8003dee:	4632      	mov	r2, r6
 8003df0:	4641      	mov	r1, r8
 8003df2:	f000 faab 	bl	800434c <memmove>
 8003df6:	68a3      	ldr	r3, [r4, #8]
 8003df8:	1b9b      	subs	r3, r3, r6
 8003dfa:	60a3      	str	r3, [r4, #8]
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	4433      	add	r3, r6
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	2000      	movs	r0, #0
 8003e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e08:	462a      	mov	r2, r5
 8003e0a:	f000 fad7 	bl	80043bc <_realloc_r>
 8003e0e:	4606      	mov	r6, r0
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d1e0      	bne.n	8003dd6 <__ssputs_r+0x5a>
 8003e14:	6921      	ldr	r1, [r4, #16]
 8003e16:	4650      	mov	r0, sl
 8003e18:	f7ff feb8 	bl	8003b8c <_free_r>
 8003e1c:	230c      	movs	r3, #12
 8003e1e:	f8ca 3000 	str.w	r3, [sl]
 8003e22:	89a3      	ldrh	r3, [r4, #12]
 8003e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e28:	81a3      	strh	r3, [r4, #12]
 8003e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e2e:	e7e9      	b.n	8003e04 <__ssputs_r+0x88>

08003e30 <_svfiprintf_r>:
 8003e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e34:	4698      	mov	r8, r3
 8003e36:	898b      	ldrh	r3, [r1, #12]
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	b09d      	sub	sp, #116	; 0x74
 8003e3c:	4607      	mov	r7, r0
 8003e3e:	460d      	mov	r5, r1
 8003e40:	4614      	mov	r4, r2
 8003e42:	d50e      	bpl.n	8003e62 <_svfiprintf_r+0x32>
 8003e44:	690b      	ldr	r3, [r1, #16]
 8003e46:	b963      	cbnz	r3, 8003e62 <_svfiprintf_r+0x32>
 8003e48:	2140      	movs	r1, #64	; 0x40
 8003e4a:	f7ff ff0b 	bl	8003c64 <_malloc_r>
 8003e4e:	6028      	str	r0, [r5, #0]
 8003e50:	6128      	str	r0, [r5, #16]
 8003e52:	b920      	cbnz	r0, 8003e5e <_svfiprintf_r+0x2e>
 8003e54:	230c      	movs	r3, #12
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e5c:	e0d0      	b.n	8004000 <_svfiprintf_r+0x1d0>
 8003e5e:	2340      	movs	r3, #64	; 0x40
 8003e60:	616b      	str	r3, [r5, #20]
 8003e62:	2300      	movs	r3, #0
 8003e64:	9309      	str	r3, [sp, #36]	; 0x24
 8003e66:	2320      	movs	r3, #32
 8003e68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e70:	2330      	movs	r3, #48	; 0x30
 8003e72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004018 <_svfiprintf_r+0x1e8>
 8003e76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e7a:	f04f 0901 	mov.w	r9, #1
 8003e7e:	4623      	mov	r3, r4
 8003e80:	469a      	mov	sl, r3
 8003e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e86:	b10a      	cbz	r2, 8003e8c <_svfiprintf_r+0x5c>
 8003e88:	2a25      	cmp	r2, #37	; 0x25
 8003e8a:	d1f9      	bne.n	8003e80 <_svfiprintf_r+0x50>
 8003e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e90:	d00b      	beq.n	8003eaa <_svfiprintf_r+0x7a>
 8003e92:	465b      	mov	r3, fp
 8003e94:	4622      	mov	r2, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	4638      	mov	r0, r7
 8003e9a:	f7ff ff6f 	bl	8003d7c <__ssputs_r>
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	f000 80a9 	beq.w	8003ff6 <_svfiprintf_r+0x1c6>
 8003ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ea6:	445a      	add	r2, fp
 8003ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8003eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80a1 	beq.w	8003ff6 <_svfiprintf_r+0x1c6>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ebe:	f10a 0a01 	add.w	sl, sl, #1
 8003ec2:	9304      	str	r3, [sp, #16]
 8003ec4:	9307      	str	r3, [sp, #28]
 8003ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eca:	931a      	str	r3, [sp, #104]	; 0x68
 8003ecc:	4654      	mov	r4, sl
 8003ece:	2205      	movs	r2, #5
 8003ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed4:	4850      	ldr	r0, [pc, #320]	; (8004018 <_svfiprintf_r+0x1e8>)
 8003ed6:	f7fc f98b 	bl	80001f0 <memchr>
 8003eda:	9a04      	ldr	r2, [sp, #16]
 8003edc:	b9d8      	cbnz	r0, 8003f16 <_svfiprintf_r+0xe6>
 8003ede:	06d0      	lsls	r0, r2, #27
 8003ee0:	bf44      	itt	mi
 8003ee2:	2320      	movmi	r3, #32
 8003ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ee8:	0711      	lsls	r1, r2, #28
 8003eea:	bf44      	itt	mi
 8003eec:	232b      	movmi	r3, #43	; 0x2b
 8003eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef8:	d015      	beq.n	8003f26 <_svfiprintf_r+0xf6>
 8003efa:	9a07      	ldr	r2, [sp, #28]
 8003efc:	4654      	mov	r4, sl
 8003efe:	2000      	movs	r0, #0
 8003f00:	f04f 0c0a 	mov.w	ip, #10
 8003f04:	4621      	mov	r1, r4
 8003f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f0a:	3b30      	subs	r3, #48	; 0x30
 8003f0c:	2b09      	cmp	r3, #9
 8003f0e:	d94d      	bls.n	8003fac <_svfiprintf_r+0x17c>
 8003f10:	b1b0      	cbz	r0, 8003f40 <_svfiprintf_r+0x110>
 8003f12:	9207      	str	r2, [sp, #28]
 8003f14:	e014      	b.n	8003f40 <_svfiprintf_r+0x110>
 8003f16:	eba0 0308 	sub.w	r3, r0, r8
 8003f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	9304      	str	r3, [sp, #16]
 8003f22:	46a2      	mov	sl, r4
 8003f24:	e7d2      	b.n	8003ecc <_svfiprintf_r+0x9c>
 8003f26:	9b03      	ldr	r3, [sp, #12]
 8003f28:	1d19      	adds	r1, r3, #4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	9103      	str	r1, [sp, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	bfbb      	ittet	lt
 8003f32:	425b      	neglt	r3, r3
 8003f34:	f042 0202 	orrlt.w	r2, r2, #2
 8003f38:	9307      	strge	r3, [sp, #28]
 8003f3a:	9307      	strlt	r3, [sp, #28]
 8003f3c:	bfb8      	it	lt
 8003f3e:	9204      	strlt	r2, [sp, #16]
 8003f40:	7823      	ldrb	r3, [r4, #0]
 8003f42:	2b2e      	cmp	r3, #46	; 0x2e
 8003f44:	d10c      	bne.n	8003f60 <_svfiprintf_r+0x130>
 8003f46:	7863      	ldrb	r3, [r4, #1]
 8003f48:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4a:	d134      	bne.n	8003fb6 <_svfiprintf_r+0x186>
 8003f4c:	9b03      	ldr	r3, [sp, #12]
 8003f4e:	1d1a      	adds	r2, r3, #4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	9203      	str	r2, [sp, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bfb8      	it	lt
 8003f58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003f5c:	3402      	adds	r4, #2
 8003f5e:	9305      	str	r3, [sp, #20]
 8003f60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004028 <_svfiprintf_r+0x1f8>
 8003f64:	7821      	ldrb	r1, [r4, #0]
 8003f66:	2203      	movs	r2, #3
 8003f68:	4650      	mov	r0, sl
 8003f6a:	f7fc f941 	bl	80001f0 <memchr>
 8003f6e:	b138      	cbz	r0, 8003f80 <_svfiprintf_r+0x150>
 8003f70:	9b04      	ldr	r3, [sp, #16]
 8003f72:	eba0 000a 	sub.w	r0, r0, sl
 8003f76:	2240      	movs	r2, #64	; 0x40
 8003f78:	4082      	lsls	r2, r0
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	3401      	adds	r4, #1
 8003f7e:	9304      	str	r3, [sp, #16]
 8003f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f84:	4825      	ldr	r0, [pc, #148]	; (800401c <_svfiprintf_r+0x1ec>)
 8003f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f8a:	2206      	movs	r2, #6
 8003f8c:	f7fc f930 	bl	80001f0 <memchr>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	d038      	beq.n	8004006 <_svfiprintf_r+0x1d6>
 8003f94:	4b22      	ldr	r3, [pc, #136]	; (8004020 <_svfiprintf_r+0x1f0>)
 8003f96:	bb1b      	cbnz	r3, 8003fe0 <_svfiprintf_r+0x1b0>
 8003f98:	9b03      	ldr	r3, [sp, #12]
 8003f9a:	3307      	adds	r3, #7
 8003f9c:	f023 0307 	bic.w	r3, r3, #7
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	9303      	str	r3, [sp, #12]
 8003fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa6:	4433      	add	r3, r6
 8003fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8003faa:	e768      	b.n	8003e7e <_svfiprintf_r+0x4e>
 8003fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	e7a6      	b.n	8003f04 <_svfiprintf_r+0xd4>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	3401      	adds	r4, #1
 8003fba:	9305      	str	r3, [sp, #20]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	f04f 0c0a 	mov.w	ip, #10
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fc8:	3a30      	subs	r2, #48	; 0x30
 8003fca:	2a09      	cmp	r2, #9
 8003fcc:	d903      	bls.n	8003fd6 <_svfiprintf_r+0x1a6>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0c6      	beq.n	8003f60 <_svfiprintf_r+0x130>
 8003fd2:	9105      	str	r1, [sp, #20]
 8003fd4:	e7c4      	b.n	8003f60 <_svfiprintf_r+0x130>
 8003fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fda:	4604      	mov	r4, r0
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e7f0      	b.n	8003fc2 <_svfiprintf_r+0x192>
 8003fe0:	ab03      	add	r3, sp, #12
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	462a      	mov	r2, r5
 8003fe6:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <_svfiprintf_r+0x1f4>)
 8003fe8:	a904      	add	r1, sp, #16
 8003fea:	4638      	mov	r0, r7
 8003fec:	f3af 8000 	nop.w
 8003ff0:	1c42      	adds	r2, r0, #1
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	d1d6      	bne.n	8003fa4 <_svfiprintf_r+0x174>
 8003ff6:	89ab      	ldrh	r3, [r5, #12]
 8003ff8:	065b      	lsls	r3, r3, #25
 8003ffa:	f53f af2d 	bmi.w	8003e58 <_svfiprintf_r+0x28>
 8003ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004000:	b01d      	add	sp, #116	; 0x74
 8004002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004006:	ab03      	add	r3, sp, #12
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	462a      	mov	r2, r5
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <_svfiprintf_r+0x1f4>)
 800400e:	a904      	add	r1, sp, #16
 8004010:	4638      	mov	r0, r7
 8004012:	f000 f879 	bl	8004108 <_printf_i>
 8004016:	e7eb      	b.n	8003ff0 <_svfiprintf_r+0x1c0>
 8004018:	080044bc 	.word	0x080044bc
 800401c:	080044c6 	.word	0x080044c6
 8004020:	00000000 	.word	0x00000000
 8004024:	08003d7d 	.word	0x08003d7d
 8004028:	080044c2 	.word	0x080044c2

0800402c <_printf_common>:
 800402c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004030:	4616      	mov	r6, r2
 8004032:	4699      	mov	r9, r3
 8004034:	688a      	ldr	r2, [r1, #8]
 8004036:	690b      	ldr	r3, [r1, #16]
 8004038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800403c:	4293      	cmp	r3, r2
 800403e:	bfb8      	it	lt
 8004040:	4613      	movlt	r3, r2
 8004042:	6033      	str	r3, [r6, #0]
 8004044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004048:	4607      	mov	r7, r0
 800404a:	460c      	mov	r4, r1
 800404c:	b10a      	cbz	r2, 8004052 <_printf_common+0x26>
 800404e:	3301      	adds	r3, #1
 8004050:	6033      	str	r3, [r6, #0]
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	0699      	lsls	r1, r3, #26
 8004056:	bf42      	ittt	mi
 8004058:	6833      	ldrmi	r3, [r6, #0]
 800405a:	3302      	addmi	r3, #2
 800405c:	6033      	strmi	r3, [r6, #0]
 800405e:	6825      	ldr	r5, [r4, #0]
 8004060:	f015 0506 	ands.w	r5, r5, #6
 8004064:	d106      	bne.n	8004074 <_printf_common+0x48>
 8004066:	f104 0a19 	add.w	sl, r4, #25
 800406a:	68e3      	ldr	r3, [r4, #12]
 800406c:	6832      	ldr	r2, [r6, #0]
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	42ab      	cmp	r3, r5
 8004072:	dc26      	bgt.n	80040c2 <_printf_common+0x96>
 8004074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004078:	1e13      	subs	r3, r2, #0
 800407a:	6822      	ldr	r2, [r4, #0]
 800407c:	bf18      	it	ne
 800407e:	2301      	movne	r3, #1
 8004080:	0692      	lsls	r2, r2, #26
 8004082:	d42b      	bmi.n	80040dc <_printf_common+0xb0>
 8004084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004088:	4649      	mov	r1, r9
 800408a:	4638      	mov	r0, r7
 800408c:	47c0      	blx	r8
 800408e:	3001      	adds	r0, #1
 8004090:	d01e      	beq.n	80040d0 <_printf_common+0xa4>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	6922      	ldr	r2, [r4, #16]
 8004096:	f003 0306 	and.w	r3, r3, #6
 800409a:	2b04      	cmp	r3, #4
 800409c:	bf02      	ittt	eq
 800409e:	68e5      	ldreq	r5, [r4, #12]
 80040a0:	6833      	ldreq	r3, [r6, #0]
 80040a2:	1aed      	subeq	r5, r5, r3
 80040a4:	68a3      	ldr	r3, [r4, #8]
 80040a6:	bf0c      	ite	eq
 80040a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040ac:	2500      	movne	r5, #0
 80040ae:	4293      	cmp	r3, r2
 80040b0:	bfc4      	itt	gt
 80040b2:	1a9b      	subgt	r3, r3, r2
 80040b4:	18ed      	addgt	r5, r5, r3
 80040b6:	2600      	movs	r6, #0
 80040b8:	341a      	adds	r4, #26
 80040ba:	42b5      	cmp	r5, r6
 80040bc:	d11a      	bne.n	80040f4 <_printf_common+0xc8>
 80040be:	2000      	movs	r0, #0
 80040c0:	e008      	b.n	80040d4 <_printf_common+0xa8>
 80040c2:	2301      	movs	r3, #1
 80040c4:	4652      	mov	r2, sl
 80040c6:	4649      	mov	r1, r9
 80040c8:	4638      	mov	r0, r7
 80040ca:	47c0      	blx	r8
 80040cc:	3001      	adds	r0, #1
 80040ce:	d103      	bne.n	80040d8 <_printf_common+0xac>
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d8:	3501      	adds	r5, #1
 80040da:	e7c6      	b.n	800406a <_printf_common+0x3e>
 80040dc:	18e1      	adds	r1, r4, r3
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	2030      	movs	r0, #48	; 0x30
 80040e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040e6:	4422      	add	r2, r4
 80040e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040f0:	3302      	adds	r3, #2
 80040f2:	e7c7      	b.n	8004084 <_printf_common+0x58>
 80040f4:	2301      	movs	r3, #1
 80040f6:	4622      	mov	r2, r4
 80040f8:	4649      	mov	r1, r9
 80040fa:	4638      	mov	r0, r7
 80040fc:	47c0      	blx	r8
 80040fe:	3001      	adds	r0, #1
 8004100:	d0e6      	beq.n	80040d0 <_printf_common+0xa4>
 8004102:	3601      	adds	r6, #1
 8004104:	e7d9      	b.n	80040ba <_printf_common+0x8e>
	...

08004108 <_printf_i>:
 8004108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800410c:	7e0f      	ldrb	r7, [r1, #24]
 800410e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004110:	2f78      	cmp	r7, #120	; 0x78
 8004112:	4691      	mov	r9, r2
 8004114:	4680      	mov	r8, r0
 8004116:	460c      	mov	r4, r1
 8004118:	469a      	mov	sl, r3
 800411a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800411e:	d807      	bhi.n	8004130 <_printf_i+0x28>
 8004120:	2f62      	cmp	r7, #98	; 0x62
 8004122:	d80a      	bhi.n	800413a <_printf_i+0x32>
 8004124:	2f00      	cmp	r7, #0
 8004126:	f000 80d4 	beq.w	80042d2 <_printf_i+0x1ca>
 800412a:	2f58      	cmp	r7, #88	; 0x58
 800412c:	f000 80c0 	beq.w	80042b0 <_printf_i+0x1a8>
 8004130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004138:	e03a      	b.n	80041b0 <_printf_i+0xa8>
 800413a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800413e:	2b15      	cmp	r3, #21
 8004140:	d8f6      	bhi.n	8004130 <_printf_i+0x28>
 8004142:	a101      	add	r1, pc, #4	; (adr r1, 8004148 <_printf_i+0x40>)
 8004144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004148:	080041a1 	.word	0x080041a1
 800414c:	080041b5 	.word	0x080041b5
 8004150:	08004131 	.word	0x08004131
 8004154:	08004131 	.word	0x08004131
 8004158:	08004131 	.word	0x08004131
 800415c:	08004131 	.word	0x08004131
 8004160:	080041b5 	.word	0x080041b5
 8004164:	08004131 	.word	0x08004131
 8004168:	08004131 	.word	0x08004131
 800416c:	08004131 	.word	0x08004131
 8004170:	08004131 	.word	0x08004131
 8004174:	080042b9 	.word	0x080042b9
 8004178:	080041e1 	.word	0x080041e1
 800417c:	08004273 	.word	0x08004273
 8004180:	08004131 	.word	0x08004131
 8004184:	08004131 	.word	0x08004131
 8004188:	080042db 	.word	0x080042db
 800418c:	08004131 	.word	0x08004131
 8004190:	080041e1 	.word	0x080041e1
 8004194:	08004131 	.word	0x08004131
 8004198:	08004131 	.word	0x08004131
 800419c:	0800427b 	.word	0x0800427b
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	1d1a      	adds	r2, r3, #4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	602a      	str	r2, [r5, #0]
 80041a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b0:	2301      	movs	r3, #1
 80041b2:	e09f      	b.n	80042f4 <_printf_i+0x1ec>
 80041b4:	6820      	ldr	r0, [r4, #0]
 80041b6:	682b      	ldr	r3, [r5, #0]
 80041b8:	0607      	lsls	r7, r0, #24
 80041ba:	f103 0104 	add.w	r1, r3, #4
 80041be:	6029      	str	r1, [r5, #0]
 80041c0:	d501      	bpl.n	80041c6 <_printf_i+0xbe>
 80041c2:	681e      	ldr	r6, [r3, #0]
 80041c4:	e003      	b.n	80041ce <_printf_i+0xc6>
 80041c6:	0646      	lsls	r6, r0, #25
 80041c8:	d5fb      	bpl.n	80041c2 <_printf_i+0xba>
 80041ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041ce:	2e00      	cmp	r6, #0
 80041d0:	da03      	bge.n	80041da <_printf_i+0xd2>
 80041d2:	232d      	movs	r3, #45	; 0x2d
 80041d4:	4276      	negs	r6, r6
 80041d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041da:	485a      	ldr	r0, [pc, #360]	; (8004344 <_printf_i+0x23c>)
 80041dc:	230a      	movs	r3, #10
 80041de:	e012      	b.n	8004206 <_printf_i+0xfe>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	6820      	ldr	r0, [r4, #0]
 80041e4:	1d19      	adds	r1, r3, #4
 80041e6:	6029      	str	r1, [r5, #0]
 80041e8:	0605      	lsls	r5, r0, #24
 80041ea:	d501      	bpl.n	80041f0 <_printf_i+0xe8>
 80041ec:	681e      	ldr	r6, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <_printf_i+0xee>
 80041f0:	0641      	lsls	r1, r0, #25
 80041f2:	d5fb      	bpl.n	80041ec <_printf_i+0xe4>
 80041f4:	881e      	ldrh	r6, [r3, #0]
 80041f6:	4853      	ldr	r0, [pc, #332]	; (8004344 <_printf_i+0x23c>)
 80041f8:	2f6f      	cmp	r7, #111	; 0x6f
 80041fa:	bf0c      	ite	eq
 80041fc:	2308      	moveq	r3, #8
 80041fe:	230a      	movne	r3, #10
 8004200:	2100      	movs	r1, #0
 8004202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004206:	6865      	ldr	r5, [r4, #4]
 8004208:	60a5      	str	r5, [r4, #8]
 800420a:	2d00      	cmp	r5, #0
 800420c:	bfa2      	ittt	ge
 800420e:	6821      	ldrge	r1, [r4, #0]
 8004210:	f021 0104 	bicge.w	r1, r1, #4
 8004214:	6021      	strge	r1, [r4, #0]
 8004216:	b90e      	cbnz	r6, 800421c <_printf_i+0x114>
 8004218:	2d00      	cmp	r5, #0
 800421a:	d04b      	beq.n	80042b4 <_printf_i+0x1ac>
 800421c:	4615      	mov	r5, r2
 800421e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004222:	fb03 6711 	mls	r7, r3, r1, r6
 8004226:	5dc7      	ldrb	r7, [r0, r7]
 8004228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800422c:	4637      	mov	r7, r6
 800422e:	42bb      	cmp	r3, r7
 8004230:	460e      	mov	r6, r1
 8004232:	d9f4      	bls.n	800421e <_printf_i+0x116>
 8004234:	2b08      	cmp	r3, #8
 8004236:	d10b      	bne.n	8004250 <_printf_i+0x148>
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	07de      	lsls	r6, r3, #31
 800423c:	d508      	bpl.n	8004250 <_printf_i+0x148>
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	6861      	ldr	r1, [r4, #4]
 8004242:	4299      	cmp	r1, r3
 8004244:	bfde      	ittt	le
 8004246:	2330      	movle	r3, #48	; 0x30
 8004248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800424c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004250:	1b52      	subs	r2, r2, r5
 8004252:	6122      	str	r2, [r4, #16]
 8004254:	f8cd a000 	str.w	sl, [sp]
 8004258:	464b      	mov	r3, r9
 800425a:	aa03      	add	r2, sp, #12
 800425c:	4621      	mov	r1, r4
 800425e:	4640      	mov	r0, r8
 8004260:	f7ff fee4 	bl	800402c <_printf_common>
 8004264:	3001      	adds	r0, #1
 8004266:	d14a      	bne.n	80042fe <_printf_i+0x1f6>
 8004268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800426c:	b004      	add	sp, #16
 800426e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	f043 0320 	orr.w	r3, r3, #32
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	4833      	ldr	r0, [pc, #204]	; (8004348 <_printf_i+0x240>)
 800427c:	2778      	movs	r7, #120	; 0x78
 800427e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	6829      	ldr	r1, [r5, #0]
 8004286:	061f      	lsls	r7, r3, #24
 8004288:	f851 6b04 	ldr.w	r6, [r1], #4
 800428c:	d402      	bmi.n	8004294 <_printf_i+0x18c>
 800428e:	065f      	lsls	r7, r3, #25
 8004290:	bf48      	it	mi
 8004292:	b2b6      	uxthmi	r6, r6
 8004294:	07df      	lsls	r7, r3, #31
 8004296:	bf48      	it	mi
 8004298:	f043 0320 	orrmi.w	r3, r3, #32
 800429c:	6029      	str	r1, [r5, #0]
 800429e:	bf48      	it	mi
 80042a0:	6023      	strmi	r3, [r4, #0]
 80042a2:	b91e      	cbnz	r6, 80042ac <_printf_i+0x1a4>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	f023 0320 	bic.w	r3, r3, #32
 80042aa:	6023      	str	r3, [r4, #0]
 80042ac:	2310      	movs	r3, #16
 80042ae:	e7a7      	b.n	8004200 <_printf_i+0xf8>
 80042b0:	4824      	ldr	r0, [pc, #144]	; (8004344 <_printf_i+0x23c>)
 80042b2:	e7e4      	b.n	800427e <_printf_i+0x176>
 80042b4:	4615      	mov	r5, r2
 80042b6:	e7bd      	b.n	8004234 <_printf_i+0x12c>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	6826      	ldr	r6, [r4, #0]
 80042bc:	6961      	ldr	r1, [r4, #20]
 80042be:	1d18      	adds	r0, r3, #4
 80042c0:	6028      	str	r0, [r5, #0]
 80042c2:	0635      	lsls	r5, r6, #24
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	d501      	bpl.n	80042cc <_printf_i+0x1c4>
 80042c8:	6019      	str	r1, [r3, #0]
 80042ca:	e002      	b.n	80042d2 <_printf_i+0x1ca>
 80042cc:	0670      	lsls	r0, r6, #25
 80042ce:	d5fb      	bpl.n	80042c8 <_printf_i+0x1c0>
 80042d0:	8019      	strh	r1, [r3, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	6123      	str	r3, [r4, #16]
 80042d6:	4615      	mov	r5, r2
 80042d8:	e7bc      	b.n	8004254 <_printf_i+0x14c>
 80042da:	682b      	ldr	r3, [r5, #0]
 80042dc:	1d1a      	adds	r2, r3, #4
 80042de:	602a      	str	r2, [r5, #0]
 80042e0:	681d      	ldr	r5, [r3, #0]
 80042e2:	6862      	ldr	r2, [r4, #4]
 80042e4:	2100      	movs	r1, #0
 80042e6:	4628      	mov	r0, r5
 80042e8:	f7fb ff82 	bl	80001f0 <memchr>
 80042ec:	b108      	cbz	r0, 80042f2 <_printf_i+0x1ea>
 80042ee:	1b40      	subs	r0, r0, r5
 80042f0:	6060      	str	r0, [r4, #4]
 80042f2:	6863      	ldr	r3, [r4, #4]
 80042f4:	6123      	str	r3, [r4, #16]
 80042f6:	2300      	movs	r3, #0
 80042f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fc:	e7aa      	b.n	8004254 <_printf_i+0x14c>
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	462a      	mov	r2, r5
 8004302:	4649      	mov	r1, r9
 8004304:	4640      	mov	r0, r8
 8004306:	47d0      	blx	sl
 8004308:	3001      	adds	r0, #1
 800430a:	d0ad      	beq.n	8004268 <_printf_i+0x160>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	079b      	lsls	r3, r3, #30
 8004310:	d413      	bmi.n	800433a <_printf_i+0x232>
 8004312:	68e0      	ldr	r0, [r4, #12]
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	4298      	cmp	r0, r3
 8004318:	bfb8      	it	lt
 800431a:	4618      	movlt	r0, r3
 800431c:	e7a6      	b.n	800426c <_printf_i+0x164>
 800431e:	2301      	movs	r3, #1
 8004320:	4632      	mov	r2, r6
 8004322:	4649      	mov	r1, r9
 8004324:	4640      	mov	r0, r8
 8004326:	47d0      	blx	sl
 8004328:	3001      	adds	r0, #1
 800432a:	d09d      	beq.n	8004268 <_printf_i+0x160>
 800432c:	3501      	adds	r5, #1
 800432e:	68e3      	ldr	r3, [r4, #12]
 8004330:	9903      	ldr	r1, [sp, #12]
 8004332:	1a5b      	subs	r3, r3, r1
 8004334:	42ab      	cmp	r3, r5
 8004336:	dcf2      	bgt.n	800431e <_printf_i+0x216>
 8004338:	e7eb      	b.n	8004312 <_printf_i+0x20a>
 800433a:	2500      	movs	r5, #0
 800433c:	f104 0619 	add.w	r6, r4, #25
 8004340:	e7f5      	b.n	800432e <_printf_i+0x226>
 8004342:	bf00      	nop
 8004344:	080044cd 	.word	0x080044cd
 8004348:	080044de 	.word	0x080044de

0800434c <memmove>:
 800434c:	4288      	cmp	r0, r1
 800434e:	b510      	push	{r4, lr}
 8004350:	eb01 0402 	add.w	r4, r1, r2
 8004354:	d902      	bls.n	800435c <memmove+0x10>
 8004356:	4284      	cmp	r4, r0
 8004358:	4623      	mov	r3, r4
 800435a:	d807      	bhi.n	800436c <memmove+0x20>
 800435c:	1e43      	subs	r3, r0, #1
 800435e:	42a1      	cmp	r1, r4
 8004360:	d008      	beq.n	8004374 <memmove+0x28>
 8004362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800436a:	e7f8      	b.n	800435e <memmove+0x12>
 800436c:	4402      	add	r2, r0
 800436e:	4601      	mov	r1, r0
 8004370:	428a      	cmp	r2, r1
 8004372:	d100      	bne.n	8004376 <memmove+0x2a>
 8004374:	bd10      	pop	{r4, pc}
 8004376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800437a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800437e:	e7f7      	b.n	8004370 <memmove+0x24>

08004380 <_sbrk_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4d06      	ldr	r5, [pc, #24]	; (800439c <_sbrk_r+0x1c>)
 8004384:	2300      	movs	r3, #0
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	602b      	str	r3, [r5, #0]
 800438c:	f7fc fcde 	bl	8000d4c <_sbrk>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d102      	bne.n	800439a <_sbrk_r+0x1a>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	b103      	cbz	r3, 800439a <_sbrk_r+0x1a>
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	bd38      	pop	{r3, r4, r5, pc}
 800439c:	2000026c 	.word	0x2000026c

080043a0 <memcpy>:
 80043a0:	440a      	add	r2, r1
 80043a2:	4291      	cmp	r1, r2
 80043a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80043a8:	d100      	bne.n	80043ac <memcpy+0xc>
 80043aa:	4770      	bx	lr
 80043ac:	b510      	push	{r4, lr}
 80043ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043b6:	4291      	cmp	r1, r2
 80043b8:	d1f9      	bne.n	80043ae <memcpy+0xe>
 80043ba:	bd10      	pop	{r4, pc}

080043bc <_realloc_r>:
 80043bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c0:	4680      	mov	r8, r0
 80043c2:	4614      	mov	r4, r2
 80043c4:	460e      	mov	r6, r1
 80043c6:	b921      	cbnz	r1, 80043d2 <_realloc_r+0x16>
 80043c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043cc:	4611      	mov	r1, r2
 80043ce:	f7ff bc49 	b.w	8003c64 <_malloc_r>
 80043d2:	b92a      	cbnz	r2, 80043e0 <_realloc_r+0x24>
 80043d4:	f7ff fbda 	bl	8003b8c <_free_r>
 80043d8:	4625      	mov	r5, r4
 80043da:	4628      	mov	r0, r5
 80043dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e0:	f000 f81b 	bl	800441a <_malloc_usable_size_r>
 80043e4:	4284      	cmp	r4, r0
 80043e6:	4607      	mov	r7, r0
 80043e8:	d802      	bhi.n	80043f0 <_realloc_r+0x34>
 80043ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043ee:	d812      	bhi.n	8004416 <_realloc_r+0x5a>
 80043f0:	4621      	mov	r1, r4
 80043f2:	4640      	mov	r0, r8
 80043f4:	f7ff fc36 	bl	8003c64 <_malloc_r>
 80043f8:	4605      	mov	r5, r0
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d0ed      	beq.n	80043da <_realloc_r+0x1e>
 80043fe:	42bc      	cmp	r4, r7
 8004400:	4622      	mov	r2, r4
 8004402:	4631      	mov	r1, r6
 8004404:	bf28      	it	cs
 8004406:	463a      	movcs	r2, r7
 8004408:	f7ff ffca 	bl	80043a0 <memcpy>
 800440c:	4631      	mov	r1, r6
 800440e:	4640      	mov	r0, r8
 8004410:	f7ff fbbc 	bl	8003b8c <_free_r>
 8004414:	e7e1      	b.n	80043da <_realloc_r+0x1e>
 8004416:	4635      	mov	r5, r6
 8004418:	e7df      	b.n	80043da <_realloc_r+0x1e>

0800441a <_malloc_usable_size_r>:
 800441a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800441e:	1f18      	subs	r0, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	bfbc      	itt	lt
 8004424:	580b      	ldrlt	r3, [r1, r0]
 8004426:	18c0      	addlt	r0, r0, r3
 8004428:	4770      	bx	lr
	...

0800442c <_init>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr

08004438 <_fini>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr
